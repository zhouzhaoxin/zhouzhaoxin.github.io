<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Tornado最基本代码理解]]></title>
      <url>/2018/03/26/tornado02/</url>
      <content type="html"><![CDATA[<p>新建Hello.py，代码如下<br><a id="more"></a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tornado.web</div><div class="line"><span class="keyword">import</span> tornado.ioloop</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></div><div class="line">    <span class="string">"""主路由处理类"""</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""对应http的get请求方式"""</span></div><div class="line">        self.write(<span class="string">"Hello Tornado!"</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    app = tornado.web.Application([</div><div class="line">        (<span class="string">r"/"</span>, IndexHandler),</div><div class="line">    ])</div><div class="line">    app.listen(<span class="number">8000</span>)</div><div class="line">    tornado.ioloop.IOLoop.current().start()</div></pre></td></tr></table></figure>
<p>执行如下命令，开启tornado：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ python hello.py</div></pre></td></tr></table></figure>
<h1 id="代码理解"><a href="#代码理解" class="headerlink" title="代码理解"></a>代码理解</h1><h2 id="tornado-web"><a href="#tornado-web" class="headerlink" title="tornado.web"></a>tornado.web</h2><p>tornado的基础web框架模块</p>
<ul>
<li>RequestHandler</li>
</ul>
<p>封装了对应一个请求的所有信息和方法，write(响应信息)就是写响应信息的一个方法；对应每一种http请求方式（get、post等），把对应的处理逻辑写进同名的成员方法中（如对应get请求方式，就将对应的处理逻辑写在get()方法中），当没有对应请求方式的成员方法时，会返回“405: Method Not Allowed”错误。</p>
<p>我们将代码中定义的get()方法更改为post()后，再用浏览器重新访问（浏览器地址栏中输入网址访问的方式为get请求方式），演示如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding:utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> tornado.web</div><div class="line"><span class="keyword">import</span> tornado.ioloop</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></div><div class="line">    <span class="string">"""主路由处理类"""</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span>  <span class="comment"># 我们修改了这里</span></div><div class="line">        <span class="string">"""对应http的post请求方式"""</span></div><div class="line">        self.write(<span class="string">"Hello Tornado!"</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    app = tornado.web.Application([</div><div class="line">        (<span class="string">r"/"</span>, IndexHandler),</div><div class="line">    ])</div><div class="line">    app.listen(<span class="number">8000</span>)</div><div class="line">    tornado.ioloop.IOLoop.current().start()</div></pre></td></tr></table></figure></p>
<p><img src="/images/tornado/405_method_not_allowed.png" alt="405_method_not_allowed.png"></p>
<ul>
<li>Application</li>
</ul>
<p>Tornado Web框架的核心应用类，是与服务器对接的接口，里面保存了路由信息表，其初始化接收的第一个参数就是一个路由信息映射元组的列表；其listen(端口)方法用来创建一个http服务器实例，并绑定到给定端口（注意：此时服务器并未开启监听）。</p>
<h2 id="tornado-ioloop"><a href="#tornado-ioloop" class="headerlink" title="tornado.ioloop"></a>tornado.ioloop</h2><p>tornado的核心io循环模块，封装了Linux的epoll和BSD的kqueue，tornado高性能的基石。 以Linux的epoll为例，其原理如下图：<br><img src="/images/tornado/ioloop_epoll.png" alt="ioloop_epoll.png"></p>
<ul>
<li>IOLoop.current()</li>
</ul>
<p>返回当前线程的IOLoop实例。</p>
<ul>
<li>IOLoop.start()</li>
</ul>
<p>启动IOLoop实例的I/O循环,同时服务器监听被打开。</p>
<h1 id="Tornado-Web程序编写思路"><a href="#Tornado-Web程序编写思路" class="headerlink" title="Tornado Web程序编写思路"></a>Tornado Web程序编写思路</h1><ol>
<li>创建web应用实例对象，第一个初始化参数为路由映射列表。</li>
<li>定义实现路由映射列表中的handler类。</li>
<li>创建服务器实例，绑定服务器端口。</li>
<li>启动当前线程的IOLoop。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tornado </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Tornado简介]]></title>
      <url>/2018/03/20/tornado01/</url>
      <content type="html"><![CDATA[<p>以Django为代表的python web应用部署时采用wsgi协议与服务器对接（被服务器托管），而这类服务器通常都是基于多线程的，也就是说每一个网络请求服务器都会有一个对应的线程来用web应用（如Django）进行处理。<br><a id="more"></a></p>
<h1 id="考虑两类应用场景"><a href="#考虑两类应用场景" class="headerlink" title="考虑两类应用场景"></a>考虑两类应用场景</h1><ul>
<li>用户量大，高并发</li>
</ul>
<p>如秒杀抢购、双十一某宝购物、春节抢火车票</p>
<ul>
<li>大量的HTTP持久连接</li>
</ul>
<p>使用同一个TCP连接来发送和接收多个HTTP请求/应答，而不是为每一个新的请求/应答打开新的连接的方法。</p>
<p>对于HTTP 1.0，可以在请求的包头（Header）中添加Connection: Keep-Alive。</p>
<p>对于HTTP 1.1，所有的连接默认都是持久连接。</p>
<p>对于这两种场景，通常基于多线程的服务器很难应对。</p>
<h1 id="C10K问题"><a href="#C10K问题" class="headerlink" title="C10K问题"></a>C10K问题</h1><p>对于前文提出的这种高并发问题，我们通常用C10K这一概念来描述。C10K—— Concurrently handling ten thousand connections，即并发10000个连接。对于单台服务器而言，根本无法承担，而采用多台服务器分布式又意味着高昂的成本。如何解决C10K问题？</p>
<h1 id="Tornado"><a href="#Tornado" class="headerlink" title="Tornado"></a>Tornado</h1><p>Tornado在设计之初就考虑到了性能因素，旨在解决C10K问题，这样的设计使得其成为一个拥有非常高性能的解决方案（服务器与框架的集合体）。</p>
<p>Tornado全称Tornado Web Server，是一个用Python语言写成的Web服务器兼Web应用框架，由FriendFeed公司在自己的网站FriendFeed中使用，被Facebook收购以后框架在2009年9月以开源软件形式开放给大众。</p>
<p>特点：<br>作为Web框架，是一个轻量级的Web框架，其拥有异步非阻塞IO的处理方式。<br>作为Web服务器，Tornado有较为出色的抗负载能力，官方用nginx反向代理的方式部署Tornado和其它Python web应用框架进行对比，结果最大浏览量超过第二名近40%。</p>
<p>性能： Tornado有着优异的性能。它试图解决C10k问题，即处理大于或等于一万的并发，下表是和一些其他Web框架与服务器的对比:<br><img src="/images/tornado/tornado_performance.png" alt="tornado_performance.png"><br>Tornado框架和服务器一起组成一个WSGI的全栈替代品。单独在WSGI容器中使用tornado网络框架或者tornaod http服务器，有一定的局限性，为了最大化的利用tornado的性能，推荐同时使用tornaod的网络框架和HTTP服务器</p>
<h1 id="Tornado与Django"><a href="#Tornado与Django" class="headerlink" title="Tornado与Django"></a>Tornado与Django</h1><h2 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h2><p>Django是走大而全的方向，注重的是高效开发，它最出名的是其全自动化的管理后台：只需要使用其ORM，做简单的对象定义，它就能自动生成数据库结构、以及全功能的管理后台。</p>
<p>Django提供的方便，也意味着Django内置的ORM跟框架内的其他模块耦合程度高，应用程序必须使用Django内置的ORM，否则就不能享受到框架内提供的种种基于其ORM的便利。</p>
<ul>
<li>session功能</li>
<li>后台管理</li>
<li>ORM</li>
</ul>
<h2 id="Tornado-1"><a href="#Tornado-1" class="headerlink" title="Tornado"></a>Tornado</h2><p>Tornado走的是少而精的方向，注重的是性能优越，它最出名的是异步非阻塞的设计方式。</p>
<ul>
<li>HTTP服务器</li>
<li>异步编程</li>
<li>WebSockets</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip install tornado</div></pre></td></tr></table></figure>
<p>or<br>下载安装包tornado-5.0.tar.gz（<a href="https://pypi.python.org/packages/source/t/tornado/tornado-5.0.tar.gz）" target="_blank" rel="noopener">https://pypi.python.org/packages/source/t/tornado/tornado-5.0.tar.gz）</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ tar xvzf tornado-5.0.tar.gz</div><div class="line">$ cd tornado-5.0</div><div class="line">$ python setup.py build</div><div class="line">$ sudo python setup.py install</div></pre></td></tr></table></figure></p>
<h1 id="关于使用平台的说明"><a href="#关于使用平台的说明" class="headerlink" title="关于使用平台的说明"></a>关于使用平台的说明</h1><blockquote>
<p>Tornado should run on any Unix-like platform, although for the best performance and scalability only Linux (with epoll) and BSD (with kqueue) are recommended for production deployment (even though Mac OS X is derived from BSD and supports kqueue, its networking performance is generally poor so it is recommended only for development use). Tornado will also run on Windows, although this configuration is not officially supported and is recommended only for development use.</p>
</blockquote>
<p>Tornado应该运行在类Unix平台，在线上部署时为了最佳的性能和扩展性，仅推荐Linux和BSD（因为充分利用Linux的epoll工具和BSD的kqueue工具，是Tornado不依靠多进程/多线程而达到高性能的原因）。</p>
<p>对于Mac OS X，虽然也是衍生自BSD并且支持kqueue，但是其网络性能通常不太给力，因此仅推荐用于开发。</p>
<p>对于Windows，Tornado官方没有提供配置支持，但是也可以运行起来，不过仅推荐在开发中使用。</p>
]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tornado </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法-二叉树]]></title>
      <url>/2018/03/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      <content type="html"><![CDATA[<p>二叉树是每个节点最多有两个子树的树结构。通常子树被称作“左子树”（left subtree）和“右子树”（right subtree）<br><a id="more"></a></p>
<h1 id="二叉树的性质-特性"><a href="#二叉树的性质-特性" class="headerlink" title="二叉树的性质(特性)"></a>二叉树的性质(特性)</h1><p>性质1: 在二叉树的第i层上至多有2^(i-1)个结点（i&gt;0）<br>性质2: 深度为k的二叉树至多有2^k - 1个结点（k&gt;0）<br>性质3: 对于任意一棵二叉树，如果其叶结点数为N0，而度数为2的结点总数为N2，则N0=N2+1;<br>性质4:具有n个结点的完全二叉树的深度必为 log2(n+1)<br>性质5:对完全二叉树，若从上至下、从左至右编号，则编号为i 的结点，其左孩子编号必为2i，其右孩子编号必为2i＋1；其双亲的编号必为i/2（i＝1 时为根,除外）</p>
<h2 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h2><p>若设二叉树的高度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第h层有叶子结点，并且叶子结点都是从左到右依次排布，这就是完全二叉树。<br><img src="/images/algorithm/完全二叉树.png" alt="完全二叉树.png"></p>
<h2 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h2><p>除了叶结点外每一个结点都有左右子叶且叶子结点都处在最底层的二叉树。<br><img src="/images/algorithm/满二叉树.png" alt="满二叉树.png"></p>
<h1 id="二叉树的节点表示以及树的创建"><a href="#二叉树的节点表示以及树的创建" class="headerlink" title="二叉树的节点表示以及树的创建"></a>二叉树的节点表示以及树的创建</h1><p>通过使用Node类中定义三个属性，分别为elem本身的值，还有lchild左孩子和rchild右孩子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""节点类"""</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, elem=<span class="number">-1</span>, lchild=None, rchild=None)</span>:</span></div><div class="line">        self.elem = elem</div><div class="line">        self.lchild = lchild</div><div class="line">        self.rchild = rchild</div></pre></td></tr></table></figure></p>
<p>树的创建,创建一个树的类，并给一个root根节点，一开始为空，随后添加节点<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tree</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""树类"""</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, root=None)</span>:</span></div><div class="line">        self.root = root</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, elem)</span>:</span></div><div class="line">        <span class="string">"""为树添加节点"""</span></div><div class="line">        node = Node(elem)</div><div class="line">        <span class="comment">#如果树是空的，则对根节点赋值</span></div><div class="line">        <span class="keyword">if</span> self.root == <span class="keyword">None</span>:</div><div class="line">            self.root = node</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            queue = []</div><div class="line">            queue.append(self.root)</div><div class="line">            <span class="comment">#对已有的节点进行层次遍历</span></div><div class="line">            <span class="keyword">while</span> queue:</div><div class="line">                <span class="comment">#弹出队列的第一个元素</span></div><div class="line">                cur = queue.pop(<span class="number">0</span>)</div><div class="line">                <span class="keyword">if</span> cur.lchild == <span class="keyword">None</span>:</div><div class="line">                    cur.lchild = node</div><div class="line">                    <span class="keyword">return</span></div><div class="line">                <span class="keyword">elif</span> cur.rchild == <span class="keyword">None</span>:</div><div class="line">                    cur.rchild = node</div><div class="line">                    <span class="keyword">return</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    <span class="comment">#如果左右子树都不为空，加入队列继续判断</span></div><div class="line">                    queue.append(cur.lchild)</div><div class="line">                    queue.append(cur.rchild)</div></pre></td></tr></table></figure></p>
<h1 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h1><p>树的遍历是树的一种重要的运算。所谓遍历是指对树中所有结点的信息的访问，即依次对树中每个结点访问一次且仅访问一次，我们把这种对所有节点的访问称为遍历（traversal）。那么树的两种重要的遍历模式是深度优先遍历和广度优先遍历,深度优先一般用递归，广度优先一般用队列。一般情况下能用递归实现的算法大部分也能用堆栈来实现。</p>
<h2 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h2><p>对于一颗二叉树，深度优先搜索(Depth First Search)是沿着树的深度遍历树的节点，尽可能深的搜索树的分支。<br>那么深度遍历有重要的三种方法。这三种方式常被用于访问树的节点，它们之间的不同在于访问每个节点的次序不同。这三种遍历分别叫做先序遍历（preorder），中序遍历（inorder）和后序遍历（postorder）。我们来给出它们的详细定义，然后举例看看它们的应用。</p>
<ul>
<li><p>先序遍历 在先序遍历中，我们先访问根节点，然后递归使用先序遍历访问左子树，再递归使用先序遍历访问右子树<br>  根节点-&gt;左子树-&gt;右子树</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">preorder</span><span class="params">(self, root)</span>:</span></div><div class="line">      <span class="string">"""递归实现先序遍历"""</span></div><div class="line">      <span class="keyword">if</span> root == <span class="keyword">None</span>:</div><div class="line">          <span class="keyword">return</span></div><div class="line">      <span class="keyword">print</span> root.elem</div><div class="line">      self.preorder(root.lchild)</div><div class="line">      self.preorder(root.rchild)</div></pre></td></tr></table></figure>
</li>
<li><p>中序遍历 在中序遍历中，我们递归使用中序遍历访问左子树，然后访问根节点，最后再递归使用中序遍历访问右子树<br>  左子树-&gt;根节点-&gt;右子树</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">inorder</span><span class="params">(self, root)</span>:</span></div><div class="line">      <span class="string">"""递归实现中序遍历"""</span></div><div class="line">      <span class="keyword">if</span> root == <span class="keyword">None</span>:</div><div class="line">          <span class="keyword">return</span></div><div class="line">      self.inorder(root.lchild)</div><div class="line">      <span class="keyword">print</span> root.elem</div><div class="line">      self.inorder(root.rchild)</div></pre></td></tr></table></figure>
</li>
<li><p>后序遍历 在后序遍历中，我们先递归使用后序遍历访问左子树和右子树，最后访问根节点<br>  左子树-&gt;右子树-&gt;根节点</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">postorder</span><span class="params">(self, root)</span>:</span></div><div class="line">      <span class="string">"""递归实现后续遍历"""</span></div><div class="line">      <span class="keyword">if</span> root == <span class="keyword">None</span>:</div><div class="line">          <span class="keyword">return</span></div><div class="line">      self.postorder(root.lchild)</div><div class="line">      self.postorder(root.rchild)</div><div class="line">      <span class="keyword">print</span> root.elem</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="/images/algorithm/三种遍历结果.jpg" alt="三种遍历结果.jpg"></p>
<h2 id="广度优先遍历-层次遍历"><a href="#广度优先遍历-层次遍历" class="headerlink" title="广度优先遍历(层次遍历)"></a>广度优先遍历(层次遍历)</h2><p>从树的root开始，从上到下从从左到右遍历整个树的节点<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">breadth_travel</span><span class="params">(self, root)</span>:</span></div><div class="line">        <span class="string">"""利用队列实现树的层次遍历"""</span></div><div class="line">        <span class="keyword">if</span> root == <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span></div><div class="line">        queue = []</div><div class="line">        queue.append(root)</div><div class="line">        <span class="keyword">while</span> queue:</div><div class="line">            node = queue.pop(<span class="number">0</span>)</div><div class="line">            <span class="keyword">print</span> node.elem,</div><div class="line">            <span class="keyword">if</span> node.lchild != <span class="keyword">None</span>:</div><div class="line">                queue.append(node.lchild)</div><div class="line">            <span class="keyword">if</span> node.rchild != <span class="keyword">None</span>:</div><div class="line">                queue.append(node.rchild)</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法-树与树算法]]></title>
      <url>/2018/03/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E6%A0%91%E4%B8%8E%E6%A0%91%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>树（英语：tree）是一种抽象数据类型（ADT）或是实作这种抽象数据类型的数据结构，用来模拟具有树状结构性质的数据集合。它是由n（n&gt;=1）个有限节点组成一个具有层次关系的集合。把它叫做“树”是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：<br><a id="more"></a></p>
<ul>
<li>每个节点有零个或多个子节点；</li>
<li>没有父节点的节点称为根节点；</li>
<li>每一个非根节点有且只有一个父节点；</li>
<li>除了根节点外，每个子节点可以分为多个不相交的子树；<br>比如说：<br><img src="/images/algorithm/tree.png" alt="tree.png"><br><img src="/images/algorithm/Treedatastructure.png" alt="Treedatastructure.png"></li>
</ul>
<h1 id="树的术语"><a href="#树的术语" class="headerlink" title="树的术语"></a>树的术语</h1><ul>
<li>节点的度：一个节点含有的子树的个数称为该节点的度；</li>
<li>树的度：一棵树中，最大的节点的度称为树的度；</li>
<li>叶节点或终端节点：度为零的节点；</li>
<li>父亲节点或父节点：若一个节点含有子节点，则这个节点称为其子节点的父节点；</li>
<li>孩子节点或子节点：一个节点含有的子树的根节点称为该节点的子节点；</li>
<li>兄弟节点：具有相同父节点的节点互称为兄弟节点；</li>
<li>节点的层次：从根开始定义起，根为第1层，根的子节点为第2层，以此类推；</li>
<li>树的高度或深度：树中节点的最大层次；</li>
<li>堂兄弟节点：父节点在同一层的节点互为堂兄弟；</li>
<li>节点的祖先：从根到该节点所经分支上的所有节点；</li>
<li>子孙：以某节点为根的子树中任一节点都称为该节点的子孙。</li>
<li>森林：由m（m&gt;=0）棵互不相交的树的集合称为森林；</li>
</ul>
<h1 id="树的种类"><a href="#树的种类" class="headerlink" title="树的种类"></a>树的种类</h1><ul>
<li>无序树：树中任意节点的子节点之间没有顺序关系，这种树称为无序树，也称为自由树；</li>
<li>有序树：树中任意节点的子节点之间有顺序关系，这种树称为有序树；<ul>
<li>二叉树：每个节点最多含有两个子树的树称为二叉树；</li>
<li>完全二叉树：对于一颗二叉树，假设其深度为d(d&gt;1)。除了第d层外，其它各层的节点数目均已达最大值，且第d层所有节点从左向右连续地紧密排列，这样的二叉树被称为完全二叉树，其中满二叉树的定义是所有叶节点都在最底层的完全二叉树;</li>
<li>平衡二叉树（AVL树）：当且仅当任何节点的两棵子树的高度差不大于1的二叉树；</li>
<li>排序二叉树（二叉查找树（英语：Binary Search Tree），也称二叉搜索树、有序二叉树）；</li>
<li>霍夫曼树（用于信息编码）：带权路径最短的二叉树称为哈夫曼树或最优二叉树；</li>
<li>B树：一种对读写操作进行优化的自平衡的二叉查找树，能够保持数据有序，拥有多余两个子树。</li>
</ul>
</li>
</ul>
<h1 id="树的存储与表示"><a href="#树的存储与表示" class="headerlink" title="树的存储与表示"></a>树的存储与表示</h1><p>顺序存储：将数据结构存储在固定的数组中，然在遍历速度上有一定的优势，但因所占空间比较大，是非主流二叉树。二叉树通常以链式存储。<br><img src="/images/algorithm/树的顺序存储.png" alt="树的顺序存储.png"><br>链式存储：<br><img src="/images/algorithm/树的链式存储.png" alt="树的链式存储.png"><br>由于对节点的个数无法掌握，常见树的存储表示都转换成二叉树进行处理，子节点个数最多为2</p>
<h1 id="常见的一些树的应用场景"><a href="#常见的一些树的应用场景" class="headerlink" title="常见的一些树的应用场景"></a>常见的一些树的应用场景</h1><ol>
<li>xml，html等，那么编写这些东西的解析器的时候，不可避免用到树</li>
<li>路由协议就是使用了树的算法</li>
<li>mysql数据库索引</li>
<li>文件系统的目录结构</li>
<li>所以很多经典的AI算法其实都是树搜索，此外机器学习中的decision tree也是树结构<br><img src="/images/algorithm/网页结构.jpg" alt="网页结构.jpg"></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nginx-反向代理和负载均衡]]></title>
      <url>/2018/03/03/nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8C%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      <content type="html"><![CDATA[<p>正向代理，也就是传说中的代理,他的工作原理就像一个跳板，简单的说，我是一个用户，我访问不了某网站，但是我能访问一个代理服务器，这个代理服务器呢，他能访问那个我不能访问的网站，于是我先连上代理服务器，告诉他我需要那个无法访问网站的内容，代理服务器去取回来，然后返回给我。 从网站的角度，只在代理服务器来取内容的时候有一次记录，有时候并不知道是用户的请求，也隐藏了用户的资料，这取决于代理告不告诉网站。结论就是，正向代理 是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。</p>
<p>反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。<br><a id="more"></a><br>从用途上来讲：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">正向代理的典型用途是为在防火墙内的局域网客户端提供访问Internet的途径。</div><div class="line">正向代理还可以使用缓冲特性减少网络使用率。反向代理的典型用途是将防火墙后面的服务器提供给Internet用户访问。</div><div class="line">反向代理还可以为后端的多台服务器提供负载平衡，或为后端较慢的服务器提供缓冲服务。</div><div class="line">另外，反向代理还可以启用高级URL策略和管理技术，从而使处于不同web服务器系统的web页面同时存在于同一个URL空间下。</div></pre></td></tr></table></figure></p>
<h1 id="反向代理服务器的基本配置"><a href="#反向代理服务器的基本配置" class="headerlink" title="反向代理服务器的基本配置"></a>反向代理服务器的基本配置</h1><h2 id="proxy-pass"><a href="#proxy-pass" class="headerlink" title="proxy_pass"></a>proxy_pass</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">proxy_pass URL;</div><div class="line">  配置块 location if</div><div class="line">  此配置将当前请求代理到URL参数指定的服务器上,URL可以是主机名或者IP地址加PORT的形式</div><div class="line">  proxy_pass http://localhost:8000;</div><div class="line">  也可以结合负载均衡实用&lt;负载均衡会说明这种情况&gt;</div><div class="line">  也可以吧HTTP转换成HTTPS</div><div class="line">  proxy_pass http://192.168.0.1;</div><div class="line">  默认情况反向代理不转发请求中的Host头部,如果需呀设置抓发头部</div><div class="line">      则 proxy_set_header Host $host;</div></pre></td></tr></table></figure>
<h2 id="proxy-hide-header"><a href="#proxy-hide-header" class="headerlink" title="proxy_hide_header"></a>proxy_hide_header</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">proxy_hide_header header1;</div><div class="line">配置块 http server location;</div><div class="line">Nginx会将上游服务器的响应转发给客户端,但默认不转发HTTP头部字段(Date Server X-Pad X-Accel-* )</div><div class="line">使用proxy_hide_header可以指定任意头部不能被转发</div><div class="line">proxy_hide_header Cache-Control;</div><div class="line">proxy_hide_header MicrosoftOfficeWebServer;</div></pre></td></tr></table></figure>
<h2 id="proxy-pass-header"><a href="#proxy-pass-header" class="headerlink" title="proxy_pass_header"></a>proxy_pass_header</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">proxy_pass_header header1;</div><div class="line">配置块 http server location</div><div class="line">功能与 proxy_hide_header相反,是设置哪些头部允许转发.</div><div class="line">proxy_pass_header X-Accel-Redirect;</div></pre></td></tr></table></figure>
<h2 id="proxy-pass-request-body"><a href="#proxy-pass-request-body" class="headerlink" title="proxy_pass_request_body"></a>proxy_pass_request_body</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">proxy_pass_request_body off|on;</div><div class="line">默认 on</div><div class="line">配置块 http server location;</div><div class="line">确定上游服务器是否向上游服务器转发HTTP包体</div></pre></td></tr></table></figure>
<h2 id="proxy-pass-request-header"><a href="#proxy-pass-request-header" class="headerlink" title="proxy_pass_request_header"></a>proxy_pass_request_header</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">proxy_pass_request_header on | off;</div><div class="line">默认on</div><div class="line">配置块 http server location</div><div class="line">确定是否转发HTTP头部</div></pre></td></tr></table></figure>
<h2 id="proxy-redirect"><a href="#proxy-redirect" class="headerlink" title="proxy_redirect"></a>proxy_redirect</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">proxy_redirect [default | off |redirect |replacement]</div><div class="line">    默认default</div><div class="line">    配置块 http server location</div><div class="line">    当上游服务响应时重定向或刷新(HTTP 301 302),proxy_redirect可以重设HTTP头部的location或refresh字段</div><div class="line"></div><div class="line">    proxy_redirect http://locahost:8000/two/ http://frontend/one/;</div><div class="line">    上游响应302,location是URI是http://locahost:8000/two/some/uri/</div><div class="line">    那是实际转发给客户端的是 http://frontend/one/some/uri/;</div><div class="line">    可以使用前面提到的ngx_http_core_module模块提供的变量 </div><div class="line">    proxy_redirect http://locahost:8000/two/ http://$host:server_port/;</div><div class="line">    可以省略replacement参数的主机名部分,这时候用虚拟主机名填充</div><div class="line">    proxy_redirect http://locahost:8000/two/ /one/;</div><div class="line"></div><div class="line">    使用off参数的时候,将使location和refresh的字段维持不变</div><div class="line">    proxy_redirect off;</div><div class="line"></div><div class="line">    如果使用的 proxy_redirect default;</div><div class="line">    下面两种配置是等效的</div><div class="line">        location /&#123;</div><div class="line">            proxy_pass http://upstream:port/two/;</div><div class="line">            proxy_redirect default;</div><div class="line">        &#125;</div><div class="line">        location /&#123;</div><div class="line">            proxy_pass http://upstream:port/two/;</div><div class="line">            proxy_redirect http://upstream:port/two/ /one/;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><p>负载均衡是由多台服务器以对称的方式组成一个服务器集合，每台服务器都具有等价的地位，都可以单独对外提供服务而无须其他服务器的辅助。通过某种负载分担技术，将外部发送来的请求按照事先设定分配算法分配到对称结构中的某一台服务器上，而接收到请求的服务器独立地回应客户的请求。</p>
<p>均衡负载能够平均分配客户请求到服务器列阵，籍此提供快速获取重要数据，解决大量并发访问服务问题。</p>
<h2 id="upstream块"><a href="#upstream块" class="headerlink" title="upstream块"></a>upstream块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">upstream name &#123;...&#125;</div><div class="line">配置块 http</div><div class="line">upstream块定义一个上游服务器的集群,便于反向代理中的proxy_pass使用</div><div class="line"></div><div class="line">upstream mynet&#123;</div><div class="line">    server www.wopai1.com;</div><div class="line">    server www.wopai2.com;</div><div class="line">    server www.wopai3.com;</div><div class="line">&#125;</div><div class="line">server &#123;</div><div class="line">    location /&#123;</div><div class="line">        proxy_pass http://mynet;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">server name [paramenters]</div><div class="line">配置块upstream</div><div class="line">server配置项指定了一台上游服务器的名字,可以是域名 IP地址端口 UNIX句柄</div><div class="line">weight= number;设置向这台服务器转发的权重,默认为1</div><div class="line">max_fails=number;该选项域fail_timeout配合使用</div><div class="line">        指在fail_timeout时间段内如果转发上游失败超过number次就认为当前的fail_timeout时间内</div><div class="line">        这台服务器不可用,max_fails默认为1 如果设置为0 表示不检查失败次数</div><div class="line">fail_timeout=time; fail_timeout表示该时间内转发多少次失败后就认为上游不可用.默认10s</div><div class="line">down    表示上游服务器永久下线,只能在ip_hash配置时才有效</div><div class="line">backup  在ip_hash配置时无效.只有所有非备份机都失败,才向上游备份服务器转发请求.</div><div class="line">upstream mynet&#123;</div><div class="line">    server www.wopai1.com weight=5;</div><div class="line">    server www.wopai2.com:8081 max_fails=3 fail_timeout=300s;</div><div class="line">    server www.wopai2.com down;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ip-hash"><a href="#ip-hash" class="headerlink" title="ip_hash"></a>ip_hash</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">配置块 upstream</div><div class="line">希望来自某一个用户的请求始终落在固定的一台服务器上进行处理.</div><div class="line">根据客户端的IP散列计算出一个key,将key按照upstream集群中的上游服务器进行取模,求得的值对应的主机接收转发请求.</div><div class="line">ip_hash不可以与weight同时使用</div><div class="line">如果upstream配置中有一台服务器暂时不可用,不能直接删除该配置,而应该使用down标识.</div><div class="line">upstream mynet&#123;</div><div class="line">    ip_hash;</div><div class="line">    server www.wowpai1.top;</div><div class="line">    server www.wowpai2.top;  </div><div class="line">    server www.wowpai3.top down;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>例子,服务器负载均衡基本配置,nginx中可以进行负载均衡的相关设置:    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">upstream my.net&#123;    #my.net是自定义的命名 在server结构中引用即可</div><div class="line"></div><div class="line">        #代理服务器为 两台机器192.168.22.136 192.168.22.147做负载均衡操作 </div><div class="line">        #两台机器上 可以跑apache负载功能更为强大的网页相关任务</div><div class="line"></div><div class="line">        #max_fails 表示尝试出错最大次数 即可认为该服务器 在fail_timeout时间内不可用</div><div class="line">        # server servername:port   servername可以写主机名 或者点分式IP</div><div class="line">        server 192.168.22.136:80 max_fails=1 fail_timeout=300s;</div><div class="line">        server 192.168.22.147:80 max_fails=1 fail_timeout=300s;  </div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        server &#123;</div><div class="line">        listen       80;</div><div class="line">        server_name  localhost; </div><div class="line">        location / &#123;</div><div class="line">            #upstream 块名</div><div class="line">            proxy_pass http://my.net;</div><div class="line">            root   html;</div><div class="line">            index  index.html index.htm;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 备份 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 备份 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nginx]]></title>
      <url>/2018/02/09/nginx/</url>
      <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>1.下载必要组件<br><a id="more"></a></p>
<ul>
<li><p>nginx下载地址</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://nginx.org/en/download.html</div></pre></td></tr></table></figure>
</li>
<li><p>pcre库下载地址，nginx需要</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://sourceforge.net/projects/pcre/files/pcre/</div></pre></td></tr></table></figure>
</li>
<li><p>zlib下载地址，nginx需要</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://www.zlib.net/</div></pre></td></tr></table></figure>
</li>
<li><p>openssl下载地址，nginx需要</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/openssl/openssl</div></pre></td></tr></table></figure>
</li>
</ul>
<p>2.在同级目录下,解压安装zlib、openssl、pcre</p>
<p>3.进入nginx目录，进行配置安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">./configure \</div><div class="line"> --prefix=/usr/local/nginx \</div><div class="line"> --with-http_ssl_module \</div><div class="line"> --with-http_flv_module \</div><div class="line"> --with-http_stub_status_module \</div><div class="line"> --with-http_gzip_static_module \</div><div class="line"> --with-pcre=../pcre-8.39 \</div><div class="line"> --with-zlib=../zlib-1.2.8 \ </div><div class="line"> --with-openssl=../openssl-master</div></pre></td></tr></table></figure></p>
<p> 下面可直接复制粘贴<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./configure --prefix=/usr/local/nginx --with-http_ssl_module --with-http_flv_module --with-http_stub_status_module --with-http_gzip_static_module --with-pcre=../pcre-8.39 --with-zlib=../zlib-1.2.8 --with-openssl=../openssl-master</div></pre></td></tr></table></figure></p>
<p>4.编译安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ make &amp;&amp; sudo make install</div></pre></td></tr></table></figure></p>
<p>Nginx会被安装在/usr/local/nginx目录下（也可以使用参数–prefix=指定自己需要的位置）， 安装成功后 /usr/local/nginx 目录下有四个子目录分别是：conf、html、logs、sbin 。 其中 Nginx 的配置文件存放于 conf/nginx.conf， bin文件是位于 sbin 目录下的 nginx 文件。 确保系统的 80 端口没被其他程序占用，运行 sbin/nginx 命令来启动 Nginx，</p>
<p>5.启动nginx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$sudo /usr/local/nginx/sbin/nginx</div><div class="line">    #netstat -ano|grep 80</div><div class="line">        tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      关闭 (0.00/0/0)</div><div class="line">        unix  17     [ ]         数据报                10801    /dev/log</div></pre></td></tr></table></figure></p>
<p>6.打开浏览器访问此机器的 IP，如果浏览器出现 Welcome to nginx! 则表示 Nginx 已经安装并运行成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># 检查配置文件是否正确</div><div class="line"># /usr/local/sbin/nginx -t </div><div class="line"># 可以看到编译选项</div><div class="line"># /usr/local/sbin/nginx -V</div><div class="line">#重启Nginx</div><div class="line">#sudo /usr/local/sbin/nginx -s reload</div><div class="line">#关闭Nginx</div><div class="line">#sudo /usr/local/sbin/nginx -s stop</div><div class="line">#优雅停止服务</div><div class="line">#sudo /usr/local/sbin/nginx -s quit</div><div class="line">#kill -s SIGQUIT pid_master</div><div class="line">#kill -s SIGWINCH pid_master</div></pre></td></tr></table></figure></p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>nginx.conf配置文件,基本就分为以下几块：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">main</div><div class="line">events   &#123;</div><div class="line">  ....</div><div class="line">&#125;</div><div class="line">http        &#123;</div><div class="line">  ....</div><div class="line">  upstream myproject &#123;</div><div class="line">    .....</div><div class="line">  &#125;</div><div class="line">  server  &#123;</div><div class="line">    ....</div><div class="line">    location &#123;</div><div class="line">        ....</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  server  &#123;</div><div class="line">    ....</div><div class="line">    location &#123;</div><div class="line">        ....</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  ....</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>nginx配置文件主要分为六个区域：</p>
<ul>
<li>main(全局设置)</li>
<li>events(nginx工作模式)</li>
<li>http(http设置)</li>
<li>sever(主机设置)</li>
<li>location(URL匹配)</li>
<li>upstream(负载均衡服务器设置)</li>
</ul>
<h2 id="main模块"><a href="#main模块" class="headerlink" title="main模块"></a>main模块</h2><p>下面时一个main区域，他是一个全局的设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">user nobody nobody;</div><div class="line">worker_processes 2;</div><div class="line">error_log  /usr/local/var/log/nginx/error.log  notice;</div><div class="line">pid        /usr/local/var/run/nginx/nginx.pid;</div><div class="line">worker_rlimit_nofile 1024;</div></pre></td></tr></table></figure></p>
<p>user 来指定Nginx Worker进程运行用户以及用户组，默认由nobody账号运行。</p>
<p>worker_processes来指定了Nginx要开启的子进程数。每个Nginx进程平均耗费10M~12M内存。根据经验，一般指定1个进程就足够了，如果是多核CPU，建议指定和CPU的数量一样的进程数即可。我这里写2，那么就会开启2个子进程，总共3个进程。</p>
<p>error_log用来定义全局错误日志文件。日志输出级别有debug、info、notice、warn、error、crit可供选择，其中，debug输出日志最为最详细，而crit输出日志最少。</p>
<p>pid用来指定进程id的存储文件位置。</p>
<p>worker_rlimit_nofile用于指定一个nginx进程可以打开的最多文件描述符数目，这里是65535，需要使用命令“ulimit -n 65535”来设置。</p>
<h2 id="events-模块"><a href="#events-模块" class="headerlink" title="events 模块"></a>events 模块</h2><p>events模块来用指定nginx的工作模式和工作模式及连接数上限，一般是这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">events &#123;</div><div class="line">    use epoll; #Linux平台</div><div class="line">    worker_connections  1024;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>use用来指定Nginx的工作模式。Nginx支持的工作模式有select、poll、kqueue、epoll、rtsig和/dev/poll。其中select和poll都是标准的工作模式，kqueue和epoll是高效的工作模式，不同的是epoll用在Linux平台上，而kqueue用在BSD系统中,对于Linux系统，epoll工作模式是首选。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">worker_connections用于定义Nginx每个进程的最大连接数，即接收前端的最大请求数，默认是1024。最大客户端连接数由worker_processes和worker_connections决定，即Max_clients=worker_processes*worker_connections，在作为反向代理时，Max_clients变为：Max_clients = worker_processes * worker_connections/4。 进程的最大连接数受Linux系统进程的最大打开文件数限制，在执行操作系统命令“ulimit -n 65536”后worker_connections的设置才能生效。</div></pre></td></tr></table></figure></p>
<h2 id="http-模块"><a href="#http-模块" class="headerlink" title="http 模块"></a>http 模块</h2><p>http模块可以说是最核心的模块了，它负责HTTP服务器相关属性的配置，它里面的server和upstream子模块，至关重要<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">http&#123;</div><div class="line">    include       mime.types;</div><div class="line">    default_type  application/octet-stream;</div><div class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</div><div class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</div><div class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</div><div class="line">    access_log  /usr/local/var/log/nginx/access.log  main;</div><div class="line">    sendfile        on;</div><div class="line">    tcp_nopush      on;</div><div class="line">    tcp_nodelay     on;</div><div class="line">    keepalive_timeout  10;</div><div class="line">    #gzip  on;</div><div class="line">    upstream myproject &#123;</div><div class="line">        .....</div><div class="line">    &#125;</div><div class="line">    server &#123;</div><div class="line">        ....</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面详细介绍下这段代码中每个配置选项的含义。</p>
<p>include 来用设定文件的mime类型,类型在配置文件目录下的mime.type文件定义，来告诉nginx来识别文件类型。</p>
<p>default_type设定了默认的类型为二进制流，也就是当文件类型未定义时使用这种方式，例如在没有配置asp 的locate 环境时，Nginx是不予解析的，此时，用浏览器访问asp文件就会出现下载了。</p>
<p>log_format用于设置日志的格式，和记录哪些参数，这里设置为main，刚好用于access_log来纪录这种类型。</p>
<p>access_log</p>
<p>用来纪录每次的访问日志的文件地址，后面的main是日志的格式样式，对应于log_format的main。</p>
<p>sendfile参数用于开启高效文件传输模式。将tcp_nopush和tcp_nodelay两个指令设置为on用于防止网络阻塞。</p>
<p>keepalive_timeout设置客户端连接保持活动的超时时间。在超过这个时间之后，服务器会关闭该连接。</p>
<h2 id="server-模块"><a href="#server-模块" class="headerlink" title="server 模块"></a>server 模块</h2><p>sever 模块是http的子模块，它用来定一个虚拟主机<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">        listen       8080;</div><div class="line">        server_name  localhost 192.168.12.10 www.yangyi.com;</div><div class="line">        # 全局定义，如果都是这一个目录，这样定义最简单。</div><div class="line">        root   /Users/yangyi/www;</div><div class="line">        index  index.php index.html index.htm; </div><div class="line">        charset utf-8;</div><div class="line">        access_log  usr/local/var/log/host.access.log  main;</div><div class="line">        aerror_log  usr/local/var/log/host.error.log  error;</div><div class="line">        ....</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>server标志定义虚拟主机开始。</p>
<p>listen用于指定虚拟主机的服务端口。</p>
<p>server_name用来指定IP地址或者域名，多个域名之间用空格分开。</p>
<p>root 表示在这整个server虚拟主机内，全部的root web根目录。注意要和locate {}下面定义的区分开来。</p>
<p>index 全局定义访问的默认首页地址。注意要和locate {}下面定义的区分开来。</p>
<p>charset用于设置网页的默认编码格式。</p>
<p>access_log用来指定此虚拟主机的访问日志存放路径，最后的main用于指定访问日志的输出格式。</p>
<h2 id="location-模块"><a href="#location-模块" class="headerlink" title="location 模块"></a>location 模块</h2><p>location模块是nginx中用的最多的，也是最重要的模块了，什么负载均衡啊、反向代理啊、虚拟域名啊都与它相关。慢慢来讲：</p>
<p>location 根据它字面意思就知道是来定位的，定位URL，解析URL，所以，它也提供了强大的正则匹配功能，也支持条件判断匹配，用户可以通过location指令实现Nginx对动、静态网页进行过滤处理。像我们的php环境搭建就是用到了它。</p>
<p>我们先来看这个，设定默认首页和虚拟机目录。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">location / &#123;</div><div class="line">            root   /Users/yangyi/www;</div><div class="line">            index  index.php index.html index.htm;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>location /表示匹配访问根目录。</p>
<p>root指令用于指定访问根目录时，虚拟主机的web目录，这个目录可以是相对路径（相对路径是相对于nginx的安装目录）。也可以是绝对路径。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">#反向代理配置</div><div class="line"> location /itcast/ &#123;</div><div class="line">            proxy_pass http://127.0.0.1:12345;</div><div class="line">            proxy_set_header X-real-ip $remote_addr;</div><div class="line">            proxy_set_header Host $http_host;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line"> #采用uwsgi方式</div><div class="line"> location /python/ &#123;</div><div class="line">            include uwsgi_params;</div><div class="line">            uwsgi_pass 127.0.0.1:33333;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">   #访问nginx本机目录的文件</div><div class="line">   location / &#123;</div><div class="line">           root   /home/itcast/xwp/itcast/;</div><div class="line">           index  index.html index.htm;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">   location  /static/ &#123;</div><div class="line">            alias /var/static/;</div><div class="line">       &#125;</div></pre></td></tr></table></figure></p>
<h2 id="upstram-模块"><a href="#upstram-模块" class="headerlink" title="upstram 模块"></a>upstram 模块</h2><p>upstream 模块负债负载均衡模块，通过一个简单的调度算法来实现客户端IP到后端服务器的负载均衡<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">upstream test.com&#123;</div><div class="line">    ip_hash;</div><div class="line">    server 192.168.123.1:80;</div><div class="line">    server 192.168.123.2:80 down;</div><div class="line">    server 192.168.123.3:8080  max_fails=3  fail_timeout=20s;</div><div class="line">    server 192.168.123.4:8080;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>里面是ip_hash这是其中的一种负载均衡调度算法。</p>
<p>Nginx的负载均衡模块目前支持4种调度算法:</p>
<ul>
<li>weight 轮询（默认）。每个请求按时间顺序逐一分配到不同的后端服务器，如果后端某台服务器宕机，故障系统被自动剔除，使用户访问不受影响。weight。指定轮询权值，weight值越大，分配到的访问机率越高，主要用于后端每个服务器性能不均的情况下。</li>
<li>ip_hash。每个请求按访问IP的hash结果分配，这样来自同一个IP的访客固定访问一个后端服务器，有效解决了动态网页存在的session共享问题。</li>
<li>fair。比上面两个更加智能的负载均衡算法。此种算法可以依据页面大小和加载时间长短智能地进行负载均衡，也就是根据后端服务器的响应时间来分配请求，响应时间短的优先分配。Nginx本身是不支持fair的，如果需要使用这种调度算法，必须下载Nginx的upstream_fair模块。</li>
<li>url_hash。按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，可以进一步提高后端缓存服务器的效率。Nginx本身是不支持url_hash的，如果需要使用这种调度算法，必须安装Nginx 的hash软件包。</li>
</ul>
<p>在HTTP Upstream模块中，可以通过server指令指定后端服务器的IP地址和端口，同时还可以设定每个后端服务器在负载均衡调度中的状态。常用的状态有：</p>
<ul>
<li><p>down，表示当前的server暂时不参与负载均衡。</p>
</li>
<li><p>backup，预留的备份机器。当其他所有的非backup机器出现故障或者忙的时候，才会请求backup机器，因此这台机器的压力最轻。</p>
</li>
<li><p>max_fails，允许请求失败的次数，默认为1。当超过最大次数时，返回proxy_next_upstream 模块定义的错误。</p>
</li>
<li><p>fail_timeout，在经历了max_fails次失败后，暂停服务的时间。max_fails可以和fail_timeout一起使用。</p>
</li>
</ul>
<p>注意 当负载调度算法为ip_hash时，后端服务器在负载均衡调度中的状态不能是weight和backup。</p>
<p>备注： nginx的worker_rlimit_nofile达到上限时，再有客户端链接报502错误. 用了log_format指令设置了日志格式之后，需要用access_log指令指定日志文件的存放路径.</p>
]]></content>
      
        <categories>
            
            <category> 备份 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 备份 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Soket基本概念]]></title>
      <url>/2018/02/05/socket/</url>
      <content type="html"><![CDATA[<p>在计算机科学中，网络套接字（英语：Network socket），又译网络套接字、网络接口、网络插槽，是电脑网络中进程间数据流的端点。使用以网际协议（Internet Protocol）为通信基础的网络套接字，称为网际套接字（Internet socket）。因为网际协议的流行，现代绝大多数的网络套接字，都是属于网际套接字。</p>
<p>socket是一种操作系统提供的进程间通信机制。<br><a id="more"></a></p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>在操作系统中，通常会为应用程序提供一组应用程序接口（API），称为套接字接口（英语：socket API）。应用程序可以通过套接字接口，来使用网络套接字，以进行数据交换。最早的套接字接口来自于4.2 BSD，因此现代常见的套接字接口大多源自Berkeley套接字（Berkeley sockets）标准。</p>
<p><strong>在套接字接口中，以IP地址及通信端口组成套接字地址（socket address）。远程的套接字地址，以及本地的套接字地址完成连接后，再加上使用的协议（protocol），这个五元组（five-element tuple)，作为套接字对（socket pairs），之后就可以彼此交换数据。</strong></p>
<p>例如，再同一台计算机上，TCP协议与UDP协议可以同时使用相同的port而互不干扰。 操作系统根据套接字地址，可以决定应该将数据送达特定的进程或线程。这就像是电话系统中，以电话号码加上分机号码，来决定通话对象一般。</p>
<h2 id="Python-实现"><a href="#Python-实现" class="headerlink" title="Python 实现"></a>Python 实现</h2><p>每一种语言都会对socket进行封装，从而控制进程间的通讯。web服务器就是对socket实现的封装。</p>
<h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>当你点击链接到此页面的时候，你的浏览器做了如下动作<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding:utf-8</span></div><div class="line"><span class="comment"># socket.AF_INET    用于服务器与服务器之间的网络通信</span></div><div class="line"><span class="comment"># socket.SOCK_STREAM    基于TCP的流式socket通信</span></div><div class="line"><span class="keyword">import</span> socket</div><div class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line">s.connect((<span class="string">"www.python.org"</span>, <span class="number">80</span>))</div><div class="line">s.send(<span class="string">b'1234'</span>) <span class="comment"># 返回字符串的长度4</span></div></pre></td></tr></table></figure></p>
<p>先建立一个服务器与服务器间通讯的<strong>socket</strong>（其协议为TCP，三次握手）,然后使用<strong>socket</strong>建立到本网站的链接。链接建立之后，我们创建的名为<strong>s</strong>的<strong>socket</strong>就可以发送一个包含信息的请求,之后,客户端会建立一个相同的socket接受返回的信息，然后销毁。客户端的socket一般只用于一次交换。</p>
<h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding:utf-8</span></div><div class="line"><span class="keyword">import</span> socket</div><div class="line">serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line"><span class="comment"># 绑定端口</span></div><div class="line">serversocket.bind((socket.gethostname(), <span class="number">80</span>))</div><div class="line"><span class="comment"># 监听端口，变成一个服务器</span></div><div class="line">serversocket.listen(<span class="number">5</span>)</div></pre></td></tr></table></figure>
<p>使用<strong>socket.gethostname()</strong>作为url可以接受所有请求，而如果使用<strong>localhost 或者127.0.0.1</strong>我们就只能使用当前的<br>机器访问。</p>
<p><strong>listen</strong>方法的参数可以制定此socket的最大连接数，超过最大链接则拒绝外部请求</p>
<p>有了一个服务端的socket之后我们就可以把他放到循环中处理请求<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    (clientsocket,address) = serversocket.accept()</div><div class="line">    <span class="comment"># clientsocket为和client建立的链接</span></div><div class="line">    <span class="comment"># 假设我们通过一个线程处理链接</span></div><div class="line">    ct = client_thread(clientsocket)</div><div class="line">    ct.run()</div></pre></td></tr></table></figure></p>
<p>服务器端的socket只做了这些，它不会发送任何数据，也不会接受任何数据，他只是产生了一个客户端的socket<br>每一个被创建的客户端socket都会通过connect()方法与其他的socket进行通讯</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>理解socket的基本概念，了解在socket的程序实现。<br>socket有两种，服务器端和客户端，服务器端socket只是通过请求产生客户端socket，客户端socket可以通过建立的connection()进行通讯。</p>
<p>客户端的socket和服务器端通过客户端请求产生的socket是同等的。</p>
]]></content>
      
        
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法-队列]]></title>
      <url>/2018/01/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E9%98%9F%E5%88%97/</url>
      <content type="html"><![CDATA[<p>队列（queue）是只允许在一端进行插入操作，而在另一端进行删除操作的线性表。</p>
<p>队列是一种先进先出的（First In First Out）的线性表，简称FIFO。允许插入的一端为队尾，允许删除的一端为队头。队列不允许在中间部位进行操作！假设队列是q=（a1，a2，……，an），那么a1就是队头元素，而an是队尾元素。这样我们就可以删除时，总是从a1开始，而插入时，总是在队列最后。这也比较符合我们通常生活中的习惯，排在第一个的优先出列，最后来的当然排在队伍最后。</p>
<p><img src="/images/algorithm/队列模型.png" alt="队列模型"><br><a id="more"></a></p>
<h1 id="队列的实现"><a href="#队列的实现" class="headerlink" title="队列的实现"></a>队列的实现</h1><p>同栈一样，队列也可以用顺序表或者链表实现。</p>
<h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><ul>
<li>Queue() 创建一个空的队列</li>
<li>enqueue(item) 往队列中添加一个item元素</li>
<li>dequeue() 从队列头部删除一个元素</li>
<li>is_empty() 判断一个队列是否为空</li>
<li>size() 返回队列的大小<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""队列"""</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.items = []</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.items == []</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enqueue</span><span class="params">(self, item)</span>:</span></div><div class="line">        <span class="string">"""进队列"""</span></div><div class="line">        self.items.insert(<span class="number">0</span>,item)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dequeue</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""出队列"""</span></div><div class="line">        <span class="keyword">return</span> self.items.pop()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""返回大小"""</span></div><div class="line">        <span class="keyword">return</span> len(self.items)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    q = Queue()</div><div class="line">    q.enqueue(<span class="string">"hello"</span>)</div><div class="line">    q.enqueue(<span class="string">"world"</span>)</div><div class="line">    q.enqueue(<span class="string">"itcast"</span>)</div><div class="line">    <span class="keyword">print</span> q.size()</div><div class="line">    <span class="keyword">print</span> q.dequeue()</div><div class="line">    <span class="keyword">print</span> q.dequeue()</div><div class="line">    <span class="keyword">print</span> q.dequeue()</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法-栈]]></title>
      <url>/2018/01/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E6%A0%88/</url>
      <content type="html"><![CDATA[<p>栈（stack），有些地方称为堆栈，是一种容器，可存入数据元素、访问元素、删除元素，它的特点在于只能允许在容器的一端（称为栈顶端指标，英语：top）进行加入数据（英语：push）和输出数据（英语：pop）的运算。没有了位置概念，保证任何时候可以访问、删除的元素都是此前最后存入的那个元素，确定了一种默认的访问顺序。</p>
<p>由于栈数据结构只允许在一端进行操作，因而按照后进先出（LIFO, Last In First Out）的原理运作。<br><a id="more"></a><br><img src="/images/algorithm/栈.png" alt="栈"></p>
<h1 id="栈结构实现"><a href="#栈结构实现" class="headerlink" title="栈结构实现"></a>栈结构实现</h1><p>栈可以用顺序表实现，也可以用链表实现。</p>
<h1 id="栈的操作"><a href="#栈的操作" class="headerlink" title="栈的操作"></a>栈的操作</h1><ul>
<li>Stack() 创建一个新的空栈</li>
<li>push(item) 添加一个新的元素item到栈顶</li>
<li>pop() 弹出栈顶元素</li>
<li>peek() 返回栈顶元素</li>
<li>is_empty() 判断栈是否为空</li>
<li>size() 返回栈的元素个数</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""栈"""</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">         self.items = []</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""判断是否为空"""</span></div><div class="line">        <span class="keyword">return</span> self.items == []</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, item)</span>:</span></div><div class="line">        <span class="string">"""加入元素"""</span></div><div class="line">        self.items.append(item)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""弹出元素"""</span></div><div class="line">        <span class="keyword">return</span> self.items.pop()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peek</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""返回栈顶元素"""</span></div><div class="line">        <span class="keyword">return</span> self.items[len(self.items)<span class="number">-1</span>]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""返回栈的大小"""</span></div><div class="line">        <span class="keyword">return</span> len(self.items)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    stack = Stack()</div><div class="line">    stack.push(<span class="string">"hello"</span>)</div><div class="line">    stack.push(<span class="string">"world"</span>)</div><div class="line">    stack.push(<span class="string">"itcast"</span>)</div><div class="line">    <span class="keyword">print</span> stack.size()</div><div class="line">    <span class="keyword">print</span> stack.peek()</div><div class="line">    <span class="keyword">print</span> stack.pop()</div><div class="line">    <span class="keyword">print</span> stack.pop()</div><div class="line">    <span class="keyword">print</span> stack.pop()</div></pre></td></tr></table></figure>
<p>执行过程如下：<br><img src="/images/algorithm/stack演示.gif" alt="stack演示"></p>
]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法-排序算法比较与搜索]]></title>
      <url>/2018/01/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%AF%94%E8%BE%83%E4%B8%8E%E6%90%9C%E7%B4%A2/</url>
      <content type="html"><![CDATA[<p><img src="/images/algorithm/排序比较.jpg" alt="排序比较.jpg"><br><a id="more"></a></p>
<h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><p>搜索是在一个项目集合中找到一个特定项目的算法过程。搜索通常的答案是真的或假的，因为该项目是否存在。 搜索的几种常见方法：顺序查找、二分法查找、二叉树查找、哈希查找</p>
<h1 id="二分法查找"><a href="#二分法查找" class="headerlink" title="二分法查找"></a>二分法查找</h1><p>二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好；其缺点是要求待查表为有序表，且插入删除困难。因此，折半查找方法适用于不经常变动而查找频繁的有序列表。首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。<br><img src="/images/algorithm/Binary_search_into_array.png" alt="Binary_search_into_array.png"></p>
<h1 id="二分法查找实现"><a href="#二分法查找实现" class="headerlink" title="二分法查找实现"></a>二分法查找实现</h1><h2 id="非递归实现"><a href="#非递归实现" class="headerlink" title="非递归实现"></a>非递归实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(alist, item)</span>:</span></div><div class="line">      first = <span class="number">0</span></div><div class="line">      last = len(alist)<span class="number">-1</span></div><div class="line">      <span class="keyword">while</span> first&lt;=last:</div><div class="line">          midpoint = (first + last)/<span class="number">2</span></div><div class="line">          <span class="keyword">if</span> alist[midpoint] == item:</div><div class="line">              <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">          <span class="keyword">elif</span> item &lt; alist[midpoint]:</div><div class="line">              last = midpoint<span class="number">-1</span></div><div class="line">          <span class="keyword">else</span>:</div><div class="line">              first = midpoint+<span class="number">1</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">testlist = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">32</span>, <span class="number">42</span>,]</div><div class="line">print(binary_search(testlist, <span class="number">3</span>))</div><div class="line">print(binary_search(testlist, <span class="number">13</span>))</div></pre></td></tr></table></figure>
<h2 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(alist, item)</span>:</span></div><div class="line">    <span class="keyword">if</span> len(alist) == <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        midpoint = len(alist)//<span class="number">2</span></div><div class="line">        <span class="keyword">if</span> alist[midpoint]==item:</div><div class="line">          <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">          <span class="keyword">if</span> item&lt;alist[midpoint]:</div><div class="line">            <span class="keyword">return</span> binary_search(alist[:midpoint],item)</div><div class="line">          <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> binary_search(alist[midpoint+<span class="number">1</span>:],item)</div><div class="line"></div><div class="line">testlist = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">32</span>, <span class="number">42</span>,]</div><div class="line">print(binary_search(testlist, <span class="number">3</span>))</div><div class="line">print(binary_search(testlist, <span class="number">13</span>))</div></pre></td></tr></table></figure>
<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><ul>
<li>最优时间复杂度：O(1)</li>
<li>最坏时间复杂度：O(logn)</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法-归并排序]]></title>
      <url>/2018/01/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>归并排序是采用分治法的一个非常典型的应用。归并排序的思想就是先递归分解数组，再合并数组。</p>
<p>将数组分解最小之后，然后合并两个有序数组，基本思路是比较两个数组的最前面的数，谁小就先取谁，取了后相应的指针就往后移一位。然后再比较，直至一个数组为空，最后把另一个数组的剩余部分复制过来即可。<br><a id="more"></a></p>
<h1 id="归并排序的分析"><a href="#归并排序的分析" class="headerlink" title="归并排序的分析"></a>归并排序的分析</h1><p><img src="/images/algorithm/Merge-sort-example.gif" alt="Merge-sort-example.gif"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(alist)</span>:</span></div><div class="line">    <span class="keyword">if</span> len(alist) &lt;= <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> alist</div><div class="line">    <span class="comment"># 二分分解</span></div><div class="line">    num = len(alist)/<span class="number">2</span></div><div class="line">    left = merge_sort(alist[:num])</div><div class="line">    right = merge_sort(alist[num:])</div><div class="line">    <span class="comment"># 合并</span></div><div class="line">    <span class="keyword">return</span> merge(left,right)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(left, right)</span>:</span></div><div class="line">    <span class="string">'''合并操作，将两个有序数组left[]和right[]合并成一个大的有序数组'''</span></div><div class="line">    <span class="comment">#left与right的下标指针</span></div><div class="line">    l, r = <span class="number">0</span>, <span class="number">0</span></div><div class="line">    result = []</div><div class="line">    <span class="keyword">while</span> l&lt;len(left) <span class="keyword">and</span> r&lt;len(right):</div><div class="line">        <span class="keyword">if</span> left[l] &lt; right[r]:</div><div class="line">            result.append(left[l])</div><div class="line">            l += <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            result.append(right[r])</div><div class="line">            r += <span class="number">1</span></div><div class="line">    result += left[l:]</div><div class="line">    result += right[r:]</div><div class="line">    <span class="keyword">return</span> result</div><div class="line"></div><div class="line">alist = [<span class="number">54</span>,<span class="number">26</span>,<span class="number">93</span>,<span class="number">17</span>,<span class="number">77</span>,<span class="number">31</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">20</span>]</div><div class="line">sorted_alist = mergeSort(alist)</div><div class="line">print(sorted_alist)</div></pre></td></tr></table></figure></p>
<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><ul>
<li>最优时间复杂度：O(nlogn)</li>
<li>最坏时间复杂度：O(nlogn)</li>
<li>稳定性：稳定</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法-希尔排序]]></title>
      <url>/2018/01/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>希尔排序(Shell Sort)是插入排序的一种。也称缩小增量排序，是直接插入排序算法的一种更高效的改进版本。希尔排序是非稳定排序算法。该方法因DL．Shell于1959年提出而得名。 希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。<br><a id="more"></a></p>
<h1 id="希尔排序过程"><a href="#希尔排序过程" class="headerlink" title="希尔排序过程"></a>希尔排序过程</h1><p>希尔排序的基本思想是：将数组列在一个表中并对列分别进行插入排序，重复这过程，不过每次用更长的列（步长更长了，列数更少了）来进行。最后整个表就只有一列了。将数组转换至表是为了更好地理解这算法，算法本身还是使用数组进行排序。</p>
<p>例如，假设有这样一组数[ 13 14 94 33 82 25 59 94 65 23 45 27 73 25 39 10 ]，如果我们以步长为5开始进行排序，我们可以通过将这列表放在有5列的表中来更好地描述算法，这样他们就应该看起来是这样(竖着的元素是步长组成)：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">13</span> <span class="number">14</span> <span class="number">94</span> <span class="number">33</span> <span class="number">82</span></div><div class="line"><span class="number">25</span> <span class="number">59</span> <span class="number">94</span> <span class="number">65</span> <span class="number">23</span></div><div class="line"><span class="number">45</span> <span class="number">27</span> <span class="number">73</span> <span class="number">25</span> <span class="number">39</span></div><div class="line"><span class="number">10</span></div></pre></td></tr></table></figure></p>
<p>然后我们对每列进行排序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">10</span> <span class="number">14</span> <span class="number">73</span> <span class="number">25</span> <span class="number">23</span></div><div class="line"><span class="number">13</span> <span class="number">27</span> <span class="number">94</span> <span class="number">33</span> <span class="number">39</span></div><div class="line"><span class="number">25</span> <span class="number">59</span> <span class="number">94</span> <span class="number">65</span> <span class="number">82</span></div><div class="line"><span class="number">45</span></div></pre></td></tr></table></figure></p>
<p>将上述四行数字，依序接在一起时我们得到：[ 10 14 73 25 23 13 27 94 33 39 25 59 94 65 82 45 ]。这时10已经移至正确位置了，然后再以3为步长进行排序：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">10</span> <span class="number">14</span> <span class="number">73</span></div><div class="line"><span class="number">25</span> <span class="number">23</span> <span class="number">13</span></div><div class="line"><span class="number">27</span> <span class="number">94</span> <span class="number">33</span></div><div class="line"><span class="number">39</span> <span class="number">25</span> <span class="number">59</span></div><div class="line"><span class="number">94</span> <span class="number">65</span> <span class="number">82</span></div><div class="line"><span class="number">45</span></div></pre></td></tr></table></figure>
<p>排序之后变为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">10</span> <span class="number">14</span> <span class="number">13</span></div><div class="line"><span class="number">25</span> <span class="number">23</span> <span class="number">33</span></div><div class="line"><span class="number">27</span> <span class="number">25</span> <span class="number">59</span></div><div class="line"><span class="number">39</span> <span class="number">65</span> <span class="number">73</span></div><div class="line"><span class="number">45</span> <span class="number">94</span> <span class="number">82</span></div><div class="line"><span class="number">94</span></div></pre></td></tr></table></figure></p>
<p>最后以1步长进行排序（此时就是简单的插入排序了）</p>
<h1 id="希尔排序的分析"><a href="#希尔排序的分析" class="headerlink" title="希尔排序的分析"></a>希尔排序的分析</h1><p><img src="/images/algorithm/shellsort.png" alt="shellsort.png"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_sort</span><span class="params">(alist)</span>:</span></div><div class="line">    n = len(alist)</div><div class="line">    <span class="comment"># 初始步长</span></div><div class="line">    gap = n / <span class="number">2</span></div><div class="line">    <span class="keyword">while</span> gap &gt; <span class="number">0</span>:</div><div class="line">        <span class="comment"># 按步长进行插入排序</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(gap, n):</div><div class="line">            j = i</div><div class="line">            <span class="comment"># 插入排序</span></div><div class="line">            <span class="keyword">while</span> j&gt;=gap <span class="keyword">and</span> alist[j-gap] &gt; alist[j]:</div><div class="line">                alist[j-gap], alist[j] = alist[j], alist[j-gap]</div><div class="line">                j -= gap</div><div class="line">        <span class="comment"># 得到新的步长</span></div><div class="line">        gap = gap / <span class="number">2</span></div><div class="line"></div><div class="line">alist = [<span class="number">54</span>,<span class="number">26</span>,<span class="number">93</span>,<span class="number">17</span>,<span class="number">77</span>,<span class="number">31</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">20</span>]</div><div class="line">shell_sort(alist)</div><div class="line">print(alist)</div></pre></td></tr></table></figure></p>
<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><ul>
<li>最优时间复杂度：根据步长序列的不同而不同</li>
<li>最坏时间复杂度：O(n2)</li>
<li>稳定想：不稳定</li>
</ul>
<h1 id="希尔排序演示"><a href="#希尔排序演示" class="headerlink" title="希尔排序演示"></a>希尔排序演示</h1><p><img src="/images/algorithm/shellsort.gif" alt="shellsort.gif"></p>
]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法-快速排序]]></title>
      <url>/2017/12/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>快速排序（英语：Quicksort），又称划分交换排序（partition-exchange sort），通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。<br><a id="more"></a><br>步骤为：</p>
<ul>
<li>从数列中挑出一个元素，称为”基准”（pivot），</li>
<li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</li>
<li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li>
</ul>
<p>递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会结束，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</p>
<h1 id="快速排序的分析"><a href="#快速排序的分析" class="headerlink" title="快速排序的分析"></a>快速排序的分析</h1><p><img src="/images/algorithm/快速排序.jpg" alt="快速排序.jpg"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(alist, start, end)</span>:</span></div><div class="line">    <span class="string">"""快速排序"""</span></div><div class="line"></div><div class="line">    <span class="comment"># 递归的退出条件</span></div><div class="line">    <span class="keyword">if</span> start &gt;= end:</div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line">    <span class="comment"># 设定起始元素为要寻找位置的基准元素</span></div><div class="line">    mid = alist[start]</div><div class="line"></div><div class="line">    <span class="comment"># low为序列左边的由左向右移动的游标</span></div><div class="line">    low = start</div><div class="line"></div><div class="line">    <span class="comment"># high为序列右边的由右向左移动的游标</span></div><div class="line">    high = end</div><div class="line"></div><div class="line">    <span class="keyword">while</span> low &lt; high:</div><div class="line">        <span class="comment"># 如果low与high未重合，high指向的元素不比基准元素小，则high向左移动</span></div><div class="line">        <span class="keyword">while</span> low &lt; high <span class="keyword">and</span> alist[high] &gt;= mid:</div><div class="line">            high -= <span class="number">1</span></div><div class="line">        <span class="comment"># 将high指向的元素放到low的位置上</span></div><div class="line">        alist[low] = alist[high]</div><div class="line"></div><div class="line">        <span class="comment"># 如果low与high未重合，low指向的元素比基准元素小，则low向右移动</span></div><div class="line">        <span class="keyword">while</span> low &lt; high <span class="keyword">and</span> alist[low] &lt; mid:</div><div class="line">            low += <span class="number">1</span></div><div class="line">        <span class="comment"># 将low指向的元素放到high的位置上</span></div><div class="line">        alist[high] = alist[low]</div><div class="line"></div><div class="line">    <span class="comment"># 退出循环后，low与high重合，此时所指位置为基准元素的正确位置</span></div><div class="line">    <span class="comment"># 将基准元素放到该位置</span></div><div class="line">    alist[low] = mid</div><div class="line"></div><div class="line">    <span class="comment"># 对基准元素左边的子序列进行快速排序</span></div><div class="line">    quick_sort(alist, start, low<span class="number">-1</span>)</div><div class="line"></div><div class="line">    <span class="comment"># 对基准元素右边的子序列进行快速排序</span></div><div class="line">    quick_sort(alist, low+<span class="number">1</span>, end)</div><div class="line"></div><div class="line"></div><div class="line">alist = [<span class="number">54</span>,<span class="number">26</span>,<span class="number">93</span>,<span class="number">17</span>,<span class="number">77</span>,<span class="number">31</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">20</span>]</div><div class="line">quick_sort(alist,<span class="number">0</span>,len(alist)<span class="number">-1</span>)</div><div class="line">print(alist)</div></pre></td></tr></table></figure></p>
<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><ul>
<li>最优时间复杂度：O(nlogn)</li>
<li>最坏时间复杂度：O(n2)</li>
<li>稳定性：不稳定</li>
</ul>
<p>从一开始快速排序平均需要花费O(n log n)时间的描述并不明显。但是不难观察到的是分区运算，数组的元素都会在每次循环中走访过一次，使用O(n)的时间。在使用结合（concatenation）的版本中，这项运算也是O(n)。</p>
<p>在最好的情况，每次我们运行一次分区，我们会把一个数列分为两个几近相等的片段。这个意思就是每次递归调用处理一半大小的数列。因此，在到达大小为一的数列前，我们只要作log n次嵌套的调用。这个意思就是调用树的深度是O(log n)。但是在同一层次结构的两个程序调用中，不会处理到原来数列的相同部分；因此，程序调用的每一层次结构总共全部仅需要O(n)的时间（每个调用有某些共同的额外耗费，但是因为在每一层次结构仅仅只有O(n)个调用，这些被归纳在O(n)系数中）。结果是这个算法仅需使用O(n log n)时间。</p>
<h1 id="快速排序演示"><a href="#快速排序演示" class="headerlink" title="快速排序演示"></a>快速排序演示</h1><p><img src="/images/algorithm/quicksort.gif" alt="quicksort.gif"></p>
]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法-插入排序]]></title>
      <url>/2017/12/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>插入排序（英语：Insertion Sort）是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。<br><a id="more"></a></p>
<h1 id="插入排序分析"><a href="#插入排序分析" class="headerlink" title="插入排序分析"></a>插入排序分析</h1><p><img src="/images/algorithm/insert.png" alt="insert.png"><br><img src="/images/algorithm/Insertion-sort-example.gif" alt="Insertion-sort-example.gif"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span><span class="params">(alist)</span>:</span></div><div class="line">    <span class="comment"># 从第二个位置，即下标为1的元素开始向前插入</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(alist)):</div><div class="line">        <span class="comment"># 从第i个元素开始向前比较，如果小于前一个元素，交换位置</span></div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i, <span class="number">0</span>, <span class="number">-1</span>):</div><div class="line">            <span class="keyword">if</span> alist[j] &lt; alist[j<span class="number">-1</span>]:</div><div class="line">                alist[j], alist[j<span class="number">-1</span>] = alist[j<span class="number">-1</span>], alist[j]</div><div class="line"></div><div class="line">alist = [<span class="number">54</span>,<span class="number">26</span>,<span class="number">93</span>,<span class="number">17</span>,<span class="number">77</span>,<span class="number">31</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">20</span>]</div><div class="line">insert_sort(alist)</div><div class="line">print(alist)</div></pre></td></tr></table></figure></p>
<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><ul>
<li>最优时间复杂度：O(n) （升序排列，序列已经处于升序状态）</li>
<li>最坏时间复杂度：O(n2)</li>
<li>稳定性：稳定</li>
</ul>
<h1 id="插入排序演示"><a href="#插入排序演示" class="headerlink" title="插入排序演示"></a>插入排序演示</h1><p><img src="/images/algorithm/insert.gif" alt="insert.gif"></p>
]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法-冒泡排序]]></title>
      <url>/2017/12/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>排序算法（英语：Sorting algorithm）是一种能将一串数据依照特定顺序进行排列的一种算法。<br><a id="more"></a></p>
<h1 id="排序算法的稳定性"><a href="#排序算法的稳定性" class="headerlink" title="排序算法的稳定性"></a>排序算法的稳定性</h1><p>稳定性：稳定排序算法会让原本有相等键值的纪录维持相对次序。也就是如果一个排序算法是稳定的，当有两个相等键值的纪录R和S，且在原本的列表中R出现在S之前，在排序过的列表中R也将会是在S之前。</p>
<p>当相等的元素是无法分辨的，比如像是整数，稳定性并不是一个问题。然而，假设以下的数对将要以他们的第一个数字来排序。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="number">4</span>, <span class="number">1</span>)  (<span class="number">3</span>, <span class="number">1</span>)  (<span class="number">3</span>, <span class="number">7</span>)（<span class="number">5</span>, <span class="number">6</span>）</div></pre></td></tr></table></figure></p>
<p>在这个状况下，有可能产生两种不同的结果，一个是让相等键值的纪录维持相对的次序，而另外一个则没有：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(<span class="number">3</span>, <span class="number">1</span>)  (<span class="number">3</span>, <span class="number">7</span>)  (<span class="number">4</span>, <span class="number">1</span>)  (<span class="number">5</span>, <span class="number">6</span>)  （维持次序）</div><div class="line">(<span class="number">3</span>, <span class="number">7</span>)  (<span class="number">3</span>, <span class="number">1</span>)  (<span class="number">4</span>, <span class="number">1</span>)  (<span class="number">5</span>, <span class="number">6</span>)  （次序被改变）</div></pre></td></tr></table></figure></p>
<p>不稳定排序算法可能会在相等的键值中改变纪录的相对次序，但是稳定排序算法从来不会如此。不稳定排序算法可以被特别地实现为稳定。作这件事情的一个方式是人工扩充键值的比较，如此在其他方面相同键值的两个对象间之比较，（比如上面的比较中加入第二个标准：第二个键值的大小）就会被决定使用在原先数据次序中的条目，当作一个同分决赛。然而，要记住这种次序通常牵涉到额外的空间负担。</p>
<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p>冒泡排序（英语：Bubble Sort）是一种简单的排序算法。它重复地遍历要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。遍历数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p>
<p>冒泡排序算法的运作如下：</p>
<ul>
<li>比较相邻的元素。如果第一个比第二个大（升序），就交换他们两个。</li>
<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li>
<li>针对所有的元素重复以上的步骤，除了最后一个。</li>
<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li>
</ul>
<h2 id="冒泡排序的分析"><a href="#冒泡排序的分析" class="headerlink" title="冒泡排序的分析"></a>冒泡排序的分析</h2><p>交换过程图示(第一次)：<br><img src="/images/algorithm/bubblesort.jpg" alt="bubblesort"><br>那么我们需要进行n-1次冒泡过程，每次对应的比较次数如下图所示：<br><img src="/images/algorithm/compare.bmp" alt="compare"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(alist)</span>:</span></div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(alist)<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>):</div><div class="line">        <span class="comment"># j表示每次遍历需要比较的次数，是逐渐减小的</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(j):</div><div class="line">            <span class="keyword">if</span> alist[i] &gt; alist[i+<span class="number">1</span>]:</div><div class="line">                alist[i], alist[i+<span class="number">1</span>] = alist[i+<span class="number">1</span>], alist[i]</div><div class="line"></div><div class="line">li = [<span class="number">54</span>,<span class="number">26</span>,<span class="number">93</span>,<span class="number">17</span>,<span class="number">77</span>,<span class="number">31</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">20</span>]</div><div class="line">bubble_sort(li)</div><div class="line">print(li)</div></pre></td></tr></table></figure></p>
<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><ul>
<li>最优时间复杂度：O(n) （表示遍历一次发现没有任何可以交换的元素，排序结束。）</li>
<li>最坏时间复杂度：O(n2)</li>
<li>稳定性：稳定</li>
</ul>
<h2 id="冒泡排序的演示"><a href="#冒泡排序的演示" class="headerlink" title="冒泡排序的演示"></a>冒泡排序的演示</h2><p><img src="/images/algorithm/bubble.gif" alt="bubble.gif"></p>
]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法-选择排序]]></title>
      <url>/2017/12/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理如下。首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。<br><a id="more"></a><br>选择排序的主要优点与数据移动有关。如果某个元素位于正确的最终位置上，则它不会被移动。选择排序每次交换一对元素，它们当中至少有一个将被移到其最终位置上，因此对n个元素的表进行排序总共进行至多n-1次交换。在所有的完全依靠交换去移动元素的排序方法中，选择排序属于非常好的一种。</p>
<h1 id="选择排序分析"><a href="#选择排序分析" class="headerlink" title="选择排序分析"></a>选择排序分析</h1><p>排序过程：<br><img src="/images/algorithm/selectionsort.jpg" alt="selectionsort.jpg"><br><img src="/images/algorithm/Selection-Sort-Animation.gif" alt="Selection-Sort-Animation.gif"><br>红色表示当前最小值，黄色表示已排序序列，蓝色表示当前位置。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">selection_sort</span><span class="params">(alist)</span>:</span></div><div class="line">    n = len(alist)</div><div class="line">    <span class="comment"># 需要进行n-1次选择操作</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>):</div><div class="line">        <span class="comment"># 记录最小位置</span></div><div class="line">        min_index = i</div><div class="line">        <span class="comment"># 从i+1位置到末尾选择出最小数据</span></div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, n):</div><div class="line">            <span class="keyword">if</span> alist[j] &lt; alist[min_index]:</div><div class="line">                min_index = j</div><div class="line">        <span class="comment"># 如果选择出的数据不在正确位置，进行交换</span></div><div class="line">        <span class="keyword">if</span> min_index != i:</div><div class="line">            alist[i], alist[min_index] = alist[min_index], alist[i]</div><div class="line"></div><div class="line">alist = [<span class="number">54</span>,<span class="number">226</span>,<span class="number">93</span>,<span class="number">17</span>,<span class="number">77</span>,<span class="number">31</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">20</span>]</div><div class="line">selection_sort(alist)</div><div class="line">print(alist)</div></pre></td></tr></table></figure></p>
<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><ul>
<li>最优时间复杂度：O(n2)</li>
<li>最坏时间复杂度：O(n2)</li>
<li>稳定性：不稳定（考虑升序每次选择最大的情况）</li>
</ul>
<h1 id="选择排序演示"><a href="#选择排序演示" class="headerlink" title="选择排序演示"></a>选择排序演示</h1><p><img src="/images/algorithm/selection.gif" alt="selection.gif"></p>
]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法-双端队列]]></title>
      <url>/2017/12/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/</url>
      <content type="html"><![CDATA[<p>双端队列（deque，全名double-ended queue），是一种具有队列和栈的性质的数据结构。</p>
<p>双端队列中的元素可以从两端弹出，其限定插入和删除操作在表的两端进行。双端队列可以在队列任意一端入队和出队。<br><img src="/images/algorithm/双端队列.png" alt="双端队列"><br><a id="more"></a></p>
<h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><ul>
<li>Deque() 创建一个空的双端队列</li>
<li>add_front(item) 从队头加入一个item元素</li>
<li>add_rear(item) 从队尾加入一个item元素</li>
<li>remove_front() 从队头删除一个item元素</li>
<li>remove_rear() 从队尾删除一个item元素</li>
<li>is_empty() 判断双端队列是否为空</li>
<li>size() 返回队列的大小</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">class Deque(object):</div><div class="line">    &quot;&quot;&quot;双端队列&quot;&quot;&quot;</div><div class="line">    def __init__(self):</div><div class="line">        self.items = []</div><div class="line"></div><div class="line">    def is_empty(self):</div><div class="line">        &quot;&quot;&quot;判断队列是否为空&quot;&quot;&quot;</div><div class="line">        return self.items == []</div><div class="line"></div><div class="line">    def add_front(self, item):</div><div class="line">        &quot;&quot;&quot;在队头添加元素&quot;&quot;&quot;</div><div class="line">        self.items.insert(0,item)</div><div class="line"></div><div class="line">    def add_rear(self, item):</div><div class="line">        &quot;&quot;&quot;在队尾添加元素&quot;&quot;&quot;</div><div class="line">        self.items.append(item)</div><div class="line"></div><div class="line">    def remove_front(self):</div><div class="line">        &quot;&quot;&quot;从队头删除元素&quot;&quot;&quot;</div><div class="line">        return self.items.pop(0)</div><div class="line"></div><div class="line">    def remove_rear(self):</div><div class="line">        &quot;&quot;&quot;从队尾删除元素&quot;&quot;&quot;</div><div class="line">        return self.items.pop()</div><div class="line"></div><div class="line">    def size(self):</div><div class="line">        &quot;&quot;&quot;返回队列大小&quot;&quot;&quot;</div><div class="line">        return len(self.items)</div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &quot;__main__&quot;:</div><div class="line">    deque = Deque()</div><div class="line">    deque.add_front(1)</div><div class="line">    deque.add_front(2)</div><div class="line">    deque.add_rear(3)</div><div class="line">    deque.add_rear(4)</div><div class="line">    print deque.size()</div><div class="line">    print deque.remove_front()</div><div class="line">    print deque.remove_front()</div><div class="line">    print deque.remove_rear()</div><div class="line">    print deque.remove_rear()</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法-单向循环链表]]></title>
      <url>/2017/11/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%8D%95%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p>单链表的一个变形是单向循环链表，链表中最后一个节点的next域不再为None，而是指向链表的头节点。<br><img src="/images/algorithm/单向循环链表.png" alt="单向循环链表"><br><a id="more"></a></p>
<h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><ul>
<li>is_empty() 判断链表是否为空</li>
<li>length() 返回链表的长度</li>
<li>travel() 遍历</li>
<li>add(item) 在头部添加一个节点</li>
<li>append(item) 在尾部添加一个节点</li>
<li>insert(pos, item) 在指定位置pos添加节点</li>
<li>remove(item) 删除一个节点</li>
<li>search(item) 查找节点是否存在</li>
</ul>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""节点"""</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, item)</span>:</span></div><div class="line">        self.item = item</div><div class="line">        self.next = <span class="keyword">None</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SinCycLinkedlist</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""单向循环链表"""</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self._head = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""判断链表是否为空"""</span></div><div class="line">        <span class="keyword">return</span> self._head == <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">length</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""返回链表的长度"""</span></div><div class="line">        <span class="comment"># 如果链表为空，返回长度0</span></div><div class="line">        <span class="keyword">if</span> self.is_empty():</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        count = <span class="number">1</span></div><div class="line">        cur = self._head</div><div class="line">        <span class="keyword">while</span> cur.next != self._head:</div><div class="line">            count += <span class="number">1</span></div><div class="line">            cur = cur.next</div><div class="line">        <span class="keyword">return</span> count</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">travel</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""遍历链表"""</span></div><div class="line">        <span class="keyword">if</span> self.is_empty():</div><div class="line">            <span class="keyword">return</span></div><div class="line">        cur = self._head</div><div class="line">        <span class="keyword">print</span> cur.item,</div><div class="line">        <span class="keyword">while</span> cur.next != self._head:</div><div class="line">            cur = cur.next</div><div class="line">            <span class="keyword">print</span> cur.item,</div><div class="line">        <span class="keyword">print</span> <span class="string">""</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, item)</span>:</span></div><div class="line">        <span class="string">"""头部添加节点"""</span></div><div class="line">        node = Node(item)</div><div class="line">        <span class="keyword">if</span> self.is_empty():</div><div class="line">            self._head = node</div><div class="line">            node.next = self._head</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="comment">#添加的节点指向_head</span></div><div class="line">            node.next = self._head</div><div class="line">            <span class="comment"># 移到链表尾部，将尾部节点的next指向node</span></div><div class="line">            cur = self._head</div><div class="line">            <span class="keyword">while</span> cur.next != self._head:</div><div class="line">                cur = cur.next</div><div class="line">            cur.next = node</div><div class="line">            <span class="comment">#_head指向添加node的</span></div><div class="line">            self._head = node</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append</span><span class="params">(self, item)</span>:</span></div><div class="line">        <span class="string">"""尾部添加节点"""</span></div><div class="line">        node = Node(item)</div><div class="line">        <span class="keyword">if</span> self.is_empty():</div><div class="line">            self._head = node</div><div class="line">            node.next = self._head</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="comment"># 移到链表尾部</span></div><div class="line">            cur = self._head</div><div class="line">            <span class="keyword">while</span> cur.next != self._head:</div><div class="line">                cur = cur.next</div><div class="line">            <span class="comment"># 将尾节点指向node</span></div><div class="line">            cur.next = node</div><div class="line">            <span class="comment"># 将node指向头节点_head</span></div><div class="line">            node.next = self._head</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, pos, item)</span>:</span></div><div class="line">        <span class="string">"""在指定位置添加节点"""</span></div><div class="line">        <span class="keyword">if</span> pos &lt;= <span class="number">0</span>:</div><div class="line">            self.add(item)</div><div class="line">        <span class="keyword">elif</span> pos &gt; (self.length()<span class="number">-1</span>):</div><div class="line">            self.append(item)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            node = Node(item)</div><div class="line">            cur = self._head</div><div class="line">            count = <span class="number">0</span></div><div class="line">            <span class="comment"># 移动到指定位置的前一个位置</span></div><div class="line">            <span class="keyword">while</span> count &lt; (pos<span class="number">-1</span>):</div><div class="line">                count += <span class="number">1</span></div><div class="line">                cur = cur.next</div><div class="line">            node.next = cur.next</div><div class="line">            cur.next = node</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, item)</span>:</span></div><div class="line">        <span class="string">"""删除一个节点"""</span></div><div class="line">        <span class="comment"># 若链表为空，则直接返回</span></div><div class="line">        <span class="keyword">if</span> self.is_empty():</div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="comment"># 将cur指向头节点</span></div><div class="line">        cur = self._head</div><div class="line">        pre = <span class="keyword">None</span></div><div class="line">        <span class="comment"># 若头节点的元素就是要查找的元素item</span></div><div class="line">        <span class="keyword">if</span> cur.item == item:</div><div class="line">            <span class="comment"># 如果链表不止一个节点</span></div><div class="line">            <span class="keyword">if</span> cur.next != self._head:</div><div class="line">                <span class="comment"># 先找到尾节点，将尾节点的next指向第二个节点</span></div><div class="line">                <span class="keyword">while</span> cur.next != self._head:</div><div class="line">                    cur = cur.next</div><div class="line">                <span class="comment"># cur指向了尾节点</span></div><div class="line">                cur.next = self._head.next</div><div class="line">                self._head = self._head.next</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="comment"># 链表只有一个节点</span></div><div class="line">                self._head = <span class="keyword">None</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            pre = self._head</div><div class="line">            <span class="comment"># 第一个节点不是要删除的</span></div><div class="line">            <span class="keyword">while</span> cur.next != self._head:</div><div class="line">                <span class="comment"># 找到了要删除的元素</span></div><div class="line">                <span class="keyword">if</span> cur.item == item:</div><div class="line">                    <span class="comment"># 删除</span></div><div class="line">                    pre.next = cur.next</div><div class="line">                    <span class="keyword">return</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    pre = cur</div><div class="line">                    cur = cur.next</div><div class="line">            <span class="comment"># cur 指向尾节点</span></div><div class="line">            <span class="keyword">if</span> cur.item == item:</div><div class="line">                <span class="comment"># 尾部删除</span></div><div class="line">                pre.next = cur.next</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, item)</span>:</span></div><div class="line">        <span class="string">"""查找节点是否存在"""</span></div><div class="line">        <span class="keyword">if</span> self.is_empty():</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        cur = self._head</div><div class="line">        <span class="keyword">if</span> cur.item == item:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">while</span> cur.next != self._head:</div><div class="line">            cur = cur.next</div><div class="line">            <span class="keyword">if</span> cur.item == item:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    ll = SinCycLinkedlist()</div><div class="line">    ll.add(<span class="number">1</span>)</div><div class="line">    ll.add(<span class="number">2</span>)</div><div class="line">    ll.append(<span class="number">3</span>)</div><div class="line">    ll.insert(<span class="number">2</span>, <span class="number">4</span>)</div><div class="line">    ll.insert(<span class="number">4</span>, <span class="number">5</span>)</div><div class="line">    ll.insert(<span class="number">0</span>, <span class="number">6</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">"length:"</span>,ll.length()</div><div class="line">    ll.travel()</div><div class="line">    <span class="keyword">print</span> ll.search(<span class="number">3</span>)</div><div class="line">    <span class="keyword">print</span> ll.search(<span class="number">7</span>)</div><div class="line">    ll.remove(<span class="number">1</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">"length:"</span>,ll.length()</div><div class="line">    ll.travel()</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法-双向链表]]></title>
      <url>/2017/11/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p>一种更复杂的链表是“双向链表”或“双面链表”。每个节点有两个链接：一个指向前一个节点，当此节点为第一个节点时，指向空值；而另一个指向下一个节点，当此节点为最后一个节点时，指向空值。<br><img src="/images/algorithm/双向链表.png" alt="双向链表"><br><a id="more"></a></p>
<h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><ul>
<li>is_empty() 链表是否为空</li>
<li>length() 链表长度</li>
<li>travel() 遍历链表</li>
<li>add(item) 链表头部添加</li>
<li>append(item) 链表尾部添加</li>
<li>insert(pos, item) 指定位置添加</li>
<li>remove(item) 删除节点</li>
<li>search(item) 查找节点是否存在</li>
</ul>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""双向链表节点"""</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, item)</span>:</span></div><div class="line">        self.item = item</div><div class="line">        self.next = <span class="keyword">None</span></div><div class="line">        self.prev = <span class="keyword">None</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DLinkList</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""双向链表"""</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self._head = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""判断链表是否为空"""</span></div><div class="line">        <span class="keyword">return</span> self._head == <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">length</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""返回链表的长度"""</span></div><div class="line">        cur = self._head</div><div class="line">        count = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> cur != <span class="keyword">None</span>:</div><div class="line">            count += <span class="number">1</span></div><div class="line">            cur = cur.next</div><div class="line">        <span class="keyword">return</span> count</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">travel</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""遍历链表"""</span></div><div class="line">        cur = self._head</div><div class="line">        <span class="keyword">while</span> cur != <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">print</span> cur.item,</div><div class="line">            cur = cur.next</div><div class="line">        <span class="keyword">print</span> <span class="string">""</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, item)</span>:</span></div><div class="line">        <span class="string">"""头部插入元素"""</span></div><div class="line">        node = Node(item)</div><div class="line">        <span class="keyword">if</span> self.is_empty():</div><div class="line">            <span class="comment"># 如果是空链表，将_head指向node</span></div><div class="line">            self._head = node</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="comment"># 将node的next指向_head的头节点</span></div><div class="line">            node.next = self._head</div><div class="line">            <span class="comment"># 将_head的头节点的prev指向node</span></div><div class="line">            self._head.prev = node</div><div class="line">            <span class="comment"># 将_head 指向node</span></div><div class="line">            self._head = node</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append</span><span class="params">(self, item)</span>:</span></div><div class="line">        <span class="string">"""尾部插入元素"""</span></div><div class="line">        node = Node(item)</div><div class="line">        <span class="keyword">if</span> self.is_empty():</div><div class="line">            <span class="comment"># 如果是空链表，将_head指向node</span></div><div class="line">            self._head = node</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="comment"># 移动到链表尾部</span></div><div class="line">            cur = self._head</div><div class="line">            <span class="keyword">while</span> cur.next != <span class="keyword">None</span>:</div><div class="line">                cur = cur.next</div><div class="line">            <span class="comment"># 将尾节点cur的next指向node</span></div><div class="line">            cur.next = node</div><div class="line">            <span class="comment"># 将node的prev指向cur</span></div><div class="line">            node.prev = cur</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, item)</span>:</span></div><div class="line">        <span class="string">"""查找元素是否存在"""</span></div><div class="line">        cur = self._head</div><div class="line">        <span class="keyword">while</span> cur != <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">if</span> cur.item == item:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">            cur = cur.next</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div></pre></td></tr></table></figure>
<h2 id="指定位置插入节点"><a href="#指定位置插入节点" class="headerlink" title="指定位置插入节点"></a>指定位置插入节点</h2><p><img src="/images/algorithm/双向链表指定位置插入元素.png" alt="双向链表指定位置插入元素"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, pos, item)</span>:</span></div><div class="line">        <span class="string">"""在指定位置添加节点"""</span></div><div class="line">        <span class="keyword">if</span> pos &lt;= <span class="number">0</span>:</div><div class="line">            self.add(item)</div><div class="line">        <span class="keyword">elif</span> pos &gt; (self.length()<span class="number">-1</span>):</div><div class="line">            self.append(item)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            node = Node(item)</div><div class="line">            cur = self._head</div><div class="line">            count = <span class="number">0</span></div><div class="line">            <span class="comment"># 移动到指定位置的前一个位置</span></div><div class="line">            <span class="keyword">while</span> count &lt; (pos<span class="number">-1</span>):</div><div class="line">                count += <span class="number">1</span></div><div class="line">                cur = cur.next</div><div class="line">            <span class="comment"># 将node的prev指向cur</span></div><div class="line">            node.prev = cur</div><div class="line">            <span class="comment"># 将node的next指向cur的下一个节点</span></div><div class="line">            node.next = cur.next</div><div class="line">            <span class="comment"># 将cur的下一个节点的prev指向node</span></div><div class="line">            cur.next.prev = node</div><div class="line">            <span class="comment"># 将cur的next指向node</span></div><div class="line">            cur.next = node</div></pre></td></tr></table></figure></p>
<h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><p><img src="/images/algorithm/双向链表删除节点.png" alt="双向链表删除节点"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, item)</span>:</span></div><div class="line">       <span class="string">"""删除元素"""</span></div><div class="line">       <span class="keyword">if</span> self.is_empty():</div><div class="line">           <span class="keyword">return</span></div><div class="line">       <span class="keyword">else</span>:</div><div class="line">           cur = self._head</div><div class="line">           <span class="keyword">if</span> cur.item == item:</div><div class="line">               <span class="comment"># 如果首节点的元素即是要删除的元素</span></div><div class="line">               <span class="keyword">if</span> cur.next == <span class="keyword">None</span>:</div><div class="line">                   <span class="comment"># 如果链表只有这一个节点</span></div><div class="line">                   self._head = <span class="keyword">None</span></div><div class="line">               <span class="keyword">else</span>:</div><div class="line">                   <span class="comment"># 将第二个节点的prev设置为None</span></div><div class="line">                   cur.next.prev = <span class="keyword">None</span></div><div class="line">                   <span class="comment"># 将_head指向第二个节点</span></div><div class="line">                   self._head = cur.next</div><div class="line">               <span class="keyword">return</span></div><div class="line">           <span class="keyword">while</span> cur != <span class="keyword">None</span>:</div><div class="line">               <span class="keyword">if</span> cur.item == item:</div><div class="line">                   <span class="comment"># 将cur的前一个节点的next指向cur的后一个节点</span></div><div class="line">                   cur.prev.next = cur.next</div><div class="line">                   <span class="comment"># 将cur的后一个节点的prev指向cur的前一个节点</span></div><div class="line">                   cur.next.prev = cur.prev</div><div class="line">                   <span class="keyword">break</span></div><div class="line">               cur = cur.next</div></pre></td></tr></table></figure></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    ll = DLinkList()</div><div class="line">    ll.add(<span class="number">1</span>)</div><div class="line">    ll.add(<span class="number">2</span>)</div><div class="line">    ll.append(<span class="number">3</span>)</div><div class="line">    ll.insert(<span class="number">2</span>, <span class="number">4</span>)</div><div class="line">    ll.insert(<span class="number">4</span>, <span class="number">5</span>)</div><div class="line">    ll.insert(<span class="number">0</span>, <span class="number">6</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">"length:"</span>,ll.length()</div><div class="line">    ll.travel()</div><div class="line">    <span class="keyword">print</span> ll.search(<span class="number">3</span>)</div><div class="line">    <span class="keyword">print</span> ll.search(<span class="number">4</span>)</div><div class="line">    ll.remove(<span class="number">1</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">"length:"</span>,ll.length()</div><div class="line">    ll.travel()</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法-单向链表(二)]]></title>
      <url>/2017/11/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h2 id="头部添加元素"><a href="#头部添加元素" class="headerlink" title="头部添加元素"></a>头部添加元素</h2><p><img src="/images/algorithm/单链表表头插入元素.png" alt="单链表表头插入元素"><br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, item)</span>:</span></div><div class="line">    <span class="string">"""头部添加元素"""</span></div><div class="line">    <span class="comment"># 先创建一个保存item值的节点</span></div><div class="line">    node = SingleNode(item)</div><div class="line">    <span class="comment"># 将新节点的链接域next指向头节点，即_head指向的位置</span></div><div class="line">    node.next = self._head</div><div class="line">    <span class="comment"># 将链表的头_head指向新节点</span></div><div class="line">    self._head = node</div></pre></td></tr></table></figure></p>
<h2 id="尾部添加元素"><a href="#尾部添加元素" class="headerlink" title="尾部添加元素"></a>尾部添加元素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">append</span><span class="params">(self, item)</span>:</span></div><div class="line">       <span class="string">"""尾部添加元素"""</span></div><div class="line">       node = SingleNode(item)</div><div class="line">       <span class="comment"># 先判断链表是否为空，若是空链表，则将_head指向新节点</span></div><div class="line">       <span class="keyword">if</span> self.is_empty():</div><div class="line">           self._head = node</div><div class="line">       <span class="comment"># 若不为空，则找到尾部，将尾节点的next指向新节点</span></div><div class="line">       <span class="keyword">else</span>:</div><div class="line">           cur = self._head</div><div class="line">           <span class="keyword">while</span> cur.next != <span class="keyword">None</span>:</div><div class="line">               cur = cur.next</div><div class="line">           cur.next = node</div></pre></td></tr></table></figure>
<h2 id="指定位置添加元素"><a href="#指定位置添加元素" class="headerlink" title="指定位置添加元素"></a>指定位置添加元素</h2><p><img src="/images/algorithm/单链表指定位置添加元素.png" alt="单链表指定位置添加元素"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, pos, item)</span>:</span></div><div class="line">       <span class="string">"""指定位置添加元素"""</span></div><div class="line">       <span class="comment"># 若指定位置pos为第一个元素之前，则执行头部插入</span></div><div class="line">       <span class="keyword">if</span> pos &lt;= <span class="number">0</span>:</div><div class="line">           self.add(item)</div><div class="line">       <span class="comment"># 若指定位置超过链表尾部，则执行尾部插入</span></div><div class="line">       <span class="keyword">elif</span> pos &gt; (self.length()<span class="number">-1</span>):</div><div class="line">           self.append(item)</div><div class="line">       <span class="comment"># 找到指定位置</span></div><div class="line">       <span class="keyword">else</span>:</div><div class="line">           node = SingleNode(item)</div><div class="line">           count = <span class="number">0</span></div><div class="line">           <span class="comment"># pre用来指向指定位置pos的前一个位置pos-1，初始从头节点开始移动到指定位置</span></div><div class="line">           pre = self._head</div><div class="line">           <span class="keyword">while</span> count &lt; (pos<span class="number">-1</span>):</div><div class="line">               count += <span class="number">1</span></div><div class="line">               pre = pre.next</div><div class="line">           <span class="comment"># 先将新节点node的next指向插入位置的节点</span></div><div class="line">           node.next = pre.next</div><div class="line">           <span class="comment"># 将插入位置的前一个节点的next指向新节点</span></div><div class="line">           pre.next = node</div></pre></td></tr></table></figure>
<h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><p><img src="/images/algorithm/单链表删除节点.png" alt="单链表删除节点"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self,item)</span>:</span></div><div class="line">       <span class="string">"""删除节点"""</span></div><div class="line">       cur = self._head</div><div class="line">       pre = <span class="keyword">None</span></div><div class="line">       <span class="keyword">while</span> cur != <span class="keyword">None</span>:</div><div class="line">           <span class="comment"># 找到了指定元素</span></div><div class="line">           <span class="keyword">if</span> cur.item == item:</div><div class="line">               <span class="comment"># 如果第一个就是删除的节点</span></div><div class="line">               <span class="keyword">if</span> <span class="keyword">not</span> pre:</div><div class="line">                   <span class="comment"># 将头指针指向头节点的后一个节点</span></div><div class="line">                   self._head = cur.next</div><div class="line">               <span class="keyword">else</span>:</div><div class="line">                   <span class="comment"># 将删除位置前一个节点的next指向删除位置的后一个节点</span></div><div class="line">                   pre.next = cur.next</div><div class="line">               <span class="keyword">break</span></div><div class="line">           <span class="keyword">else</span>:</div><div class="line">               <span class="comment"># 继续按链表后移节点</span></div><div class="line">               pre = cur</div><div class="line">               cur = cur.next</div></pre></td></tr></table></figure>
<h2 id="查找节点是否存在"><a href="#查找节点是否存在" class="headerlink" title="查找节点是否存在"></a>查找节点是否存在</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self,item)</span>:</span></div><div class="line">       <span class="string">"""链表查找节点是否存在，并返回True或者False"""</span></div><div class="line">       cur = self._head</div><div class="line">       <span class="keyword">while</span> cur != <span class="keyword">None</span>:</div><div class="line">           <span class="keyword">if</span> cur.item == item:</div><div class="line">               <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">           cur = cur.next</div><div class="line">       <span class="keyword">return</span> <span class="keyword">False</span></div></pre></td></tr></table></figure>
<p>测试<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    ll = SingleLinkList()</div><div class="line">    ll.add(<span class="number">1</span>)</div><div class="line">    ll.add(<span class="number">2</span>)</div><div class="line">    ll.append(<span class="number">3</span>)</div><div class="line">    ll.insert(<span class="number">2</span>, <span class="number">4</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">"length:"</span>,ll.length()</div><div class="line">    ll.travel()</div><div class="line">    <span class="keyword">print</span> ll.search(<span class="number">3</span>)</div><div class="line">    <span class="keyword">print</span> ll.search(<span class="number">5</span>)</div><div class="line">    ll.remove(<span class="number">1</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">"length:"</span>,ll.length()</div><div class="line">    ll.travel()</div></pre></td></tr></table></figure></p>
<h2 id="链表与顺序表的对比"><a href="#链表与顺序表的对比" class="headerlink" title="链表与顺序表的对比"></a>链表与顺序表的对比</h2><p>链表失去了顺序表随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大，但对存储空间的使用要相对灵活。<br>操作 | 链表 |     顺序表</p>
<ul>
<li>| :-: | -:<br>访问元素 | O(n)| O(1)<br>在头部插入/删除 | O(1) | O(n)<br>在尾部插入/删除 | O(n)| O(1)<br>在中间插入/删除 | O(n) |     O(n)</li>
</ul>
<p>注意虽然表面看起来复杂度都是 O(n)，但是链表和顺序表在插入和删除时进行的是完全不同的操作。链表的主要耗时操作是遍历查找，删除和插入操作本身的复杂度是O(1)。顺序表查找很快，主要耗时的操作是拷贝覆盖。因为除了目标元素在尾部的特殊情况，顺序表进行插入和删除时需要对操作点之后的所有元素进行前后移位操作，只能通过拷贝和覆盖的方法进行。</p>
]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法-单向链表(一)]]></title>
      <url>/2017/11/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p>顺序表的构建需要预先知道数据大小来申请连续的存储空间，而在进行扩充时又需要进行数据的搬迁，所以使用起来并不是很灵活。</p>
<p>链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。<br><a id="more"></a></p>
<h1 id="链表的定义"><a href="#链表的定义" class="headerlink" title="链表的定义"></a>链表的定义</h1><p>链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是不像顺序表一样连续存储数据，而是在每一个节点（数据存储单元）里存放下一个节点的位置信息（即地址）。</p>
<h1 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h1><p>单向链表也叫单链表，是链表中最简单的一种形式，它的每个节点包含两个域，一个信息域（元素域）和一个链接域。这个链接指向链表中的下一个节点，而最后一个节点的链接域则指向一个空值。<br><img src="/images/algorithm/单链表的节点和单链表.png" alt="单链表的节点和单链表"></p>
<ul>
<li>表元素域elem用来存放具体的数据。</li>
<li>链接域next用来存放下一个节点的位置（python中的标识）</li>
<li>变量p指向链表的头节点（首节点）的位置，从p出发能找到表中的任意节点。</li>
</ul>
<h2 id="节点实现"><a href="#节点实现" class="headerlink" title="节点实现"></a>节点实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleNode</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""单链表的结点"""</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,item)</span>:</span></div><div class="line">        <span class="comment"># _item存放数据元素</span></div><div class="line">        self.item = item</div><div class="line">        <span class="comment"># _next是下一个节点的标识</span></div><div class="line">        self.next = <span class="keyword">None</span></div></pre></td></tr></table></figure>
<h2 id="单链表的操作"><a href="#单链表的操作" class="headerlink" title="单链表的操作"></a>单链表的操作</h2><ul>
<li>is_empty() 链表是否为空</li>
<li>length() 链表长度</li>
<li>travel() 遍历整个链表</li>
<li>add(item) 链表头部添加元素</li>
<li>append(item) 链表尾部添加元素</li>
<li>insert(pos, item) 指定位置添加元素</li>
<li>remove(item) 删除节点</li>
<li>search(item) 查找节点是否存在</li>
</ul>
<h2 id="单链表的实现"><a href="#单链表的实现" class="headerlink" title="单链表的实现"></a>单链表的实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleLinkList</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""单链表"""</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self._head = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""判断链表是否为空"""</span></div><div class="line">        <span class="keyword">return</span> self._head == <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">length</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""链表长度"""</span></div><div class="line">        <span class="comment"># cur初始时指向头节点</span></div><div class="line">        cur = self._head</div><div class="line">        count = <span class="number">0</span></div><div class="line">        <span class="comment"># 尾节点指向None，当未到达尾部时</span></div><div class="line">        <span class="keyword">while</span> cur != <span class="keyword">None</span>:</div><div class="line">            count += <span class="number">1</span></div><div class="line">            <span class="comment"># 将cur后移一个节点</span></div><div class="line">            cur = cur.next</div><div class="line">        <span class="keyword">return</span> count</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">travel</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""遍历链表"""</span></div><div class="line">        cur = self._head</div><div class="line">        <span class="keyword">while</span> cur != <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">print</span> cur.item,</div><div class="line">            cur = cur.next</div><div class="line">        <span class="keyword">print</span> <span class="string">""</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法-顺序表]]></title>
      <url>/2017/10/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E9%A1%BA%E5%BA%8F%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p>在程序中，经常需要将一组（通常是同为某个类型的）数据元素作为整体管理和使用，需要创建这种元素组，用变量记录它们，传进传出函数等。一组数据中包含的元素个数可能发生变化（可以增加或删除元素）。<br><a id="more"></a><br>对于这种需求，最简单的解决方案便是将这样一组元素看成一个序列，用元素在序列里的位置和顺序，表示实际应用中的某种有意义的信息，或者表示数据之间的某种关系。</p>
<p>这样的一组序列元素的组织形式，我们可以将其抽象为线性表。一个线性表是某类元素的一个集合，还记录着元素之间的一种顺序关系。线性表是最基本的数据结构之一，在实际程序中应用非常广泛，它还经常被用作更复杂的数据结构的实现基础。</p>
<p>根据线性表的实际存储方式，分为两种实现模型：</p>
<ul>
<li>顺序表，将元素顺序地存放在一块连续的存储区里，元素间的顺序关系由它们的存储顺序自然表示。</li>
<li>链表，将元素存放在通过链接构造起来的一系列存储块中。</li>
</ul>
<h1 id="顺序表的基本形式"><a href="#顺序表的基本形式" class="headerlink" title="顺序表的基本形式"></a>顺序表的基本形式</h1><p><img src="/images/algorithm/顺序表的两种基本形式.png" alt="顺序表的两种基本形式"></p>
<p>图a表示的是顺序表的基本形式，数据元素本身连续存储，每个元素所占的存储单元大小固定相同，元素的下标是其逻辑地址，而元素存储的物理地址（实际内存地址）可以通过存储区的起始地址Loc (e0)加上逻辑地址（第i个元素）与存储单元大小（c）的乘积计算而得，即：</p>
<p>Loc(ei) = Loc(e0) + c*i</p>
<p>故，访问指定元素时无需从头遍历，通过计算便可获得对应地址，其时间复杂度为O(1)。</p>
<p>如果元素的大小不统一，则须采用图b的元素外置的形式，将实际数据元素另行存储，而顺序表中各单元位置保存对应元素的地址信息（即链接）。由于每个链接所需的存储量相同，通过上述公式，可以计算出元素链接的存储位置，而后顺着链接找到实际存储的数据元素。注意，图b中的c不再是数据元素的大小，而是存储一个链接地址所需的存储量，这个量通常很小。</p>
<p>图b这样的顺序表也被称为对实际数据的索引，这是最简单的索引结构。</p>
<h1 id="顺序表的结构"><a href="#顺序表的结构" class="headerlink" title="顺序表的结构"></a>顺序表的结构</h1><p><img src="/images/algorithm/顺序表的结构.png" alt="顺序表的结构"><br>一个顺序表的完整信息包括两部分，一部分是表中的元素集合，另一部分是为实现正确操作而需记录的信息，即有关表的整体情况的信息，这部分信息主要包括元素存储区的容量和当前表中已有的元素个数两项。</p>
<h1 id="顺序表的两种基本实现方式"><a href="#顺序表的两种基本实现方式" class="headerlink" title="顺序表的两种基本实现方式"></a>顺序表的两种基本实现方式</h1><p><img src="/images/algorithm/顺序表的实现方式.png" alt="顺序表的实现方式"><br>图a为一体式结构，存储表信息的单元与元素存储区以连续的方式安排在一块存储区里，两部分数据的整体形成一个完整的顺序表对象。</p>
<p>一体式结构整体性强，易于管理。但是由于数据元素存储区域是表对象的一部分，顺序表创建后，元素存储区就固定了。</p>
<p>图b为分离式结构，表对象里只保存与整个表有关的信息（即容量和元素个数），实际数据元素存放在另一个独立的元素存储区里，通过链接与基本表对象关联。</p>
<p>#元素存储区替换<br>一体式结构由于顺序表信息区与数据区连续存储在一起，所以若想更换数据区，则只能整体搬迁，即整个顺序表对象（指存储顺序表的结构信息的区域）改变了。</p>
<p>分离式结构若想更换数据区，只需将表信息区中的数据区链接地址更新即可，而该顺序表对象不变。</p>
<h1 id="元素存储区扩充"><a href="#元素存储区扩充" class="headerlink" title="元素存储区扩充"></a>元素存储区扩充</h1><p>采用分离式结构的顺序表，若将数据区更换为存储空间更大的区域，则可以在不改变表对象的前提下对其数据存储区进行了扩充，所有使用这个表的地方都不必修改。只要程序的运行环境（计算机系统）还有空闲存储，这种表结构就不会因为满了而导致操作无法进行。人们把采用这种技术实现的顺序表称为动态顺序表，因为其容量可以在使用中动态变化。</p>
<h2 id="扩充的两种策略"><a href="#扩充的两种策略" class="headerlink" title="扩充的两种策略"></a>扩充的两种策略</h2><ul>
<li><p>每次扩充增加固定数目的存储位置，如每次扩充增加10个元素位置，这种策略可称为线性增长。<br>特点：节省空间，但是扩充操作频繁，操作次数多。</p>
</li>
<li><p>每次扩充容量加倍，如每次扩充增加一倍存储空间。<br>特点：减少了扩充操作的执行次数，但可能会浪费空间资源。以空间换时间，推荐的方式。</p>
</li>
</ul>
<h1 id="顺序表的操作"><a href="#顺序表的操作" class="headerlink" title="顺序表的操作"></a>顺序表的操作</h1><h2 id="增加元素"><a href="#增加元素" class="headerlink" title="增加元素"></a>增加元素</h2><p>如图所示，为顺序表增加新元素111的三种方式<br><img src="/images/algorithm/顺序表增加元素.png" alt="顺序表增加元素"><br>a. 尾端加入元素，时间复杂度为O(1)</p>
<p>b. 非保序的加入元素（不常见），时间复杂度为O(1)</p>
<p>c. 保序的元素加入，时间复杂度为O(n)</p>
<h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><p><img src="/images/algorithm/顺序表删除元素.png" alt="顺序表删除元素"><br>a. 删除表尾元素，时间复杂度为O(1)</p>
<p>b. 非保序的元素删除（不常见），时间复杂度为O(1)</p>
<p>c. 保序的元素删除，时间复杂度为O(n)</p>
<h1 id="Python中的顺序表"><a href="#Python中的顺序表" class="headerlink" title="Python中的顺序表"></a>Python中的顺序表</h1><p>Python中的list和tuple两种类型采用了顺序表的实现技术，具有前面讨论的顺序表的所有性质。</p>
<p>tuple是不可变类型，即不变的顺序表，因此不支持改变其内部状态的任何操作，而其他方面，则与list的性质类似。</p>
<h2 id="list的基本实现技术"><a href="#list的基本实现技术" class="headerlink" title="list的基本实现技术"></a>list的基本实现技术</h2><p>Python标准类型list就是一种元素个数可变的线性表，可以加入和删除元素，并在各种操作中维持已有元素的顺序（即保序），而且还具有以下行为特征：</p>
<ul>
<li><p>基于下标（位置）的高效元素访问和更新，时间复杂度应该是O(1)；<br>为满足该特征，应该采用顺序表技术，表中元素保存在一块连续的存储区中。</p>
</li>
<li><p>允许任意加入元素，而且在不断加入元素的过程中，表对象的标识（函数id得到的值）不变。<br>为满足该特征，就必须能更换元素存储区，并且为保证更换存储区时list对象的标识id不变，只能采用分离式实现技术。</p>
</li>
</ul>
<p>在Python的官方实现中，list就是一种采用分离式技术实现的动态顺序表。这就是为什么用list.append(x) （或 list.insert(len(list), x)，即尾部插入）比在指定位置插入元素效率高的原因。</p>
<p>在Python的官方实现中，list实现采用了如下的策略：在建立空表（或者很小的表）时，系统分配一块能容纳8个元素的存储区；在执行插入操作（insert或append）时，如果元素存储区满就换一块4倍大的存储区。但如果此时的表已经很大（目前的阀值为50000），则改变策略，采用加一倍的方法。引入这种改变策略的方式，是为了避免出现过多空闲的存储位置。</p>
]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法-常见时间复杂度]]></title>
      <url>/2017/10/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%B8%B8%E8%A7%81%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
      <content type="html"><![CDATA[<table>
<thead>
<tr>
<th>执行次数函数举例</th>
<th style="text-align:center">阶</th>
<th style="text-align:right">非正式术语</th>
</tr>
</thead>
<tbody>
<tr>
<td>12</td>
<td style="text-align:center">O(1)</td>
<td style="text-align:right">常数阶</td>
</tr>
<tr>
<td>2n+3</td>
<td style="text-align:center">O(n)</td>
<td style="text-align:right">线性阶</td>
</tr>
<tr>
<td>3n^2+2n+1</td>
<td style="text-align:center">O(n2)</td>
<td style="text-align:right">平方阶</td>
</tr>
<tr>
<td>5log2n+20</td>
<td style="text-align:center">O(logn)</td>
<td style="text-align:right">对数阶</td>
</tr>
<tr>
<td>2n+3nlog2n+19</td>
<td style="text-align:center">O(nlogn)</td>
<td style="text-align:right">nlogn阶</td>
</tr>
<tr>
<td>6n^3+2n^2+3n+4</td>
<td style="text-align:center">O(n3)</td>
<td style="text-align:right">立方阶</td>
</tr>
<tr>
<td>2n</td>
<td style="text-align:center">O(2^n)</td>
<td style="text-align:right">指数阶</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<p>注意，经常将log2n（以2为底的对数）简写成logn</p>
<h1 id="常见时间复杂度之间的关系"><a href="#常见时间复杂度之间的关系" class="headerlink" title="常见时间复杂度之间的关系"></a>常见时间复杂度之间的关系</h1><p><img src="/images/algorithm/算法效率关系.bmp" alt="算法效率关系"></p>
<p>所消耗的时间从小到大</p>
<p>O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)</p>
<h1 id="Python内置类型性能分析"><a href="#Python内置类型性能分析" class="headerlink" title="Python内置类型性能分析"></a>Python内置类型性能分析</h1><h2 id="timeit模块"><a href="#timeit模块" class="headerlink" title="timeit模块"></a>timeit模块</h2><p>timeit模块可以用来测试一小段Python代码的执行速度。</p>
<p>class timeit.Timer(stmt=’pass’, setup=’pass’, timer=<timer function="">)<br>Timer是测量小段代码执行速度的类。</timer></p>
<p>stmt参数是要测试的代码语句（statment）；</p>
<p>setup参数是运行代码时需要的设置；</p>
<p>timer参数是一个定时器函数，与平台有关。</p>
<p>timeit.Timer.timeit(number=1000000)<br>Timer类中测试语句执行速度的对象方法。number参数是测试代码时的测试次数，默认为1000000次。方法返回执行代码的平均耗时，一个float类型的秒数。</p>
<h2 id="list的操作测试"><a href="#list的操作测试" class="headerlink" title="list的操作测试"></a>list的操作测试</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></div><div class="line">   l = []</div><div class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</div><div class="line">      l = l + [i]</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">()</span>:</span></div><div class="line">   l = []</div><div class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</div><div class="line">      l.append(i)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test3</span><span class="params">()</span>:</span></div><div class="line">   l = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>)]</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test4</span><span class="params">()</span>:</span></div><div class="line">   l = list(range(<span class="number">1000</span>))</div><div class="line"></div><div class="line"><span class="keyword">from</span> timeit <span class="keyword">import</span> Timer</div><div class="line"></div><div class="line">t1 = Timer(<span class="string">"test1()"</span>, <span class="string">"from __main__ import test1"</span>)</div><div class="line">print(<span class="string">"concat "</span>,t1.timeit(number=<span class="number">1000</span>), <span class="string">"seconds"</span>)</div><div class="line">t2 = Timer(<span class="string">"test2()"</span>, <span class="string">"from __main__ import test2"</span>)</div><div class="line">print(<span class="string">"append "</span>,t2.timeit(number=<span class="number">1000</span>), <span class="string">"seconds"</span>)</div><div class="line">t3 = Timer(<span class="string">"test3()"</span>, <span class="string">"from __main__ import test3"</span>)</div><div class="line">print(<span class="string">"comprehension "</span>,t3.timeit(number=<span class="number">1000</span>), <span class="string">"seconds"</span>)</div><div class="line">t4 = Timer(<span class="string">"test4()"</span>, <span class="string">"from __main__ import test4"</span>)</div><div class="line">print(<span class="string">"list range "</span>,t4.timeit(number=<span class="number">1000</span>), <span class="string">"seconds"</span>)</div><div class="line"></div><div class="line"><span class="comment"># ('concat ', 1.7890608310699463, 'seconds')</span></div><div class="line"><span class="comment"># ('append ', 0.13796091079711914, 'seconds')</span></div><div class="line"><span class="comment"># ('comprehension ', 0.05671119689941406, 'seconds')</span></div><div class="line"><span class="comment"># ('list range ', 0.014147043228149414, 'seconds')</span></div></pre></td></tr></table></figure>
<p><img src="/images/algorithm/list操作.png" alt="list操作"></p>
<h2 id="pop操作测试"><a href="#pop操作测试" class="headerlink" title="pop操作测试"></a>pop操作测试</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">x = range(<span class="number">2000000</span>)</div><div class="line">pop_zero = Timer(<span class="string">"x.pop(0)"</span>,<span class="string">"from __main__ import x"</span>)</div><div class="line">print(<span class="string">"pop_zero "</span>,pop_zero.timeit(number=<span class="number">1000</span>), <span class="string">"seconds"</span>)</div><div class="line">x = range(<span class="number">2000000</span>)</div><div class="line">pop_end = Timer(<span class="string">"x.pop()"</span>,<span class="string">"from __main__ import x"</span>)</div><div class="line">print(<span class="string">"pop_end "</span>,pop_end.timeit(number=<span class="number">1000</span>), <span class="string">"seconds"</span>)</div><div class="line"></div><div class="line"><span class="comment"># ('pop_zero ', 1.9101738929748535, 'seconds')</span></div><div class="line"><span class="comment"># ('pop_end ', 0.00023603439331054688, 'seconds')</span></div></pre></td></tr></table></figure>
<p>测试pop操作：从结果可以看出，pop最后一个元素的效率远远高于pop第一个元素</p>
<p>附:<br><img src="/images/algorithm/dict操作.png" alt="dict操作"></p>
<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><blockquote>
<p>我们如何用Python中的类型来保存一个班的学生信息？ 如果想要快速的通过学生姓名获取其信息呢？</p>
</blockquote>
<p>实际上当我们在思考这个问题的时候，我们已经用到了数据结构。列表和字典都可以存储一个班的学生信息，但是想要在列表中获取一名同学的信息时，就要遍历这个列表，其时间复杂度为O(n)，而使用字典存储时，可将学生姓名作为字典的键，学生信息作为值，进而查询时不需要遍历便可快速获取到学生信息，其时间复杂度为O(1)。</p>
<p>我们为了解决问题，需要将数据保存下来，然后根据数据的存储方式来设计算法实现进行处理，那么数据的存储方式不同就会导致需要不同的算法进行处理。我们希望算法解决问题的效率越快越好，于是我们就需要考虑数据究竟如何保存的问题，这就是数据结构。</p>
<p>在上面的问题中我们可以选择Python中的列表或字典来存储学生信息。列表和字典就是Python内建帮我们封装好的两种数据结构。</p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>数据是一个抽象的概念，将其进行分类后得到程序设计语言中的基本类型。如：int，float，char等。数据元素之间不是独立的，存在特定的关系，这些关系便是结构。数据结构指数据对象中数据元素之间的关系。</p>
<p>Python给我们提供了很多现成的数据结构类型，这些系统自己定义好的，不需要我们自己去定义的数据结构叫做Python的内置数据结构，比如列表、元组、字典。而有些数据组织方式，Python系统里面没有直接定义，需要我们自己去定义实现这些数据的组织方式，这些数据组织方式称之为Python的扩展数据结构，比如栈，队列等。</p>
<h2 id="算法与数据结构的区别"><a href="#算法与数据结构的区别" class="headerlink" title="算法与数据结构的区别"></a>算法与数据结构的区别</h2><p>数据结构只是静态的描述了数据元素之间的关系。</p>
<p>高效的程序需要在数据结构的基础上设计和选择算法。</p>
<p>程序 = 数据结构 + 算法</p>
<p>总结：算法是为了解决实际问题而设计的，数据结构是算法需要处理的问题载体</p>
<h2 id="抽象数据类型-Abstract-Data-Type"><a href="#抽象数据类型-Abstract-Data-Type" class="headerlink" title="抽象数据类型(Abstract Data Type)"></a>抽象数据类型(Abstract Data Type)</h2><p>抽象数据类型(ADT)的含义是指一个数学模型以及定义在此数学模型上的一组操作。即把数据类型和数据类型上的运算捆在一起，进行封装。引入抽象数据类型的目的是把数据类型的表示和数据类型上运算的实现与这些数据类型和运算在程序中的引用隔开，使它们相互独立。</p>
<p>最常用的数据运算有五种：</p>
<ul>
<li>插入</li>
<li>删除</li>
<li>修改</li>
<li>查找</li>
<li>排序</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法-引入]]></title>
      <url>/2017/09/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E5%BC%95%E5%85%A5/</url>
      <content type="html"><![CDATA[<h1 id="理解数据结构与算法"><a href="#理解数据结构与算法" class="headerlink" title="理解数据结构与算法"></a>理解数据结构与算法</h1><p>如果将最终写好运行的程序比作战场，我们码农便是指挥作战的将军，而我们所写的代码便是士兵和武器。</p>
<p>那么数据结构和算法是什么？答曰：兵法！<br><a id="more"></a><br>我们可以不看兵法在战场上肉搏，如此，可能会胜利，可能会失败。即使胜利，可能也会付出巨大的代价。我们写程序亦然：没有看过数据结构和算法，有时面对问题可能会没有任何思路，不知如何下手去解决；大部分时间可能解决了问题，可是对程序运行的效率和开销没有意识，性能低下；有时会借助别人开发的利器暂时解决了问题，可是遇到性能瓶颈的时候，又不知该如何进行针对性的优化。</p>
<p>如果我们常看兵法，便可做到胸有成竹，有时会事半功倍！同样，如果我们常看数据结构与算法，我们写程序时也能游刃有余、明察秋毫，遇到问题时亦能入木三分、迎刃而解。</p>
<p>故，数据结构和算法是一名程序开发人员的必备基本功</p>
<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>先来看一道题:</p>
<p>如果 a+b+c=1000，且 a^2+b^2=c^2（a,b,c 为自然数），如何求出所有a、b、c可能的组合?</p>
<h2 id="第一次尝试"><a href="#第一次尝试" class="headerlink" title="第一次尝试"></a>第一次尝试</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line">start_time = time.time()</div><div class="line"></div><div class="line"><span class="comment"># 注意是三重循环</span></div><div class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">1001</span>):</div><div class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">1001</span>):</div><div class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">1001</span>):</div><div class="line">            <span class="keyword">if</span> a**<span class="number">2</span> + b**<span class="number">2</span> == c**<span class="number">2</span> <span class="keyword">and</span> a+b+c == <span class="number">1000</span>:</div><div class="line">                print(<span class="string">"a, b, c: %d, %d, %d"</span> % (a, b, c))</div><div class="line"></div><div class="line">end_time = time.time()</div><div class="line">print(<span class="string">"elapsed: %f"</span> % (end_time - start_time))</div><div class="line">print(<span class="string">"complete!"</span>)</div></pre></td></tr></table></figure>
<p>运行结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a, b, c: <span class="number">0</span>, <span class="number">500</span>, <span class="number">500</span></div><div class="line">a, b, c: <span class="number">200</span>, <span class="number">375</span>, <span class="number">425</span></div><div class="line">a, b, c: <span class="number">375</span>, <span class="number">200</span>, <span class="number">425</span></div><div class="line">a, b, c: <span class="number">500</span>, <span class="number">0</span>, <span class="number">500</span></div><div class="line">elapsed: <span class="number">214.583347</span></div><div class="line">complete!</div></pre></td></tr></table></figure></p>
<p>注意运行时间为：214.583347秒</p>
<h2 id="第二次尝试"><a href="#第二次尝试" class="headerlink" title="第二次尝试"></a>第二次尝试</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line">start_time = time.time()</div><div class="line"></div><div class="line"><span class="comment"># 注意是两重循环</span></div><div class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">1001</span>):</div><div class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">1001</span>-a):</div><div class="line">        c = <span class="number">1000</span> - a - b</div><div class="line">        <span class="keyword">if</span> a**<span class="number">2</span> + b**<span class="number">2</span> == c**<span class="number">2</span>:</div><div class="line">            print(<span class="string">"a, b, c: %d, %d, %d"</span> % (a, b, c))</div><div class="line"></div><div class="line">end_time = time.time()</div><div class="line">print(<span class="string">"elapsed: %f"</span> % (end_time - start_time))</div><div class="line">print(<span class="string">"complete!"</span>)</div></pre></td></tr></table></figure>
<p>运行结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a, b, c: <span class="number">0</span>, <span class="number">500</span>, <span class="number">500</span></div><div class="line">a, b, c: <span class="number">200</span>, <span class="number">375</span>, <span class="number">425</span></div><div class="line">a, b, c: <span class="number">375</span>, <span class="number">200</span>, <span class="number">425</span></div><div class="line">a, b, c: <span class="number">500</span>, <span class="number">0</span>, <span class="number">500</span></div><div class="line">elapsed: <span class="number">0.182897</span></div><div class="line">complete!</div></pre></td></tr></table></figure></p>
<p>注意运行的时间:0.182897秒</p>
<h1 id="算法的概念"><a href="#算法的概念" class="headerlink" title="算法的概念"></a>算法的概念</h1><p>算法是计算机处理信息的本质，因为计算机程序本质上是一个算法来告诉计算机确切的步骤来执行一个指定的任务。一般地，当算法在处理信息时，会从输入设备或数据的存储地址读取数据，把结果写入输出设备或某个存储地址供以后再调用。</p>
<p>算法是独立存在的一种解决问题的方法和思想。</p>
<p>对于算法而言，实现的语言并不重要，重要的是思想。</p>
<p>算法可以有不同的语言描述实现版本（如C描述、C++描述、Python描述等）</p>
<h1 id="算法的五大特性"><a href="#算法的五大特性" class="headerlink" title="算法的五大特性"></a>算法的五大特性</h1><ul>
<li>输入: 算法具有0个或多个输入</li>
<li>输出: 算法至少有1个或多个输出</li>
<li>有穷性: 算法在有限的步骤之后会自动结束而不会无限循环，并且每一个步骤可以在可接受的时间内完成</li>
<li>确定性：算法中的每一步都有确定的含义，不会出现二义性</li>
<li>可行性：算法的每一步都是可行的，也就是说每一步都能够执行有限的次数完成</li>
</ul>
<h1 id="算法效率衡量"><a href="#算法效率衡量" class="headerlink" title="算法效率衡量"></a>算法效率衡量</h1><h2 id="执行时间反应算法效率"><a href="#执行时间反应算法效率" class="headerlink" title="执行时间反应算法效率"></a>执行时间反应算法效率</h2><p>对于同一问题，我们给出了两种解决算法，在两种算法的实现中，我们对程序执行的时间进行了测算，发现两段程序执行的时间相差悬殊（214.583347秒相比于0.182897秒），由此我们可以得出结论：实现算法程序的执行时间可以反应出算法的效率，即算法的优劣。</p>
<h2 id="单靠时间值绝对可信吗？"><a href="#单靠时间值绝对可信吗？" class="headerlink" title="单靠时间值绝对可信吗？"></a>单靠时间值绝对可信吗？</h2><p>假设我们将第二次尝试的算法程序运行在一台配置古老性能低下的计算机中，情况会如何？很可能运行的时间并不会比在我们的电脑中运行算法一的214.583347秒快多少。</p>
<p>单纯依靠运行的时间来比较算法的优劣并不一定是客观准确的！</p>
<p>程序的运行离不开计算机环境（包括硬件和操作系统），这些客观原因会影响程序运行的速度并反应在程序的执行时间上。那么如何才能客观的评判一个算法的优劣呢？</p>
<h2 id="时间复杂度与“大O记法”"><a href="#时间复杂度与“大O记法”" class="headerlink" title="时间复杂度与“大O记法”"></a>时间复杂度与“大O记法”</h2><p>我们假定计算机执行算法每一个基本操作的时间是固定的一个时间单位，那么有多少个基本操作就代表会花费多少时间单位。算然对于不同的机器环境而言，确切的单位时间是不同的，但是对于算法进行多少个基本操作（即花费多少时间单位）在规模数量级上却是相同的，由此可以忽略机器环境的影响而客观的反应算法的时间效率。</p>
<p>对于算法的时间效率，我们可以用“大O记法”来表示。</p>
<p>“大O记法”：对于单调的整数函数f，如果存在一个整数函数g和实常数c&gt;0，使得对于充分大的n总有f(n)&lt;=c*g(n)，就说函数g是f的一个渐近函数（忽略常数），记为f(n)=O(g(n))。也就是说，在趋向无穷的极限意义下，函数f的增长速度受到函数g的约束，亦即函数f与函数g的特征相似。</p>
<p>时间复杂度：假设存在函数g，使得算法A处理规模为n的问题示例所用时间为T(n)=O(g(n))，则称O(g(n))为算法A的渐近时间复杂度，简称时间复杂度，记为T(n)</p>
<h2 id="如何理解“大O记法”"><a href="#如何理解“大O记法”" class="headerlink" title="如何理解“大O记法”"></a>如何理解“大O记法”</h2><p>对于算法进行特别具体的细致分析虽然很好，但在实践中的实际价值有限。对于算法的时间性质和空间性质，最重要的是其数量级和趋势，这些是分析算法效率的主要部分。而计量算法基本操作数量的规模函数中那些常量因子可以忽略不计。例如，可以认为3n2和100n2属于同一个量级，如果两个算法处理同样规模实例的代价分别为这两个函数，就认为它们的效率“差不多”，都为n2级。</p>
<h2 id="最坏时间复杂度"><a href="#最坏时间复杂度" class="headerlink" title="最坏时间复杂度"></a>最坏时间复杂度</h2><p>分析算法时，存在几种可能的考虑：</p>
<p>算法完成工作最少需要多少基本操作，即最优时间复杂度<br>算法完成工作最多需要多少基本操作，即最坏时间复杂度<br>算法完成工作平均需要多少基本操作，即平均时间复杂度<br>对于最优时间复杂度，其价值不大，因为它没有提供什么有用信息，其反映的只是最乐观最理想的情况，没有参考价值。</p>
<p>对于最坏时间复杂度，提供了一种保证，表明算法在此种程度的基本操作中一定能完成工作。</p>
<p>对于平均时间复杂度，是对算法的一个全面评价，因此它完整全面的反映了这个算法的性质。但另一方面，这种衡量并没有保证，不是每个计算都能在这个基本操作内完成。而且，对于平均情况的计算，也会因为应用算法的实例分布可能并不均匀而难以计算。</p>
<p>因此，我们主要关注算法的最坏情况，亦即最坏时间复杂度。</p>
<h2 id="时间复杂度的几条基本计算规则"><a href="#时间复杂度的几条基本计算规则" class="headerlink" title="时间复杂度的几条基本计算规则"></a>时间复杂度的几条基本计算规则</h2><ul>
<li>基本操作，即只有常数项，认为其时间复杂度为O(1)</li>
<li>顺序结构，时间复杂度按加法进行计算</li>
<li>循环结构，时间复杂度按乘法进行计算</li>
<li>分支结构，时间复杂度取最大值</li>
<li>判断一个算法的效率时，往往只需要关注操作数量的最高次项，其它次要项和常数项可以忽略</li>
<li>在没有特殊说明时，我们所分析的算法的时间复杂度都是指最坏时间复杂度</li>
</ul>
<h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><h2 id="第一次尝试的算法核心部分"><a href="#第一次尝试的算法核心部分" class="headerlink" title="第一次尝试的算法核心部分"></a>第一次尝试的算法核心部分</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">1001</span>):</div><div class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">1001</span>):</div><div class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">1001</span>):</div><div class="line">            <span class="keyword">if</span> a**<span class="number">2</span> + b**<span class="number">2</span> == c**<span class="number">2</span> <span class="keyword">and</span> a+b+c == <span class="number">1000</span>:</div><div class="line">                print(<span class="string">"a, b, c: %d, %d, %d"</span> % (a, b, c))</div></pre></td></tr></table></figure>
<p>时间复杂度：</p>
<p>T(n) = O(n<em>n</em>n) = O(n3)</p>
<h2 id="第二次尝试的算法核心部分"><a href="#第二次尝试的算法核心部分" class="headerlink" title="第二次尝试的算法核心部分"></a>第二次尝试的算法核心部分</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">1001</span>):</div><div class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">1001</span>-a):</div><div class="line">        c = <span class="number">1000</span> - a - b</div><div class="line">        <span class="keyword">if</span> a**<span class="number">2</span> + b**<span class="number">2</span> == c**<span class="number">2</span>:</div><div class="line">            print(<span class="string">"a, b, c: %d, %d, %d"</span> % (a, b, c))</div></pre></td></tr></table></figure>
<p>时间复杂度：</p>
<p>T(n) = O(n<em>n</em>(1+1)) = O(n*n) = O(n2)</p>
<p>由此可见，我们尝试的第二种算法要比第一种算法的时间复杂度好多的。</p>
]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信公众号-被动回复消息与鹦鹉学舌]]></title>
      <url>/2017/07/25/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7-%E8%A2%AB%E5%8A%A8%E5%9B%9E%E5%A4%8D%E6%B6%88%E6%81%AF%E4%B8%8E%E9%B9%A6%E9%B9%89%E5%AD%A6%E8%88%8C/</url>
      <content type="html"><![CDATA[<p>当用户发送消息给公众号时（或某些特定的用户操作引发的事件推送时），会产生一个POST请求，开发者可以在响应包中返回特定XML结构，来对该消息进行响应（现支持回复文本、图片、图文、语音、视频、音乐）。严格来说，发送被动响应消息其实并不是一种接口，而是对微信服务器发过来消息的一次回复。</p>
<p>假如服务器无法保证在五秒内处理并回复，必须做出下述回复，这样微信服务器才不会对此作任何处理，并且不会发起重试（这种情况下，可以使用客服消息接口进行异步回复），否则，将出现严重的错误提示。详见下面说明：</p>
<ul>
<li>（推荐方式）直接回复success</li>
<li><p>直接回复空串（指字节长度为0的空字符串，而不是XML结构体中content字段的内容为空）<br>一旦遇到以下情况，微信都会在公众号会话中，向用户下发系统提示“该公众号暂时无法提供服务，请稍后再试”：</p>
</li>
<li><p>开发者在5秒内未回复任何内容</p>
</li>
<li>开发者回复了异常数据，比如JSON数据等</li>
</ul>
<h1 id="回复的消息类型"><a href="#回复的消息类型" class="headerlink" title="回复的消息类型"></a>回复的消息类型</h1><ul>
<li>文本消息</li>
<li>图片消息</li>
<li>语音消息</li>
<li>视频消息</li>
<li>音乐消息</li>
<li>图文消息</li>
</ul>
<h1 id="回复文本消息"><a href="#回复文本消息" class="headerlink" title="回复文本消息"></a>回复文本消息</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;12345678&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;Content&gt;&lt;![CDATA[你好]]&gt;&lt;/Content&gt;</div><div class="line">&lt;/xml&gt;</div></pre></td></tr></table></figure>
<p><img src="/images/wechat/reply_text_msg.png" alt="reply_text_msg.png"></p>
<h1 id="鹦鹉学舌代码实现"><a href="#鹦鹉学舌代码实现" class="headerlink" title="鹦鹉学舌代码实现"></a>鹦鹉学舌代码实现</h1><p>我们现在来实现一个针对文本消息的收发程序。实现的业务逻辑类似与“鹦鹉学舌”，粉丝发什么内容，我们就传回给粉丝什么内容。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"># coding:utf-8</div><div class="line"></div><div class="line">import tornado.web</div><div class="line">import tornado.httpserver</div><div class="line">import tornado.ioloop</div><div class="line">import tornado.options</div><div class="line">import hashlib</div><div class="line">import xmltodict</div><div class="line">import time</div><div class="line"></div><div class="line">from tornado.web import RequestHandler</div><div class="line">from tornado.options import define, options</div><div class="line"></div><div class="line">WECHAT_TOKEN = &quot;itcast&quot;</div><div class="line"></div><div class="line">define(&quot;port&quot;, default=8080, type=int)</div><div class="line"></div><div class="line">class WeChatHandler(RequestHandler):</div><div class="line">    &quot;&quot;&quot;微信接入接口&quot;&quot;&quot;</div><div class="line">    def get(self):</div><div class="line">        &quot;&quot;&quot;开发者验证接口&quot;&quot;&quot;</div><div class="line">        signature = self.get_argument(&quot;signature&quot;)</div><div class="line">        timestamp = self.get_argument(&quot;timestamp&quot;)</div><div class="line">        nonce = self.get_argument(&quot;nonce&quot;)</div><div class="line">        echostr = self.get_argument(&quot;echostr&quot;)</div><div class="line">        tmp = [WECHAT_TOKEN, timestamp, nonce]</div><div class="line">        tmp.sort()</div><div class="line">        tmp = &quot;&quot;.join(tmp)</div><div class="line">        tmp = hashlib.sha1(tmp).hexdigest()</div><div class="line">        if tmp == signature:</div><div class="line">            self.write(echostr)</div><div class="line">        else:</div><div class="line">            self.write(&quot;error&quot;)</div><div class="line"></div><div class="line">    def post(self):</div><div class="line">        &quot;&quot;&quot;收发消息接口&quot;&quot;&quot;</div><div class="line">        req_xml = self.request.body</div><div class="line">        req = xmltodict.parse(req_xml)[&apos;xml&apos;]</div><div class="line">        if &quot;text&quot; == req.get(&quot;MsgType&quot;):</div><div class="line">            resp = &#123;</div><div class="line">                &quot;ToUserName&quot;:req.get(&quot;FromUserName&quot;, &quot;&quot;),</div><div class="line">                &quot;FromUserName&quot;:req.get(&quot;ToUserName&quot;, &quot;&quot;),</div><div class="line">                &quot;CreateTime&quot;:int(time.time()),</div><div class="line">                &quot;MsgType&quot;:&quot;text&quot;,</div><div class="line">                &quot;Content&quot;:req.get(&quot;Content&quot;, &quot;&quot;)</div><div class="line">            &#125;</div><div class="line">        else:</div><div class="line">            resp = &#123;</div><div class="line">                &quot;ToUserName&quot;:req.get(&quot;FromUserName&quot;, &quot;&quot;),</div><div class="line">                &quot;FromUserName&quot;:req.get(&quot;ToUserName&quot;, &quot;&quot;),</div><div class="line">                &quot;CreateTime&quot;:int(time.time()),</div><div class="line">                &quot;MsgType&quot;:&quot;text&quot;,</div><div class="line">                &quot;Content&quot;:&quot;I love you, itcast!&quot;</div><div class="line">            &#125;</div><div class="line">        resp_xml = xmltodict.unparse(&#123;&quot;xml&quot;:resp&#125;)</div><div class="line">        self.write(resp_xml)</div><div class="line"></div><div class="line"></div><div class="line">def main():</div><div class="line">    tornado.options.parse_command_line()</div><div class="line">    app = tornado.web.Application([</div><div class="line">            (r&quot;/wechat&quot;, WeChatHandler),</div><div class="line">        ])</div><div class="line">    http_server = tornado.httpserver.HTTPServer(app)</div><div class="line">    http_server.listen(options.port)</div><div class="line">    tornado.ioloop.IOLoop.current().start()</div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<h1 id="改写代码"><a href="#改写代码" class="headerlink" title="改写代码"></a>改写代码</h1><p>微信发送的请求中会携带签名验证信息，我们需要对收到的请求进行验证是否来自微信服务器，所以在处理请求前都要按照验证算法进行检验。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">class WeChatBaseHandler(RequestHandler):</div><div class="line">    def prepare(self):</div><div class="line">        &quot;&quot;&quot;验证请求是否来自微信服务器&quot;&quot;&quot;</div><div class="line">        signature = self.get_argument(&quot;signature&quot;)</div><div class="line">        timestamp = self.get_argument(&quot;timestamp&quot;)</div><div class="line">        nonce = self.get_argument(&quot;nonce&quot;)</div><div class="line">        tmp = [WECHAT_TOKEN, timestamp, nonce]</div><div class="line">        tmp.sort()</div><div class="line">        tmp = &quot;&quot;.join(tmp)</div><div class="line">        tmp = hashlib.sha1(tmp).hexdigest()</div><div class="line">        if tmp != signature:</div><div class="line">            self.send_error(403) # 若是非法请求，返回403错误</div><div class="line"></div><div class="line">class WeChatHandler(WeChatBaseHandler):</div><div class="line">    &quot;&quot;&quot;微信接入接口&quot;&quot;&quot;</div><div class="line">    def get(self):</div><div class="line">        &quot;&quot;&quot;开发者验证接口&quot;&quot;&quot;</div><div class="line">        echostr = self.get_argument(&quot;echostr&quot;)</div><div class="line">        self.write(echostr)</div><div class="line"></div><div class="line">    def post(self):</div><div class="line">        &quot;&quot;&quot;收发消息接口&quot;&quot;&quot;</div><div class="line">        req_xml = self.request.body</div><div class="line">        req = xmltodict.parse(req_xml)[&apos;xml&apos;]</div><div class="line">        if &quot;text&quot; == req.get(&quot;MsgType&quot;):</div><div class="line">            resp = &#123;</div><div class="line">                &quot;ToUserName&quot;:req.get(&quot;FromUserName&quot;, &quot;&quot;),</div><div class="line">                &quot;FromUserName&quot;:req.get(&quot;ToUserName&quot;, &quot;&quot;),</div><div class="line">                &quot;CreateTime&quot;:int(time.time()),</div><div class="line">                &quot;MsgType&quot;:&quot;text&quot;,</div><div class="line">                &quot;Content&quot;:req.get(&quot;Content&quot;, &quot;&quot;)</div><div class="line">            &#125;</div><div class="line">        else:</div><div class="line">            resp = &#123;</div><div class="line">                &quot;ToUserName&quot;:req.get(&quot;FromUserName&quot;, &quot;&quot;),</div><div class="line">                &quot;FromUserName&quot;:req.get(&quot;ToUserName&quot;, &quot;&quot;),</div><div class="line">                &quot;CreateTime&quot;:int(time.time()),</div><div class="line">                &quot;MsgType&quot;:&quot;text&quot;,</div><div class="line">                &quot;Content&quot;:&quot;I love you, itcast!&quot;</div><div class="line">            &#125;</div><div class="line">        resp_xml = xmltodict.unparse(&#123;&quot;xml&quot;:resp&#125;)</div><div class="line">        self.write(resp_xml)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 微信公众号 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信公众号-接收与发送消息]]></title>
      <url>/2017/07/19/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7-%E6%8E%A5%E5%8F%97%E4%B8%8E%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF/</url>
      <content type="html"><![CDATA[<p>验证URL有效性成功后即接入生效，成为开发者。如果公众号类型为服务号（订阅号只能使用普通消息接口），可以在公众平台网站中申请认证，认证成功的服务号将获得众多接口权限，以满足开发者需求。</p>
<p>此后用户每次向公众号发送消息、或者产生自定义菜单点击事件时，开发者填写的服务器配置URL将得到微信服务器推送过来的消息和事件，然后开发者可以依据自身业务逻辑进行响应，例如回复消息等。</p>
<p>用户向公众号发送消息时，公众号方收到的消息发送者是一个OpenID，是使用用户微信号加密后的结果，每个用户对每个公众号有一个唯一的OpenID。<br><a id="more"></a></p>
<h1 id="接收普通消息"><a href="#接收普通消息" class="headerlink" title="接收普通消息"></a>接收普通消息</h1><p>当普通微信用户向公众账号发消息时，微信服务器将POST消息的XML数据包到开发者填写的URL上。</p>
<p>微信服务器在五秒内收不到响应会断掉连接，并且重新发起请求，总共重试三次。假如服务器无法保证在五秒内处理并回复，可以直接回复空串，微信服务器不会对此作任何处理，并且不会发起重试。</p>
<p>各消息类型的推送使用XML数据包结构，如：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[gh_866835093fea]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[ogdotwSc_MmEEsJs9-ABZ1QL_4r4]]&gt;&lt;/FromUserName&gt;</div><div class="line">&lt;CreateTime&gt;1478317060&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;Content&gt;&lt;![CDATA[你好]]&gt;&lt;/Content&gt;</div><div class="line">&lt;MsgId&gt;6349323426230210995&lt;/MsgId&gt;</div><div class="line">&lt;/xml&gt;</div></pre></td></tr></table></figure></p>
<h1 id="xmltodict-模块基本用法"><a href="#xmltodict-模块基本用法" class="headerlink" title="xmltodict 模块基本用法"></a>xmltodict 模块基本用法</h1><p>xmltodict 是一个用来处理xml数据的很方便的模块。包含两个常用方法parse和unparse</p>
<h2 id="parse"><a href="#parse" class="headerlink" title="parse"></a>parse</h2><p>xmltodict.parse()方法可以将xml数据转为python中的dict字典数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import xmltodict</div><div class="line">&gt;&gt;&gt; xml_str = &quot;&quot;&quot;</div><div class="line">... &lt;xml&gt;</div><div class="line">... &lt;ToUserName&gt;&lt;![CDATA[gh_866835093fea]]&gt;&lt;/ToUserName&gt;</div><div class="line">... &lt;FromUserName&gt;&lt;![CDATA[ogdotwSc_MmEEsJs9-ABZ1QL_4r4]]&gt;&lt;/FromUserName&gt;</div><div class="line">... &lt;CreateTime&gt;1478317060&lt;/CreateTime&gt;</div><div class="line">... &lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;</div><div class="line">... &lt;Content&gt;&lt;![CDATA[你好]]&gt;&lt;/Content&gt;</div><div class="line">... &lt;MsgId&gt;6349323426230210995&lt;/MsgId&gt;</div><div class="line">... &lt;/xml&gt;</div><div class="line">... &quot;&quot;&quot;</div><div class="line">&gt;&gt;&gt;</div><div class="line">&gt;&gt;&gt; xml_dict = xmltodict.parse(xml_str)</div><div class="line">&gt;&gt;&gt; type(xml_dict)</div><div class="line">&lt;class &apos;collections.OrderedDict&apos;&gt;  # 类字典型，可以按照字典方法操作</div><div class="line">&gt;&gt;&gt;</div><div class="line">&gt;&gt;&gt; xml_dict</div><div class="line">OrderedDict([(u&apos;xml&apos;, OrderedDict([(u&apos;ToUserName&apos;, u&apos;gh_866835093fea&apos;), (u&apos;FromUserName&apos;, u&apos;ogdotwSc_MmEEsJs9-ABZ1QL_4r4&apos;), (u&apos;CreateTime&apos;, u&apos;1478317060&apos;), (u&apos;MsgType&apos;, u&apos;text&apos;), (u&apos;Content&apos;, u&apos;\u4f60\u597d&apos;), (u&apos;MsgId&apos;, u&apos;6349323426230210995&apos;)]))])</div><div class="line">&gt;&gt;&gt;</div><div class="line">&gt;&gt;&gt; xml_dict[&apos;xml&apos;]</div><div class="line">OrderedDict([(u&apos;ToUserName&apos;, u&apos;gh_866835093fea&apos;), (u&apos;FromUserName&apos;, u&apos;ogdotwSc_MmEEsJs9-ABZ1QL_4r4&apos;), (u&apos;CreateTime&apos;, u&apos;1478317060&apos;), (u&apos;MsgType&apos;, u&apos;text&apos;), (u&apos;Content&apos;, u&apos;\u4f60\u597d&apos;), (u&apos;MsgId&apos;, u&apos;6349323426230210995&apos;)])</div><div class="line">&gt;&gt;&gt;</div><div class="line">&gt;&gt;&gt; for key, val in xml_dict[&apos;xml&apos;].items():</div><div class="line">...     print key, &quot;=&quot;, val</div><div class="line">... </div><div class="line">ToUserName = gh_866835093fea</div><div class="line">FromUserName = ogdotwSc_MmEEsJs9-ABZ1QL_4r4</div><div class="line">CreateTime = 1478317060</div><div class="line">MsgType = text</div><div class="line">Content = 你好</div><div class="line">MsgId = 6349323426230210995</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>
<h2 id="unparse"><a href="#unparse" class="headerlink" title="unparse"></a>unparse</h2><p>xmltodict.unparse()方法可以将字典转换为xml字符串：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">xml_dict = &#123;</div><div class="line">    &quot;xml&quot;: &#123;</div><div class="line">        &quot;ToUserName&quot; : &quot;gh_866835093fea&quot;,</div><div class="line">        &quot;FromUserName&quot; : &quot;ogdotwSc_MmEEsJs9-ABZ1QL_4r4&quot;,</div><div class="line">        &quot;CreateTime&quot; : &quot;1478317060&quot;,</div><div class="line">        &quot;MsgType&quot; : &quot;text&quot;,</div><div class="line">        &quot;Content&quot; : u&quot;你好&quot;,</div><div class="line">        &quot;MsgId&quot; : &quot;6349323426230210995&quot;,</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&gt;&gt;&gt; xml_str = xmltodict.unparse(xml_dict)</div><div class="line">&gt;&gt;&gt; print xml_str</div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;xml&gt;&lt;FromUserName&gt;ogdotwSc_MmEEsJs9-ABZ1QL_4r4&lt;/FromUserName&gt;&lt;MsgId&gt;6349323426230210995&lt;/MsgId&gt;&lt;ToUserName&gt;gh_866835093fea&lt;/ToUserName&gt;&lt;Content&gt;你好&lt;/Content&gt;&lt;MsgType&gt;text&lt;/MsgType&gt;&lt;CreateTime&gt;1478317060&lt;/CreateTime&gt;&lt;/xml&gt;</div><div class="line">&gt;&gt;&gt;</div><div class="line">&gt;&gt;&gt; xml_str = xmltodict.unparse(xml_dict, pretty=True) # pretty表示友好输出</div><div class="line">&gt;&gt;&gt; print xml_str</div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;xml&gt;</div><div class="line">    &lt;FromUserName&gt;ogdotwSc_MmEEsJs9-ABZ1QL_4r4&lt;/FromUserName&gt;</div><div class="line">    &lt;MsgId&gt;6349323426230210995&lt;/MsgId&gt;</div><div class="line">    &lt;ToUserName&gt;gh_866835093fea&lt;/ToUserName&gt;</div><div class="line">    &lt;Content&gt;你好&lt;/Content&gt;</div><div class="line">    &lt;MsgType&gt;text&lt;/MsgType&gt;</div><div class="line">    &lt;CreateTime&gt;1478317060&lt;/CreateTime&gt;</div><div class="line">&lt;/xml&gt;</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>
<h1 id="普通消息类别"><a href="#普通消息类别" class="headerlink" title="普通消息类别"></a>普通消息类别</h1><ul>
<li>文本消息</li>
<li>图片消息</li>
<li>语音消息</li>
<li>视频消息</li>
<li>小视频消息</li>
<li>地理位置消息</li>
<li>链接消息</li>
</ul>
<h1 id="文本消息"><a href="#文本消息" class="headerlink" title="文本消息"></a>文本消息</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;xml&gt;</div><div class="line">&lt;ToUserName&gt;&lt;![CDATA[toUser]]&gt;&lt;/ToUserName&gt;</div><div class="line">&lt;FromUserName&gt;&lt;![CDATA[fromUser]]&gt;&lt;/FromUserName&gt; </div><div class="line">&lt;CreateTime&gt;1348831860&lt;/CreateTime&gt;</div><div class="line">&lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;</div><div class="line">&lt;Content&gt;&lt;![CDATA[this is a test]]&gt;&lt;/Content&gt;</div><div class="line">&lt;MsgId&gt;1234567890123456&lt;/MsgId&gt;</div><div class="line">&lt;/xml&gt;</div></pre></td></tr></table></figure>
<p><img src="/images/wechat/receive_text_msg.png" alt="receive_text_msg.png"></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 微信公众号 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信公众号-接入公众平台（二）]]></title>
      <url>/2017/07/06/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7-%E6%8E%A5%E5%85%A5%E5%85%AC%E4%BC%97%E5%B9%B3%E5%8F%B0%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h1 id="填写服务器配置"><a href="#填写服务器配置" class="headerlink" title="填写服务器配置"></a>填写服务器配置</h1><a id="more"></a>
<p>登录微信公众平台官网后，在公众平台后台管理页面 - 开发者中心页，点击“修改配置”按钮，填写服务器地址（URL）、Token和EncodingAESKey，其中URL是开发者用来接收微信消息和事件的接口URL。Token可由开发者可以任意填写，用作生成签名（该Token会和接口URL中包含的Token进行比对，从而验证安全性）。EncodingAESKey由开发者手动填写或随机生成，将用作消息体加解密密钥。</p>
<p>同时，开发者可选择消息加解密方式：明文模式、兼容模式和安全模式。模式的选择与服务器配置在提交后都会立即生效，请开发者谨慎填写及选择。加解密方式的默认状态为明文模式，选择兼容模式和安全模式需要提前配置好相关加解密代码，详情请参考消息体签名及加解密部分的文档。</p>
<p>微信公众号接口只支持80接口。<br>公众平台页面<br><img src="/images/wechat/fill_server_config.png" alt="fill_server_config.png"></p>
<h2 id="利用测试平台"><a href="#利用测试平台" class="headerlink" title="利用测试平台"></a>利用测试平台</h2><p>测试平台登陆地址 <a href="http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login" target="_blank" rel="noopener">http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login</a><br><img src="/images/wechat/wechat_sandbox.png" alt="wechat_sandbox.png"><br><img src="/images/wechat/fill_server_config_sandbox.png" alt="fill_server_config_sandbox.png"></p>
<h1 id="验证服务器地址的有效性"><a href="#验证服务器地址的有效性" class="headerlink" title="验证服务器地址的有效性"></a>验证服务器地址的有效性</h1><p>开发者提交信息后，微信服务器将发送GET请求到填写的服务器地址URL上，GET请求携带四个参数：<br><img src="/images/wechat/valid_server.png" alt="valid_server.png"><br>开发者通过检验signature对请求进行校验。若确认此次GET请求来自微信服务器，请原样返回echostr参数内容，则接入生效，成为开发者成功，否则接入失败。</p>
<p>校验流程：</p>
<ul>
<li>将token、timestamp、nonce三个参数进行字典序排序</li>
<li>将三个参数字符串拼接成一个字符串进行sha1加密</li>
<li>开发者获得加密后的字符串可与signature对比，标识该请求来源于微信<br>Python代码实现：<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WechatHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></div><div class="line">    <span class="string">"""微信接入接口"""</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""开发者验证接口"""</span></div><div class="line">        signature = self.get_argument(<span class="string">"signature"</span>, <span class="string">""</span>)</div><div class="line">        timestamp = self.get_argument(<span class="string">"timestamp"</span>, <span class="string">""</span>)</div><div class="line">        nonce = self.get_argument(<span class="string">"nonce"</span>, <span class="string">""</span>)</div><div class="line">        echostr = self.get_argument(<span class="string">"echostr"</span>, <span class="string">""</span>)</div><div class="line">        tmp = [WECHAT_TOKEN, timestamp, nonce]</div><div class="line">        tmp.sort()</div><div class="line">        tmp = <span class="string">""</span>.join(tmp)</div><div class="line">        tmp = hashlib.sha1(tmp).hexdigest()</div><div class="line">        <span class="keyword">if</span> tmp == signature:</div><div class="line">            self.write(echostr)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.write(<span class="string">"error"</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 微信公众号 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信公众号-接入公众平台（一）]]></title>
      <url>/2017/07/05/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7-%E6%8E%A5%E5%85%A5%E5%85%AC%E4%BC%97%E5%B9%B3%E5%8F%B0/</url>
      <content type="html"><![CDATA[<p>接入微信公众平台开发，开发者需要按照如下步骤完成：</p>
<ul>
<li>填写服务器配置</li>
<li>验证服务器地址的有效性</li>
<li>依据接口文档实现业务逻辑<a id="more"></a>
</li>
</ul>
<h1 id="无扩展应用模型"><a href="#无扩展应用模型" class="headerlink" title="无扩展应用模型"></a>无扩展应用模型</h1><h2 id="公众号消息会话"><a href="#公众号消息会话" class="headerlink" title="公众号消息会话"></a>公众号消息会话</h2><p><img src="/images/wechat/无扩展会话应用模型.png" alt="无扩展会话应用模型.png"></p>
<h2 id="公众号内网页"><a href="#公众号内网页" class="headerlink" title="公众号内网页"></a>公众号内网页</h2><p><img src="/images/wechat/无扩展内网页应用模型.png" alt="无扩展内网页应用模型.png"></p>
<h1 id="有扩展应用模型"><a href="#有扩展应用模型" class="headerlink" title="有扩展应用模型"></a>有扩展应用模型</h1><h2 id="公众号消息会话-1"><a href="#公众号消息会话-1" class="headerlink" title="公众号消息会话"></a>公众号消息会话</h2><p><img src="/images/wechat/有扩展会话应用模型.png" alt="有扩展会话应用模型.png"></p>
<h2 id="公众号内网页-1"><a href="#公众号内网页-1" class="headerlink" title="公众号内网页"></a>公众号内网页</h2><p><img src="/images/wechat/有扩展内网页应用模型.png" alt="有扩展内网页应用模型.png"></p>
<h1 id="公众号接口"><a href="#公众号接口" class="headerlink" title="公众号接口"></a>公众号接口</h1><h2 id="公众号消息会话-2"><a href="#公众号消息会话-2" class="headerlink" title="公众号消息会话"></a>公众号消息会话</h2><p>目前公众号内主要有这样几类消息服务的类型，分别用于不同的场景。</p>
<h2 id="群发消息"><a href="#群发消息" class="headerlink" title="群发消息"></a>群发消息</h2><p>公众号可以以一定频次（订阅号为每天1次，服务号为每月4次），向用户群发消息，包括文字消息、图文消息、图片、视频、语音等。</p>
<h2 id="被动回复消息"><a href="#被动回复消息" class="headerlink" title="被动回复消息"></a>被动回复消息</h2><p>在用户给公众号发消息后，微信服务器会将消息发到开发者预先在开发者中心设置的服务器地址（开发者需要进行消息真实性验证），公众号可以在5秒内做出回复，可以回复一个消息，也可以回复命令告诉微信服务器这条消息暂不回复。被动回复消息可以设置加密（在公众平台官网的开发者中心处设置，设置后，按照消息加解密文档来进行处理。其他3种消息的调用因为是API调用而不是对请求的返回，所以不需要加解密）。</p>
<h2 id="客服消息"><a href="#客服消息" class="headerlink" title="客服消息"></a>客服消息</h2><p>在用户给公众号发消息后的48小时内，公众号可以给用户发送不限数量的消息，主要用于客服场景。用户的行为会触发事件推送，某些事件推送是支持公众号据此发送客服消息的，详见微信推送消息与事件说明文档。</p>
<h2 id="模板消息"><a href="#模板消息" class="headerlink" title="模板消息"></a>模板消息</h2><p>在需要对用户发送服务通知（如刷卡提醒、服务预约成功通知等）时，公众号可以用特定内容模板，主动向用户发送消息。</p>
<h2 id="公众号内网页-2"><a href="#公众号内网页-2" class="headerlink" title="公众号内网页"></a>公众号内网页</h2><p>对于公众号内网页，提供以下场景接口：</p>
<p>网页授权获取用户基本信息<br>通过该接口，可以获取用户的基本信息</p>
<p>微信JS-SDK<br>是开发者在网页上通过JavaScript代码使用微信原生功能的工具包，开发者可以使用它在网页上录制和播放微信语音、监听微信分享、上传手机本地图片、拍照等许多能力。</p>
<h2 id="微信开发者文档"><a href="#微信开发者文档" class="headerlink" title="微信开发者文档"></a>微信开发者文档</h2><p>微信开发者文档网址 <a href="https://mp.weixin.qq.com/wiki/home/index.html" target="_blank" rel="noopener">https://mp.weixin.qq.com/wiki/home/index.html</a><br><img src="/images/wechat/wechat_dev_doc.png" alt="wechat_dev_doc.png"></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 微信公众号 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信公众号-公众号与公众平台]]></title>
      <url>/2017/06/26/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7-%E5%85%AC%E4%BC%97%E5%8F%B7%E4%B8%8E%E5%85%AC%E4%BC%97%E5%B9%B3%E5%8F%B0/</url>
      <content type="html"><![CDATA[<ul>
<li>个人号</li>
<li>公众号<ul>
<li>订阅号</li>
<li>服务号</li>
</ul>
</li>
<li>企业号<a id="more"></a>
<h1 id="公众号"><a href="#公众号" class="headerlink" title="公众号"></a>公众号</h1>微信公众号主要面向名人、政府、媒体、企业等机构推出的合作推广业务。在这里可以通过微信渠道将品牌推广给上亿的微信用户，减少宣传成本，提高品牌知名度，打造更具影响力的品牌形象。</li>
</ul>
<h1 id="公众平台"><a href="#公众平台" class="headerlink" title="公众平台"></a>公众平台</h1><p>微信公众平台是运营者通过公众号为微信用户提供资讯和服务的平台，而公众平台开发接口则是提供服务的基础，开发者在公众平台网站中创建公众号、获取接口权限后，可以通过阅读公众平台开发接口文档来帮助开发。</p>
<p>微信公众平台可以用来注册、管理公众号和企业号。</p>
<p>登陆网址 <a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">https://mp.weixin.qq.com/</a> </p>
<p><img src="/images/wechat/login.png" alt="login.png"></p>
<h1 id="公众号与个人号的区别"><a href="#公众号与个人号的区别" class="headerlink" title="公众号与个人号的区别"></a>公众号与个人号的区别</h1><p>微信公众号和个人号是完全不同的。</p>
<p>微信对个人号的定位是普通用户之间的交流和通讯，微信并不鼓励和支持使用个人号进行营销推广(微信曾经大规模封杀好友过多的营销个人号）。</p>
<p>而公众号则完全是为品牌推广、信息推送等服务而定制的。使用公众号，可以向关注者（即粉丝)群发图文消息，粉丝在对话界面看到消息后，可以点击跳转到一个图文页面。公众号还提供关键词自动回复等基础功能，以此可以随时、自动的和粉丝进行互动。</p>
<p>除了这些基础功能之外，更大的区别是，微信针对公众号开放了很多程序接口。在这些接口的基础上，可以向粉丝提供更多的服务。此外，认证的服务号还可以申请微信支付。粉丝可以使用微信支付向进行付款（订购服务或购买商品）。所有这些，都是个人号不具备的。</p>
<p>微信公众号的注册几乎是没有门槛的。不过针对不同类型的公众号，微信提供的功能不同，资质要求也不一样。</p>
<h1 id="订阅号"><a href="#订阅号" class="headerlink" title="订阅号"></a>订阅号</h1><p>主要偏向于为用户传达资讯，（功能类似报纸杂志，为用户提供新闻信息或娱乐趣事），每天可群发1条消息；</p>
<p>适用人群：个人、媒体、企业、政府或其他组织。</p>
<h1 id="服务号"><a href="#服务号" class="headerlink" title="服务号"></a>服务号</h1><p>主要偏向于服务交互（功能类似12315，114，银行，提供绑定信息，服务交互），每月可群发4条消息；</p>
<p>适用人群：媒体、企业、政府或其他组织。</p>
<h1 id="微信认证"><a href="#微信认证" class="headerlink" title="微信认证"></a>微信认证</h1><p>微信认证是微信公众平台为了确保公众帐号的信息的真实性、安全性，目前提供给微信公众服务号进行微信认证的服务。</p>
<ul>
<li>微信认证后，获得更丰富的高级接口，向用户提供更有价值的个性化服务。</li>
<li>微信认证后，用户将在微信中看到微信认证特有的标识（公众帐号资料中“认证详情”中会展示认证资料、以及微信认证特有的标识，暂不支持取消。）。<br><img src="/images/wechat/authentication.png" alt="authentication.png"></li>
</ul>
<h1 id="账号类型区别"><a href="#账号类型区别" class="headerlink" title="账号类型区别"></a>账号类型区别</h1><p><img src="/images/wechat/differences.png" alt="differences.png"></p>
<h1 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h1><h2 id="注册网址"><a href="#注册网址" class="headerlink" title="注册网址"></a>注册网址</h2><p><a href="https://mp.weixin.qq.com/cgi-bin/readtemplate?t=register/step1_tmpl&amp;lang=zh_CN" target="_blank" rel="noopener">https://mp.weixin.qq.com/cgi-bin/readtemplate?t=register/step1_tmpl&amp;lang=zh_CN</a></p>
<h2 id="注册页面"><a href="#注册页面" class="headerlink" title="注册页面"></a>注册页面</h2><p><img src="/images/wechat/register.png" alt="register.png"></p>
<h2 id="账号类型选择页面"><a href="#账号类型选择页面" class="headerlink" title="账号类型选择页面"></a>账号类型选择页面</h2><p><img src="/images/wechat/type_select.png" alt="type_select.png"></p>
<h2 id="注册主体资料"><a href="#注册主体资料" class="headerlink" title="注册主体资料"></a>注册主体资料</h2><p><img src="/images/wechat/type_select.png" alt="type_select.png"></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 微信公众号 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring事务处理]]></title>
      <url>/2017/03/11/%E6%A1%86%E6%9E%B6%E8%A1%A5%E5%85%85/</url>
      <content type="html"><![CDATA[<p>基础复习</p>
<a id="more"></a>
<h2 id="什么是软件框架"><a href="#什么是软件框架" class="headerlink" title="什么是软件框架"></a>什么是软件框架</h2><p>软件框架（Software framework），通常指的是为了实现某个业界标准或完成特定基本任务的软件组件规范，也指为了实现某个软件组件规范时，提供规范所要求之基础功能的软件产品。</p>
<p>框架的功能类似于基础设施，与具体的软件应用无关，但是提供并实现最为基础的软件架构和体系。软件开发者通常依据特定的框架实现更为复杂的商业运用和业务逻辑。这样的软件应用可以在支持同一种框架的软件系统中运行。</p>
<hr>
<p>对于Spring框架来说：Spring是一套建筑标准，比如承重标准、丈量标准，通风标准等，并规范了结构：框架式结构，浇筑式结构，且定义了建筑的每个组成部分名字与接口，比如电力系统的接口是220v，通风系统的孔径必须符合ISO标准等。</p>
<p>攻城狮是建筑的设计师，在基础框架与标准下，设计出符合客户要求的建筑图纸，并决定了使用哪个厂家生产的水泥，砖块，和电力，通风等系统。</p>
<p>程序猿就是泥瓦匠，电工，依照图纸，完成各个部分的堆砌，安装，部署，装饰等等。说白了，程序猿就是一板砖的。</p>
<h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><p>所谓控制反转，就是把原先我们代码里面需要实现的对象创建、依赖的代码，反转给容器来帮忙实现。那么必然的我们需要创建一个容器，同时需要一种描述来让容器知道需要创建的对象与对象的关系。这个描述最具体表现就是我们可配置的文件。</p>
<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>面向切面编程，作为对面向对象的补充，广泛应用于处理一些具有横切性质的系统级服务，如事务管理、安全检查、缓存、对象池管理等。</p>
<h2 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h2><p>逻辑上的一组操作，这组操作要么全部成功，要么全部失败。</p>
<h2 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h2><p>事务有四大特性：原子性、一致性、隔离性、持久性。</p>
<ul>
<li>原子性是指事务是一个不可分割的工作单位，事务中的操作，要么都发生，要么都失败</li>
<li>一致性指的是事务前后数据完整性保持一致</li>
<li>隔离性是指一个用户事务进行时，不能受到其他事务的影响。（通过隔离级别处理）</li>
<li>持久性是指一个事务一旦被提交，它对数据库中数据的改变是永久性的，即使数据库发生故障也不应该对其有任何影响。</li>
</ul>
<h2 id="事务接口"><a href="#事务接口" class="headerlink" title="事务接口"></a>事务接口</h2><p>Spring为我们提供事务管理主要的接口，一共有三个</p>
<ul>
<li><p>事务管理器：PlatformTransactionManager</p>
</li>
<li><p>事务定义信息（隔离、传播、超时、只读）：TransactionDefinition</p>
</li>
<li><p>事务具体运行状态：TransactionStatus</p>
</li>
</ul>
<h2 id="事务具体运行状态（TransactionStatus）"><a href="#事务具体运行状态（TransactionStatus）" class="headerlink" title="事务具体运行状态（TransactionStatus）"></a>事务具体运行状态（TransactionStatus）</h2><p>TransactionStatus接口定义了获得和判断事物状态的方法</p>
<h2 id="事务管理器（PlatformTransactionManager）"><a href="#事务管理器（PlatformTransactionManager）" class="headerlink" title="事务管理器（PlatformTransactionManager）"></a>事务管理器（PlatformTransactionManager）</h2><p>Spring会根据持久层不同的实习选择不同的事务管理器</p>
<ul>
<li>DataSourceTransactionManager ： JDBC和MyBatis</li>
<li>HibernateTransactionManager ： Hibernate</li>
</ul>
<p>所以Spring处理MyBatis和JDBC的事务使用的是一样的方法，而Hibernate是另外一种实现方法</p>
<h2 id="事务定义信息（TransactionDefinition）"><a href="#事务定义信息（TransactionDefinition）" class="headerlink" title="事务定义信息（TransactionDefinition）"></a>事务定义信息（TransactionDefinition）</h2><ul>
<li><p>ISOLATION 开头定义的是事务的隔离级别</p>
</li>
<li><p>PROPAGATION 开头定义的是事务的传播行为</p>
</li>
<li><p>TIMEOUT 开头定义的是事务的超时信息</p>
</li>
</ul>
<h4 id="ISOLATION"><a href="#ISOLATION" class="headerlink" title="ISOLATION"></a>ISOLATION</h4><p>事务的隔离级别，主要是解决在实际开发中可能遇到的三个问题：</p>
<ul>
<li><p>脏读，A进行update、insert时候，B读取了中间状态不知道对不对的值；</p>
</li>
<li><p>不可重复读，B在A 的update操作前后，读到的数据不一致；</p>
</li>
<li><p>幻读，B在A的insert操作前后，读到了的数据不一致</p>
</li>
</ul>
<p><img src="/images/transaction/isolation.jpg" alt=""></p>
<p>MySQL底层采用的是REPEATABLE_READ隔离级别<br>Oracle底层采用的是READ_COMMITTED隔离级别</p>
<h4 id="PROPAGATION"><a href="#PROPAGATION" class="headerlink" title="PROPAGATION"></a>PROPAGATION</h4><p>事务的传播行为：主要是解决业务层方法之间的相互调用的问题(比如一个业务需求为同时调用A和B两个数据库操作)</p>
<p><img src="/images/transaction/propagation.jpg" alt=""></p>
<p>事务的传播行为有七种，又分为三类：<br>第一类共同点：如果 A 方法中有事务，则调用 B 方法时就用该事务，即：A和B方法在同一个事务中。<br>PROPAGATION_REQUIRED：如果 A 方法中没有事务，则调用 B 方法时就创建一个新的事务，即：A和B方法在同一个事务中。<br>PROPAGATION_SUPPORTS：如果 A 方法中没有事务，则调用 B 方法时就不使用该事务。<br>PROPAGATION_MANDATORY：如果 A 方法中没有事务，则调用 B 方法时就抛出异常。</p>
<p>第二类共同点：A方法和B方法没有在同一个事务里面。<br>PROPAGATION_REQUIRES_NEW：如果 A 方法中有事务，则挂起并新建一个事务给 B 方法。<br>PROPAGATION_NOT_SUPPORTED：如果 A 方法中有事务，则挂起。<br>PROPAGATION_NEVER：如果 A 方法中有事务，则报异常。</p>
<p>第三类：如果 A 方法有的事务执行完，设置一个保存点，如果 B 方法中事务执行失败，可以滚回保存点或初始状态。<br>PROPAGATION_NESTED ：如果当前事务存在，则嵌套事务执行</p>
]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot踩坑之路三 ]]></title>
      <url>/2017/02/26/SpringBoot%E8%B8%A9%E5%9D%91%E4%B9%8B%E8%B7%AF%E4%B8%89/</url>
      <content type="html"><![CDATA[<p>使用JPA进行CRUD以及IDEA 中 Devtools热部署配置<br><a id="more"></a></p>
<h2 id="Spring-Boot进行简单的CRUD"><a href="#Spring-Boot进行简单的CRUD" class="headerlink" title="Spring Boot进行简单的CRUD"></a>Spring Boot进行简单的CRUD</h2><p>只需要定义一个repository继承<code>PagingAndSortingRepository</code>、<code>PagingAndSortingRepository</code>或<code>JpaRepository</code>就可以使用Spring Data为我们提供的CRUD。三个接口都是做数据操作的，下面解释了他们三个的区别，我们应该根据需求灵活使用。</p>
<p><code>JpaRepository</code>继承了<code>PagingAndSortingRepository</code>，<code>PagingAndSortingRepository</code>继承了<code>CrudRepository</code> </p>
<p>他们的主要功能是：</p>
<p><code>CrudRepository</code> 提供主要的CRUD方法</p>
<p><code>PagingAndSortingRepository</code> 提供分页和排序的方法</p>
<p><code>JpaRepository</code> 提供一些JPA关联方法，比如批量删除数据</p>
<p>因为上述的继承关系，<code>JpaRepository</code>拥有<code>PagingAndSortingRepository</code>和<code>CrudRepository</code> 的所有方法。所以如果你不需要<code>JpaRepository</code>和<code>PagingAndSortingRepository</code>提供的方法的话，请使用<code>CrudRepository</code></p>
<h2 id="Spring-Boot-IDEA-热部署"><a href="#Spring-Boot-IDEA-热部署" class="headerlink" title="Spring Boot IDEA 热部署"></a>Spring Boot IDEA 热部署</h2><p>首先要对IDEA进行必要配置，否则热部署不起作用</p>
<h4 id="IDEA自动构建"><a href="#IDEA自动构建" class="headerlink" title="IDEA自动构建"></a>IDEA自动构建</h4><p><img src="http://upload-images.jianshu.io/upload_images/3993341-5ead03b8ddd353bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="IDEA Compiler配置"></p>
<h4 id="修改IDEA注册信息"><a href="#修改IDEA注册信息" class="headerlink" title="修改IDEA注册信息"></a>修改IDEA注册信息</h4><p>输入命令Ctrl + Shift + A 然后搜索registry回车</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3993341-5ec070235d9a2a91.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="修改IDEA注册信息"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/3993341-4c9db9a309e226de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="修改IDEA注册信息"></p>
<h4 id="添加devtools依赖"><a href="#添加devtools依赖" class="headerlink" title="添加devtools依赖"></a>添加devtools依赖</h4><p>添加依赖，重启项目，然后试着修改java文件，自动重新部署成功<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[环境整理]]></title>
      <url>/2017/02/20/%E7%8E%AF%E5%A2%83%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<p>刚过完年，公司也没什么比较忙的需求。于是请了个长假回家参加我老哥婚礼，顺便去看看老同学，老同事。玩的倒是很Happy，但是回到自己的小窝发现，<br><a id="more"></a><br>跟了我5年的dell终于扛不住了，之后三下五除二重新安了个系统。但是一些编辑器，软件的下载配置都得告诉度娘重新安过。为了防止以后再出现这种情况，整理一下所需的资源和配置。</p>
<h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><p>第一步翻墙：<a href="https://laod.cn/hosts/2017-google-hosts.html" target="_blank" rel="noopener">一直用老D</a><br>第二步下浏览器安装：<a href="http://www.google.cn/chrome/browser/desktop/index.html" target="_blank" rel="noopener">Chrome</a></p>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">JDK下载地址</a><br>作为一名Java码农，第一件事当然是安装JDK配置和环境变量啦。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">NAME : JAVA_HOME</div><div class="line">VALUE : JDK路径（以‘\’结尾,防止一些编辑器不识别）</div><div class="line"></div><div class="line">NAME : Path</div><div class="line">VALUE : %JAVA_HOME%\bin;</div></pre></td></tr></table></figure>
<h2 id="IDEA编辑器"><a href="#IDEA编辑器" class="headerlink" title="IDEA编辑器"></a>IDEA编辑器</h2><p>一个合格码农当然要跟上时代的潮流(虽然公司用的还是eclipse)</p>
<p><a href="https://www.jetbrains.com/idea/download/download-thanks.html" target="_blank" rel="noopener">IDEA下载地址</a><br><a href="http://idea.lanyus.com/" target="_blank" rel="noopener">激活方法</a></p>
<h2 id="Sublime编辑器"><a href="#Sublime编辑器" class="headerlink" title="Sublime编辑器"></a>Sublime编辑器</h2><p>写前端还是Sublime最舒服</p>
<p><a href="http://www.sublimetext.com/" target="_blank" rel="noopener">下载地址</a></p>
<p><a href="https://github.com/jikeytang/sublime-text" target="_blank" rel="noopener">插件安装</a></p>
<p>我常用的有：</p>
<ul>
<li>Emmet <a href="http://www.iteye.com/news/27580" target="_blank" rel="noopener">中文文档</a></li>
<li>Side Bar</li>
<li>Terminal Ctrl + Shift + T</li>
<li>Sublime Linter</li>
<li>advance new file Ctrl + Alt + N</li>
<li>Color Picker Ctrl + Shift + C 需要.net framework 4.0支持</li>
<li>Markdown Preview Ctrl + Shift + P -&gt; markdown</li>
</ul>
<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">下载地址</a></p>
<p>由于重新安装了系统，连接Github的SSH当然要更新啦</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;abcd&quot;</div><div class="line">$ git config --global user.email abcd@efgh.com</div><div class="line"></div><div class="line">$ ssh-keygen -t rsa -C &quot;abcd@efgh.com&quot; //邮箱同上</div><div class="line"></div><div class="line"></div><div class="line">复制公钥id_rsa.pub</div><div class="line">到github网页中登陆自己的账号，然后再account setting中，找到SSH KEY讲复制的密钥加入（需要再次输入github的密码）</div></pre></td></tr></table></figure>
<h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><p>博客必备</p>
<p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">下载地址</a></p>
<p>安装Hexo：npm install -g hexo<br>可以继续更新博客啦</p>
<p><a href="https://www.zhihu.com/question/21193762" target="_blank" rel="noopener">参考链接</a></p>
<h2 id="Evernote"><a href="#Evernote" class="headerlink" title="Evernote"></a>Evernote</h2><p>配合简书使用哒</p>
<p><a href="https://www.yinxiang.com/" target="_blank" rel="noopener">在线网址</a></p>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p><a href="https://www.mysql.com/downloads/" target="_blank" rel="noopener">下载地址</a></p>
<p>自己电脑安装的是MySQL，好用又省事</p>
<h2 id="播放器"><a href="#播放器" class="headerlink" title="播放器"></a>播放器</h2><p>视频：最爱POTPLAYER,简介美观。<a href="http://potplayer.daum.net/?lang=zh_CN" target="_blank" rel="noopener">下载地址</a><br>音乐：网易云音乐，<a href="http://music.163.com/#/download" target="_blank" rel="noopener">下载地址</a></p>
<h2 id="QQ微信"><a href="#QQ微信" class="headerlink" title="QQ微信"></a>QQ微信</h2><p>O(∩_∩)O哈哈~</p>
]]></content>
      
        <categories>
            
            <category> 备份 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 备份 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Boot踩坑之路二]]></title>
      <url>/2017/02/04/Spring-Boot%E8%B8%A9%E5%9D%91%E4%B9%8B%E8%B7%AF%E4%BA%8C/</url>
      <content type="html"><![CDATA[<p>上篇文章使用Maven构建项目并成功运行hello，让我初步感受Spring Boot的强大。本次我将使用更优雅的方式创建Spring Boot项目并学习它对数据库的相关操作<br><a id="more"></a></p>
<h2 id="更优雅的创建Spring-Boot项目"><a href="#更优雅的创建Spring-Boot项目" class="headerlink" title="更优雅的创建Spring Boot项目"></a>更优雅的创建Spring Boot项目</h2><p>上篇文章的方法是建立Maven项目、配置pom.xml、建立application类。当用到的开源项目多的时候，每次配置pom.xml很会很麻烦。使用IDEA为我们提供的Spring Initializr可以快速创建Spring Boot项目，我们将不再需要之前繁琐的步骤</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3993341-80127001e8d9aa1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Spring Initializr"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/3993341-b00901b482a12878.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Spring Initializr"></p>
<p>按需选择，一路next之后，一个结构完整的Spring Boot项目就建立成功。看下生成的pom文件。我们需要的最基本的配置已经生成完毕，并且还贴心的添加了测试依赖</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.app<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Spring-Boot-JPA"><a href="#Spring-Boot-JPA" class="headerlink" title="Spring Boot JPA"></a>Spring Boot JPA</h2><p>回归主题，Spring Boot是如何操作数据库的呢，本次以Oracle数据库为例介绍Spring Boot的JPA操作（Hibernate版）</p>
<h4 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h4><p>添加依赖(需要添加两个依赖，一个是Spring Boot操作数据库的依赖，还有一个是数据库驱动)<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">&lt;!--Spring Boot java persist API dependency--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Oracle数据库驱动 --&gt;</span></div><div class="line">  <span class="comment">&lt;!-- Oracle Driver Dependency which located in local repository --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oracle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ojdbc6<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>11.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- MySql 驱动，maven官方就有，无需本地添加</span></div><div class="line">&lt;dependency&gt;</div><div class="line">   &lt;groupId&gt;mysql&lt;/groupId&gt;</div><div class="line">   &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">--&gt;</div></pre></td></tr></table></figure></p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>由于商业版权和版本的问题，Maven中心仓库并不支持Oracle驱动包，所以需要根据自己的Oracle进行手动安装</p>
<p>首先从Oracle安装目录中找到本地Oracle驱动，以我为例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">E:\app\Administrator\product\11.2.0\dbhome_1\jdbc\lib</div></pre></td></tr></table></figure></p>
<p>进入我的路径将ojdbc添加到本地Maven仓库<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mvn install:install-file -DgroupId=com.oracle -DartifactId=ojdbc6 -Dversion=<span class="number">11</span>.<span class="number">2</span>.<span class="number">0</span>.<span class="number">1</span>.<span class="number">0</span> -Dpackaging=jar -Dfile=ojdbc6.jar</div><div class="line">-- 指定坐标、打包格式、打包文件</div></pre></td></tr></table></figure></p>
<p>回车安装，安装完成会如下图所示</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3993341-75da8eeab2128f51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Maven添加jar包到本地仓库"></p>
<p>至此关于JPA的依赖配置就完成了</p>
<h4 id="添加属性配置"><a href="#添加属性配置" class="headerlink" title="添加属性配置"></a>添加属性配置</h4><p>加载了SpringBoot连接和驱动依赖当然不能让我们连接到数据库，我们还需要告诉Spring Boot一些数据库连接信息</p>
<p>我们只需要在application.properties文件中添加就可以了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 基本的连接信息，指定数据源</div><div class="line">spring.datasource.url = jdbc:oracle:thin:@127.0.0.1:1521:orcl</div><div class="line">spring.datasource.username = scott</div><div class="line">spring.datasource.password = orcl</div><div class="line">spring.datasource.driverClassName = oracle.jdbc.OracleDriver</div><div class="line"></div><div class="line"># java持久化API Hibernate配置模式</div><div class="line">spring.jpa.hibernate.ddl-auto = update</div></pre></td></tr></table></figure></p>
<h4 id="新建实体类，并交给Hibernate-维护"><a href="#新建实体类，并交给Hibernate-维护" class="headerlink" title="新建实体类，并交给Hibernate 维护"></a>新建实体类，并交给Hibernate 维护</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.entity;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.persistence.*;</div><div class="line"></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name = <span class="string">"demo_user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span> <span class="meta">@GeneratedValue</span>(strategy = GenerationType.SEQUENCE,generator = <span class="string">"seq_user"</span>)</div><div class="line">    <span class="meta">@SequenceGenerator</span>(name = <span class="string">"seq_user"</span>,sequenceName = <span class="string">"seq_user"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">private</span> String userName;</div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> userName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.userName = userName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.password = password;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后启动项目，是不是发现数据库里面多了个<code>demo_user</code>表了呢</p>
<h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><p>安装完成ojdbc驱动在pom.xml中引用仍然无效</p>
<blockquote>
<p>创建项目的时候选择了默认C盘.m2下的仓库，而我的Maven仓库配置在D盘，所以安装的驱动的时候安装到了D盘的仓库，使用的却是系统默认的仓库，尴尬-_-!</p>
</blockquote>
<p>在全部配置好之后启动工程会把表建立出来，但是当再次启动的时候竟然报了<code>对象已由现有名称引用</code>异常</p>
<blockquote>
<p>通过log观察，他又执行了一次建表语句。我多次检查自己的配置，确实是<code>spring.jpa.hibernate.ddl-auto = update</code>没问题。到网上查了半天，也没找到有相似问题的结果。出去吹个风，回来发现我需要引用的驱动jar包是ojdbc6，而在pom中引入的是服务器数据库的ojdbc14。白白浪费了这么长时间&lt;(￣3￣)&gt; 。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Boot踩坑之路一]]></title>
      <url>/2017/02/02/SpringBoot%E8%B8%A9%E5%9D%91%E4%B9%8B%E8%B7%AF%E4%B8%80/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Takes an opinionated view of building production-ready Spring applications. Spring Boot favors convention over configuration and is designed to get you up and running as quickly as possible.</p>
</blockquote>
<p>旨在简化创建产品级的 Spring应用和服务。Spring Boot 引导优先于配置，它可以让你避免繁杂的配置，尽可能的帮助你快速建站。<br><a id="more"></a></p>
<h4 id="为什么使用Spring-Boot"><a href="#为什么使用Spring-Boot" class="headerlink" title="为什么使用Spring Boot"></a>为什么使用Spring Boot</h4><p>经过十多年的发展Spring家族已经壮大，要灵活使用Spring家族的产品已经变得有些困难，尤其是要维护一大堆的配置文件，在项目开发中令人头疼。Spring Boot解决了这个问题，并大大简化了我们的开发成本</p>
<p><b>其优点如下:</b></p>
<ul>
<li>不用看一大坨的xml。用java config可以让你很容易明白一些框架的关键</li>
<li>Spring Boot 要解决的问题, 精简配置是一方面, 另外一方面是如何方便的让spring生态圈和其他工具链整合(比如redis, email, elecsearch)</li>
<li>配合各种starter使用，基本上可以做到自动化配置</li>
<li>配合Maven或Gradle等构件工具打成Jar包后，Java -jar 简化部署运行</li>
</ul>
<h4 id="建立maven-web项目"><a href="#建立maven-web项目" class="headerlink" title="建立maven web项目"></a>建立maven web项目</h4><p>使用maven建立web项目，并参考官方文档进行版本选择和pom配置</p>
<p><a href="https://projects.spring.io/spring-boot/#quick-start" target="_blank" rel="noopener">官方maven配置，请根据需求选择版本</a></p>
<h4 id="POM中添加parent标签"><a href="#POM中添加parent标签" class="headerlink" title="POM中添加parent标签"></a>POM中添加parent标签</h4><p>添加parent后添加相关依赖不需要version<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><p>web工程的依赖，包括spring mvc tomcat等，spring boot会在需要时使用<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="添加插件"><a href="#添加插件" class="headerlink" title="添加插件"></a>添加插件</h4><p>用来在main方法中启动工程<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin <span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="编写代码-HELLO-WORLD"><a href="#编写代码-HELLO-WORLD" class="headerlink" title="编写代码 HELLO WORLD"></a>编写代码 HELLO WORLD</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 其中@SpringBootApplication申明让spring boot自动给程序进行必要的配置，等价于使用@Configuration，@EnableAutoConfiguration和@ComponentScan</span></div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Hello World"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(HelloWorld.class,args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="检验成果"><a href="#检验成果" class="headerlink" title="检验成果"></a>检验成果</h4><p>运行main函数之后访问<a href="http://localhost:8080/即可看到结果" target="_blank" rel="noopener">http://localhost:8080/即可看到结果</a></p>
<p><img src="/images/springboot/springboot_helloworld.png" alt=""></p>
<h4 id="我遇到的问题"><a href="#我遇到的问题" class="headerlink" title="我遇到的问题"></a>我遇到的问题</h4><p>问题出现在我建立maven项目编写java代码的时候在默认包中写的application类，并没有建立包。这种做法让Spring Boot每次都会扫描默认类及下属的所有类，浪费大量时间。所以在启动时会报警告，启动不成功</p>
<p>Your <code>Application</code> class should be placed in a specific package and not in the default (top-level) package. For example, put it in <code>com.example</code> and place all your application code in this package or in sub-packages like <code>com.example.foo</code> and <code>com.example.bar</code>.</p>
<p>Placing your <code>Application</code> class in the default package, i.e. directly in <code>src/main/java</code> isn’t a good idea and it will almost certainly cause your application to fail to start. If you do so, you should see this warning:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">** WARNING ** : Your ApplicationContext is unlikely to start due to a @ComponentScan of the default package.</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java虚拟机]]></title>
      <url>/2017/02/02/java-virtual-machine01/</url>
      <content type="html"><![CDATA[<h2 id="跨平台的含义"><a href="#跨平台的含义" class="headerlink" title="跨平台的含义"></a>跨平台的含义</h2><p>Java的跨平台是“一次编译，到处运行”。Java在编译的时候没有编译成指定CPU类型的汇编代码，也没有和具体操作系统的系统调用相关联，所以编译出来的结果是和CPU，操作系统都不相关的。Java编译出来的是一种字节码，这种字节码必须在Java的虚拟机上才能运行，Java虚拟机会屏蔽不同操作系统，CPU之间的差异。<br><a id="more"></a><br>C编译出来后，就是指定CPU类型的汇编代码，编译过程中肯定也要和具体操作系统的系统库相关连，所以做不到Java那种跨平台。但是，如果写的C代码，没有直接调用任何系统调用，这个代码在不同的平台下都能编译，也能运行。和Java的区别是，C要在不同平台上分别编译。</p>
<p>有些语言如JavaScript，Python等，他们是解释执行的，不存在编译过程，所以也能跨平台，前提是必须要有一个对应的解释器，PHP好像也是解释性的。</p>
<h2 id="了解虚拟机"><a href="#了解虚拟机" class="headerlink" title="了解虚拟机"></a>了解虚拟机</h2><p>当用户量达到一定数量的时候，程序就很有可能出现各种问题（缓慢，死锁等）一般情况下，企业都会通过提升硬件配置的方法尝试解决问题，但对于运行在JVM 上的 java来说，如果不了解JVM的运行原理，单纯的提升硬件配置很有可能对问题的解决改善很小，甚至没有改善</p>
<h2 id="Java技术体系"><a href="#Java技术体系" class="headerlink" title="Java技术体系"></a>Java技术体系</h2><p>由SUN公司官方定义：</p>
<ul>
<li>Java程序设计语言</li>
<li>各种硬件平台上的Java虚拟机</li>
<li>Class文件</li>
<li>Java API类库</li>
<li>来自商业机构或开源社区的Java类库<br><img src="/images/virtualMachine/javaTS.jpg" alt=""></li>
</ul>
<p><img src="/images/virtualMachine/javaHistory.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Maven配置解析与依赖传递]]></title>
      <url>/2017/01/24/Maven%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90%E4%B8%8E%E4%BE%9D%E8%B5%96%E4%BC%A0%E9%80%92/</url>
      <content type="html"><![CDATA[<p>Maven的核心配置文件pom.xml的解析与其依赖传递特性,并简单介绍Maven在Web开发中的配置操作过程</p>
<hr>
<p>Maven安装本地jar备忘<br>mvn install:install-file -Dfile=jar包的位置 -DgroupId=上面的groupId -DartifactId=上面的artifactId -Dversion=上面的version -Dpackaging=jar<br><a id="more"></a></p>
<hr>
<h2 id="pom-xml解析"><a href="#pom-xml解析" class="headerlink" title="pom.xml解析"></a>pom.xml解析</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>项目的描述名<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>项目的地址<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>项目描述<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">developers</span>&gt;</span>开发人员信息<span class="tag">&lt;/<span class="name">developers</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">licenses</span>&gt;</span>许可证信息<span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 依赖列表 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 依赖项 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--指定坐标--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>反写公司网址+项目名<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>项目名+模块名<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>版本0.0.0（大版本+分支版本+小版本）<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>类型<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>依赖的范围<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>设置依赖是否可选，默认是false<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 排除依赖传递列表 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 依赖的管理，一般定义在父模块中，由子模块去继承 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 对构建行为提供相应的支持 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 插件列表 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 指定坐标 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>反写公司网址+项目名<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>项目名+模块名<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>版本0.0.0（大版本+分支版本+小版本）<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 一般在子模块中指定所继承的父模块 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 继承后拥有父模块的特性 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 模块列表 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span><span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--作用域--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">    scope作用域简介</div><div class="line">    1.compile：默认范围，编译测试运行都有效</div><div class="line">    2.provided：在编译和测试时有效</div><div class="line">    3.runtime：在测试和运行时有效</div><div class="line">    4.test:只在测试时有效</div><div class="line">    5.system:在编译和测试时有效，与本机系统关联，可移植性差</div><div class="line">    6.import:导入的范围，它只使用在dependencyManagement中，表示从其他的pom中导入dependency的配置</div><div class="line">--&gt;</div></pre></td></tr></table></figure>
<h2 id="Maven依赖传递"><a href="#Maven依赖传递" class="headerlink" title="Maven依赖传递"></a>Maven依赖传递</h2><p>假设B项目依赖A项目，C项目又依赖B项目，那么在C项目中运行compile时，在引进B项目的同时，自动就把A项目也引进来了。如果不想将A项目导入的话，可以使用exclusions下设置exclusion，然后将A项目的坐标添加即可。</p>
<p>Ps：可以在settings.xml中的profile结点，来更改默认的Maven使用的jdk版本，否则将显示默认的1.5版本。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.7<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">activation</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="依赖冲突"><a href="#依赖冲突" class="headerlink" title="依赖冲突"></a>依赖冲突</h2><p>如果A和B依赖了一个不同版本的相同的构件C。</p>
<h2 id="短路优先"><a href="#短路优先" class="headerlink" title="短路优先"></a>短路优先</h2><p>会优先解析路径短的版本。<br>A -&gt; B -&gt; C -&gt; X(jar)<br>A -&gt; D -&gt; X(jar) 优先解析短的</p>
<h2 id="先声明先优先"><a href="#先声明先优先" class="headerlink" title="先声明先优先"></a>先声明先优先</h2><p>如果路径长度相同，则谁先声明，先解析谁。</p>
<h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><p>如果项目D依赖项目C，项目C依赖项目B，项目B依赖项目A，我们需要一个个安装这项项目，在Maven中有一种方式可以将多个项目一次性安装，这就是聚合的概念。</p>
<p>简单讲就是，需要人工多次操作的，只要Maven能理解，一次性告诉他，他就能帮我们做这件单调烦人的事情了。<br>使用<code>&lt;modules&gt;&lt;/modules&gt;</code>这个标签</p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>多次使用到的依赖，比如：单元测试，没有必要在所有的项目中都引用一下，此时就可以采用继承的方式来实现，先来一个父级的POM.XML然后再继承此POM.XML。使用<code>&lt;parent&gt;</code>标签</p>
<h2 id="Maven-配置web项目实例"><a href="#Maven-配置web项目实例" class="headerlink" title="Maven 配置web项目实例"></a>Maven 配置web项目实例</h2><p>1：打开Eclipse</p>
<p>2：创建Maven项目，选择archetype-webapp模板</p>
<p>3：解决Servlet没有生命依赖的问题，在pom.xml中添加servlet的依赖，可以去中央仓库选择servlet版本<br>例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0-b01<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>4：手工完善Maven约定好的目录结构<br>可以在navigator窗口中手动新建<br>../src/main/java<br>../src/test/java</p>
<p>5：Project Explorer中更新项目</p>
<p>6：创建项目的输出目录<br>build path中设置输出路径output folder，确保每个module都输出在../tartet/classes目录中</p>
<p>7：将Maven项目转换为Web项目<br>右击-属性-project facets-勾选动态模板（Dynamic Web Module）</p>
<p>8：修改部署时配置去掉多余的配置项例如：测试代码<br>右击-属性-Deployment Assembly-删除多余的配置项（测试代码）</p>
<p>9：使用package命令打包项目—使用jetty这个插件（在Maven的中央插件库中寻找）作为Web容器，在中央仓库查找jetty的plugin坐标配置到pom.xml中</p>
<p>pom.xml例子：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>webbproject-demo<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>run<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 项目管理 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Maven </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Maven的IDE集成使用与生命周期]]></title>
      <url>/2017/01/19/Maven%E7%9A%84IDE%E9%9B%86%E6%88%90%E4%BD%BF%E7%94%A8%E4%B8%8E%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      <content type="html"><![CDATA[<p>在实际开发中，我们不是使用命令行或者记事本，而是使用诸如IDEA或者Eclipse的IDE进行开发，本文将介绍Maven与IDE集成和使用以及Maven的生命周期<br><a id="more"></a></p>
<h2 id="在eclipse中安装maven插件以及创建maven项目"><a href="#在eclipse中安装maven插件以及创建maven项目" class="headerlink" title="在eclipse中安装maven插件以及创建maven项目"></a>在eclipse中安装maven插件以及创建maven项目</h2><p>由于IDEA默认集成Maven所以不做介绍</p>
<p>1: 在eclipse4.0及MyEclipse中就不需要安装maven插件，在window–preference中可以查看是否有maven插件，没有的话就需要安装Maven插件，直接复制Maven插件到eclipse安装目录中的dropins中，然后修改eclipse.<br>ini,在这个文件里的512m后面添加-vm,换行，再添加jdk/bin/javaw.exe保存。</p>
<p><img src="/images/maven/maven-eclipse-01.jpg" alt=""></p>
<p>2: eclipse是默认运行在jre之上的而maven需要jdk的支持，需要tools.jar在jdk/lib目录中，所以修改eclipse的JRE，java—Installed JREs–ADD–Next–把本地JDK的目录放到JRE home中，并设置Dmaven.multiModuleProjectDirectory=$M2_HOME–最后勾选JDK</p>
<p><img src="/images/maven/maven-eclipse-02.jpg" alt=""></p>
<p>3: 更改maven本地的配置Installactions—ADD—把本地的maven目录放进去</p>
<p>4: 修改setting的路径</p>
<p><img src="/images/maven/maven-eclipse-03.jpg" alt=""></p>
<h3 id="集成时遇到的问题"><a href="#集成时遇到的问题" class="headerlink" title="集成时遇到的问题"></a>集成时遇到的问题</h3><p>如果版本不匹配 则mvn -v查看maven的jdk版本，然后在eclipse中配置当前使用的jdk</p>
<p>Eclipse中run as–&gt;Maven build…–&gt;在goals中compile（可以在此处使用其他的命令，如：package）—&gt;run<br>若报-Dmaven.multiModuleProjectDirectory错误，则在选项–&gt;java–&gt;installed JRES 中设置jdk的参数，添加上“-Dmaven.multiModuleProjectDirectory=$M2_HOME”</p>
<p><img src="/images/maven/maven-eclipse-04.jpg" alt=""></p>
<h2 id="Maven的生命周期和插件"><a href="#Maven的生命周期和插件" class="headerlink" title="Maven的生命周期和插件"></a>Maven的生命周期和插件</h2><p>Maven的生命周期大概如下：</p>
<p>clean compile test package install</p>
<p>这几个命令对应了一个项目的完整的构建过程，这几个步骤对应的都有插件来完成：<br>清理、编译、测试、打包、集成测试、验证、部署</p>
<p>Maven的生命周期分为三个独立的生命周期（每一个生命周期有分为若干个阶段，其中defaul是最核心的一个）：</p>
<ol>
<li>clean 清理项目</li>
<li>default 构建项目</li>
<li>site 生成项目的站点</li>
</ol>
<h4 id="clean-清理项目："><a href="#clean-清理项目：" class="headerlink" title="clean 清理项目："></a>clean 清理项目：</h4><p>pre-clean ：执行清理前的工作<br>clean：清理上一次构建生成的所有文件<br>post-clean：执行清理后的文件</p>
<h4 id="default构建项目（最核心）"><a href="#default构建项目（最核心）" class="headerlink" title="default构建项目（最核心）"></a>default构建项目（最核心）</h4><p>compile test package install</p>
<h4 id="site-生成项目站点"><a href="#site-生成项目站点" class="headerlink" title="site 生成项目站点"></a>site 生成项目站点</h4><p>pre-site 在生成项目站点之前要完成的工作<br>site 生成项目的站点文档<br>post-site在生成项目站点后要完成的工作<br>site-deploy发布生成的站点到服务器上</p>
<p>注意：Maven的生命周期对应的命令是顺序执行的，如果没有人为的顺序的一个个执行，那么Maven会默认的自动运行。</p>
]]></content>
      
        <categories>
            
            <category> 项目管理 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Maven </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java注解]]></title>
      <url>/2017/01/11/Java%E6%B3%A8%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>学习注解最重要的就是弄清楚，为什么学习注解？学习注解的好处？学完能做什么？<br>1、能够读懂别人写的代码，特别是框架相关的代码；<br>2、能让编程更加简洁，代码更加清晰；<br><a id="more"></a></p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>注解是Java提供的一种 源程序中的元素关联任何信息和任何元数据的途径和方法。</p>
<h2 id="按来源分类注解"><a href="#按来源分类注解" class="headerlink" title="按来源分类注解"></a>按来源分类注解</h2><ul>
<li>java自带注解—— @Override 覆盖了父类的方法、@Deprecation 表示方法已经过时、@Suppvisewarnings 用于通知java编译器忽略特定的编译警告</li>
<li>第三方注解—— 种类很多，Spring的@Resource Hibernate 的@Entity等等</li>
<li>自定义注解—— 自定义注解的结构：元注解（用来注解注解的）、@接口定义、无参无异常的成员方法的定义（成员类型受限：基本数据类型、String、枚举）</li>
</ul>
<h2 id="按照运行机制分类注解"><a href="#按照运行机制分类注解" class="headerlink" title="按照运行机制分类注解"></a>按照运行机制分类注解</h2><ol>
<li>源码注解——注解只在源码中存在，编译程.class文件时就不存在了</li>
<li>编译时注解——注解在源码和.class文件都会存在的，JDK自带的注解都是编译时注解</li>
<li>运行时注解——在运行阶段还起作用，甚至会影响运行逻辑的注解，比如：@Autowired。</li>
</ol>
<h2 id="学会自定义注解"><a href="#学会自定义注解" class="headerlink" title="学会自定义注解"></a>学会自定义注解</h2><p>学习注解最终就是要把他应用的实际中，其中看懂注解固然重要，会自定义注解并在实际项目中解决问题也不可忽视</p>
<p>要自定义注解就要先了解下面的的元注解：</p>
<ul>
<li>@Target—作用域（constructor(构造方法声明)，field（字段声明），local_variable（局部变量声明），method（方法声明），package（包声明），parameter（参数声明），type（类，接口声明））</li>
<li>@Retention—生命周期（source：只在源码显示，编译时会丢弃。class：编译时会记录到class中，运行时忽略。runtime：运行时存在，可以通过反射读取）</li>
<li>Inherited—标识注解(允许子类继承)</li>
<li>Documented—生成Javadoc</li>
</ul>
<p>下面看一个自定义注解的实例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD,&#125;) <span class="comment">//作用域(控制注解能被用在什么地方)</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME) <span class="comment">//生命周期</span></div><div class="line"><span class="meta">@Inherited</span> <span class="comment">//标识注解(允许子类继承)</span></div><div class="line"><span class="meta">@Documented</span> <span class="comment">//生成javadoc会生成注解信息</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Description &#123;</div><div class="line">    <span class="comment">//1.类型受限制，包括基本类型及String、Class、Annotation、Enumeration</span></div><div class="line">    <span class="comment">//2.若只有一个成员，则名称必须为value(),使用时可以忽略成员名和赋值号(=)</span></div><div class="line">    <span class="comment">//3.注解类可以没有成员，称为标识注解</span></div><div class="line">    <span class="comment">//4成员无参且无异常声明</span></div><div class="line">    <span class="function">String <span class="title">desc</span><span class="params">()</span></span>;</div><div class="line">    <span class="function">String <span class="title">author</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">//5可指定默认值</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> <span class="keyword">default</span> 18</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Description&#123;</div><div class="line">    String desc;</div><div class="line">    String author;</div><div class="line">    <span class="keyword">int</span> age <span class="keyword">default</span> <span class="number">18</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="解析注解"><a href="#解析注解" class="headerlink" title="解析注解"></a>解析注解</h2><p>概念：通过反射获取类、函数或成员上的运行时注解信息，从而实现动态控制程序运行的逻辑。</p>
<p>只是定义注解而不解析是没有任何用处的，解析注解为注解学习的核心，最主要的是了解两个方法<code>isAnnotationPresent</code>和<code>getAnnotation</code></p>
<p>@Inherited（子类是否可继承） 对接口interface、方法继承没有作用，对类才有效。<br>通过反射回去类，函数或成员以上的运行时的注解信息从而实现动态控制程序运行的逻辑</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.使用类加载器加载类</span></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    Class c = Class.forName(<span class="string">"com.ann.test.Child"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//2.找到类上的注解</span></div><div class="line">    <span class="keyword">boolean</span> isExist = c.isAnnotationPresent(Description.class);</div><div class="line">    <span class="keyword">if</span>(isExist)&#123;</div><div class="line">        <span class="comment">//3.拿到注解实例</span></div><div class="line">        Description d = (Description)c.getAnnotation(Description.class);</div><div class="line">        System.out.println(d.value());</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//4.找到方法上的注解</span></div><div class="line">    Method[] ms = c.getMethods();</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(Method m:ms)&#123;</div><div class="line">        <span class="keyword">boolean</span> isMExist = m.isAnnotationPresent(Description.class);</div><div class="line">        <span class="keyword">if</span>(isMExist)&#123;</div><div class="line">            Description d = m.getAnnotation(Description.class);</div><div class="line">            System.out.println(d.value());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//另外一种解析方法</span></div><div class="line">    <span class="keyword">for</span>(Method m:ms)&#123;</div><div class="line">        Annotation[] as = m.getAnnotations();</div><div class="line">        <span class="keyword">for</span>(Annotation a:as)&#123;</div><div class="line">        <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Description)&#123;</div><div class="line">            Description d = (Description)a;</div><div class="line">            System.out.println(d.value());</div><div class="line">        &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>学会自定义并解析注解后我们就可以在项目中灵活的使用注解功能了</p>
]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[初识Maven]]></title>
      <url>/2017/01/04/Maven/</url>
      <content type="html"><![CDATA[<p>试想一下，当我们要开展一个新项目的时候。我们第一步就是搭建环境。要从各大官网找jar包、下载jar包、然后分辨重复的、是否有用的、最后放到项目中，项目还没开始就要放几十个jar包，还可能在开发时因为少放了一个而出各种bug，这样做维护时间和成本都很高。Maven可以很好的帮助我们管理jar包，这也就是我们要学习并使用Maven的原因</p>
<a id="more"></a>
<h2 id="什么是Maven"><a href="#什么是Maven" class="headerlink" title="什么是Maven"></a>什么是Maven</h2><p>Maven是基于项目对象模型（POM），可以通过一小段描述信息来管理项目的构建、报告和文档的软件项目管理工具。</p>
<p>Maven是自动化构建工具，可以管理第三方的jar包。</p>
<h2 id="Maven源文件的目录结构"><a href="#Maven源文件的目录结构" class="headerlink" title="Maven源文件的目录结构"></a>Maven源文件的目录结构</h2><p>要使用Maven，首先要到官网下载Maven</p>
<p><a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">Maven官网下载地址</a></p>
<p>下载完成后解压如下图<br><img src="/images/maven/maven-catalog.png" alt=""></p>
<p>bin目录包含Maven的运行脚本<br>boot目录包含一个类加载器的框架，Maven使用它来加载自己的类库<br>conf是配置文件目录<br>lib是类库（自身及第三方）</p>
<p>此时Maven已经安装到电脑中，打开CMD，进入bin目录输入mvn -v即可查看Maven版本。当然为了方便使用，最好把Maven配置到环境变量中，一般命名为M2_HOME（配置方法和JAVA_HOME一样）</p>
<h2 id="Maven项目的目录结构"><a href="#Maven项目的目录结构" class="headerlink" title="Maven项目的目录结构"></a>Maven项目的目录结构</h2><p>使用Maven构建项目时要遵守Maven的目录结构，如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">src</div><div class="line">     -main</div><div class="line">          -java</div><div class="line">               -package</div><div class="line">     -test</div><div class="line">          -java</div><div class="line">               -package</div><div class="line">     resources</div></pre></td></tr></table></figure>
<h2 id="Maven常用命令"><a href="#Maven常用命令" class="headerlink" title="Maven常用命令"></a>Maven常用命令</h2><ul>
<li><p>mvn compile<br>编译主程序源代码，不会编译test目录的源代码。第一次运行时，会下载相关的依赖包，可能会比较费时，    生成target文件夹</p>
</li>
<li><p>mvn test<br>运行应用程序中的单元测试<br>会生成target文件夹，主程序编译的字节码文件在classes下面，测试程序放在test-classes下，surefire-reports文件夹下面存放是的所生成的测试报告</p>
</li>
<li><p>mvn package<br>会在target目录下生成一个jar文件</p>
</li>
<li><p>mvn clean<br>删除target文件夹</p>
</li>
</ul>
<p>由于Maven创建项目的时候要遵守Maven的目录结构，那么每次创建项目的时候我们都手动建立合法目录结构是很麻烦的事，所以 Maven为我们提供的以下两种自动化方式快速创建项目</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mvn archetype:generate 按照提示进行选择</div><div class="line"></div><div class="line">mvn archetype:generate -DgroupId= 组织名 ，公司网址的反写+项目名</div><div class="line">                       -DartifactId=项目名-模块名</div><div class="line">                       -Dversion=版本号</div><div class="line">                       -Dpackage=代码所存在的包名</div></pre></td></tr></table></figure>
<h2 id="坐标与仓库"><a href="#坐标与仓库" class="headerlink" title="坐标与仓库"></a>坐标与仓库</h2><p>坐标: 构建 maven的唯一标识 groupid artifactId version 共同构建一个坐标<br>仓库: 本地仓库和全球仓库<br>M2_HOME\lib\maven-model-builder-版本号.jar中的pom-4.0.0.0.xml中记录了默认的全球仓库的地址</p>
<p>由于国内被墙的缘故，直接从Apache 中央仓库下载jar包会很费时间，所以大多使用镜像仓库，访问速度快，也比较稳定</p>
<p>镜像仓库：<br>修改镜像仓库的位置：<br>M2_HOME\conf\setting.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven.net.cn<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span><span class="comment">&lt;!--可以用*匹配所有的镜像，一旦配置了镜像，所有针对原仓库进行的访问都会转到这个配置的镜像仓库，原仓库将不能再访问--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>central mirror in china<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.net.cn/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--下面的配置是使用oschina的远程仓库：--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven.oschina.net<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>central mirror in oschina<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.oschina.net/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></div></pre></td></tr></table></figure>
<p>修改仓库位置：<br>默认存在位置：用户目录.m2\repository<br>修改settings.xml中的localRespository节点的路径之后即修改了仓库的默认位置</p>
]]></content>
      
        <categories>
            
            <category> 项目管理 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Maven </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[存储过程高级篇]]></title>
      <url>/2016/12/29/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E9%AB%98%E7%BA%A7%E7%AF%87/</url>
      <content type="html"><![CDATA[<p>继续上文的初级篇，聊一聊存储过程的常用特性，谈谈存储过程在工作中的具体使用，希望能对读者有所帮助。<br><a id="more"></a></p>
<h3 id="参数传入模式"><a href="#参数传入模式" class="headerlink" title="参数传入模式"></a>参数传入模式</h3><p>PL/SQL存储过程有三种传参模式in 、out、in out。默认情况下（即不写）为in模式<br>先来看看下面的存储过程：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--in 、out、 in out模式测试</span></div><div class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">procedure</span> proc_param_demo(p1 <span class="keyword">in</span> <span class="built_in">number</span>,p2 <span class="keyword">out</span> <span class="built_in">number</span>,p3 <span class="keyword">in</span> <span class="keyword">out</span> <span class="built_in">number</span>) <span class="keyword">as</span></div><div class="line"><span class="keyword">begin</span></div><div class="line">  dbms_output.put_line(<span class="string">'测试in    模式存储过程中p1的值为：'</span>||p1);<span class="comment">--标准输出</span></div><div class="line">  dbms_output.put_line('测试out   模式存储过程中p2的值为：'||p2);</div><div class="line">  dbms_output.put_line('测试in out模式存储过程中p3的值为：'||p3);</div><div class="line">  <span class="comment">--p1 :=100; --报错</span></div><div class="line">  p2 := 100; <span class="comment">--:=PL/SQL标准赋值</span></div><div class="line">  p3 :=100;</div><div class="line"><span class="keyword">end</span>;</div></pre></td></tr></table></figure></p>
<p>调试完错误之后，调用上面的存储过程，这次调用我们不直接把值传递给存储过程的参数。所以需要使用declare关键字来声明变量，然后就可以在执行区域才可以使用这些变量：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">declare</span> <span class="comment">--声明区域</span></div><div class="line">p1 <span class="built_in">number</span>;</div><div class="line">p2 number;</div><div class="line">p3 number;</div><div class="line"><span class="keyword">begin</span></div><div class="line">  p1 := <span class="number">10</span>;</div><div class="line">  p2 := 10;</div><div class="line">  p3 := 10;</div><div class="line">  proc_param_demo(p1,p2,p3);</div><div class="line">  dbms_output.put_line('测试in    模式存储过程后p1的值为：'||p1);</div><div class="line">  dbms_output.put_line('测试out   模式存储过程后p2的值为：'||p2);</div><div class="line">  dbms_output.put_line('测试in out模式存储过程后p3的值为：'||p3);</div><div class="line"><span class="keyword">end</span>;</div></pre></td></tr></table></figure></p>
<p>输出结果如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3993341-ec87d87fed22ebf5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="存储过程三种模式测试结果"><br>通过测试可以得到以下结果：</p>
<ul>
<li>in模式可以理解为引用传递，它的值被完整的传入到存储过程中，但在执行过程中不能被重新赋值，我们传递的值执行之后不会发生改变。</li>
<li>out模式为值传递，它的值在传入到存储过程的时候会默认赋值为null，可以在执行的时候为其赋值，执行之后传递的值也会随之改变</li>
<li>in out模式为值传递，它的值被完整的传入到存储过程中，可以在执行的时候为其赋值，执行之后传递的值也会随之改变</li>
</ul>
<p><strong>总结：</strong>可以把in模式看做是向存储过程传递的不想被改变的参数，可以把out模式看做返回值，当执行之后out模式的值就会随着业务逻辑发生改变以供我们使用，而in out模式则很灵活，我们即可以把它当参数传递，也可以当做返回值来使用。</p>
<h3 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h3><p>流程控制语句语句无处不在，只要有一点编程基础就能够理解，在这里我列举一些在工作中常用的语法，详细语法请<a href="http://docs.oracle.com/cd/B28359_01/appdev.111/b28370/controlstructures.htm#CJAIJFCI" target="_blank" rel="noopener">参考官方文档</a></p>
<p>IF判断语句<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">IF 条件 THEN</div><div class="line">  执行体;</div><div class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</div></pre></td></tr></table></figure></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">IF 条件 THEN</div><div class="line">  执行体;</div><div class="line">ELSE</div><div class="line">  执行体;</div><div class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">IF 条件 THEN</div><div class="line">  执行体;</div><div class="line">ELSEIF 条件 THEN</div><div class="line">  执行体;</div><div class="line">ELSE</div><div class="line">  执行体;</div><div class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</div></pre></td></tr></table></figure>
<p>CASE选择语句<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">CASE 变量</div><div class="line">  WHEN 匹配变量  THEN   执行体;</div><div class="line">  WHEN 匹配变量  THEN   执行体;</div><div class="line">  WHEN 匹配变量  THEN   执行体;</div><div class="line">  ELSE 执行体;</div><div class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</div></pre></td></tr></table></figure></p>
<p>LOOP循环语句<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">LOOP</div><div class="line">  执行体;</div><div class="line">  IF 条件 THEN</div><div class="line">    执行体;</div><div class="line">    EXIT;<span class="comment">--此处为跳出循环</span></div><div class="line">  <span class="keyword">END</span> <span class="keyword">IF</span>;</div><div class="line"><span class="keyword">END</span> <span class="keyword">LOOP</span></div></pre></td></tr></table></figure></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">LOOP</div><div class="line">  执行体;</div><div class="line">  EXIT WHEN 条件;<span class="comment">--跳出循环 对比的有CONTINUE和CONTINUE WHEN语法</span></div><div class="line"><span class="keyword">END</span> <span class="keyword">LOOP</span></div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">FOR i IN 1..3 LOOP <span class="comment">-- FOR EACH 语法，遍历1~3并输出</span></div><div class="line"> <span class="comment">--执行体;</span></div><div class="line">  DBMS_OUTPUT.PUT_LINE (TO_CHAR(i));</div><div class="line"><span class="keyword">END</span> <span class="keyword">LOOP</span>;</div></pre></td></tr></table></figure>
<p>流程控制语句先了解其语法即可，因为它无处不在，我们就可以在实践中慢慢的掌握并精通。</p>
<h3 id="Cursor游标"><a href="#Cursor游标" class="headerlink" title="Cursor游标"></a>Cursor游标</h3><blockquote>
<p>An explicit cursor names the unnamed work area in which the database stores processing information when it executes a multiple-row query. When you have named the work area, you can access its information, and process the rows of the query individually.</p>
</blockquote>
<p>翻译：Cursor就是当我们在数据库一块未命名的存储数据的工作空间进行多行查询的时候对其进行命名。当你对一块工作空间命名之后，你就可以获取并处理这些查询的数据<br>总结：可以把Cursor理解为一个有名称的结果集，当需要的时候就可以拿过来用，也可以吧Cursor看成一个实体类，存储了我们定义的数据。</p>
<p><a href="http://docs.oracle.com/cd/B28359_01/appdev.111/b28370/explicit_cursor.htm#LNPLS01313" target="_blank" rel="noopener">参考官方文档</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/3993341-868a3a8831207f2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Cursor"><br>接下来我们通过看一个具体的例子了解cursor的具体实现，需求为从emp中查出所有的姓名和其职位输出<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">procedure</span> proc_cursor_demo <span class="keyword">as</span></div><div class="line"><span class="keyword">cursor</span> emp_cursor <span class="keyword">is</span>        <span class="comment">--定义cursor</span></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp;          <span class="comment">--将数据空间指向emp_cursor</span></div><div class="line"><span class="keyword">begin</span></div><div class="line">  <span class="keyword">for</span> emp_data <span class="keyword">in</span> emp_cursor <span class="keyword">loop</span>            <span class="comment">--遍历cursor数据输出</span></div><div class="line">    dbms_output.put_line(emp_data.ename ||<span class="string">'  的工作为: '</span>||emp_data.job);</div><div class="line">  <span class="keyword">end</span> <span class="keyword">loop</span>;</div><div class="line"><span class="keyword">end</span>;</div></pre></td></tr></table></figure></p>
<p>结果如下<br><img src="http://upload-images.jianshu.io/upload_images/3993341-c8a22c8e5a546cae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="使用Cursor输出emp表名称和职位"></p>
<h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p><img src="http://upload-images.jianshu.io/upload_images/3993341-5d4b31760b02595d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>存储过程的异常在工作中非常常用，但具体使用一般很简单，包括自定义异常和系统异常，<a href="http://blog.csdn.net/jojo52013145/article/details/6585833" target="_blank" rel="noopener">jojo52013145</a>总结的很好，如果想深入了解请参考他的文章。</p>
<h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>不管学习什么光说不练都是假把式，看到的知识不一定是自己的，只有实践之后才能真正的理解，让我们通过一个例子。比如说我们有这样的一个需求，要把emp表中有奖金的员工提取到另外一个表，并在员工的姓名后添加后缀_V。下面就是实现代码：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">create or replace procedure proc_copy_demo</div><div class="line">(tn in varchar2)</div><div class="line">as</div><div class="line">v_count number;             --检查是否已经有这个名称的表了</div><div class="line">tablename varchar2(20);     --表名称</div><div class="line">v_emp_copy emp%rowtype;      --表结构</div><div class="line"></div><div class="line">v_sql varchar(200);           --sql</div><div class="line"></div><div class="line">cursor emp_data_cursor is   -- 将有emp表中有奖金的人员放到cursor中</div><div class="line">select * from emp where comm&gt;0; --过滤有奖金的</div><div class="line"></div><div class="line">begin</div><div class="line">  tablename := tn; -- 定义表名称</div><div class="line">  select count(*) into v_count from user_objects where object_name = upper(tablename); -- 查询用户表，校验是否已经存在名称为tablename的表</div><div class="line">  if v_count&gt;0 then    -- 表存在</div><div class="line">    execute immediate 'drop table '|| tablename ||' cascade constraints'; -- 执行删除表 execute immediate执行SQL语句</div><div class="line">  end if;</div><div class="line"></div><div class="line">  execute immediate 'create table '|| tablename ||' as select * from emp where 1=2'; -- 新建表结果和emp相同的表，添加条件后只创建表，不添加数据</div><div class="line"></div><div class="line">  for emp_data in emp_data_cursor loop          -- 从cursor中取出数据，做一些处理并插入到指定表中</div><div class="line">      v_emp_copy.empno := emp_data.empno;</div><div class="line">      v_emp_copy.ename := emp_data.ename || '_A';</div><div class="line">      v_emp_copy.job := emp_data.job;</div><div class="line">      v_emp_copy.mgr := emp_data.mgr;</div><div class="line">      v_emp_copy.hiredate := emp_data.hiredate;</div><div class="line">      v_emp_copy.sal := emp_data.sal;</div><div class="line">      v_emp_copy.comm := emp_data.comm;</div><div class="line">      v_emp_copy.deptno := emp_data.deptno;</div><div class="line"></div><div class="line"></div><div class="line">      v_sql := 'insert into '||tablename||' values</div><div class="line">      (' ||v_emp_copy.empno    ||','''</div><div class="line">         ||v_emp_copy.ename    ||''','''</div><div class="line">         ||v_emp_copy.job      ||''','</div><div class="line">         ||v_emp_copy.mgr      ||','''</div><div class="line">         ||v_emp_copy.hiredate ||''','</div><div class="line">         ||v_emp_copy.sal      ||','</div><div class="line">         ||v_emp_copy.comm     ||','</div><div class="line">         ||v_emp_copy.deptno   ||')';</div><div class="line">     dbms_output.put_line(v_sql);</div><div class="line">     execute immediate v_sql;</div><div class="line">  end loop;</div><div class="line">  commit;</div><div class="line">  exception            -- 捕获异常常用写法</div><div class="line">    when others then</div><div class="line">      dbms_output.put_line('捕获的异常代码（SQLCODE） 为 ' ||SQLCODE );        -- 输出异常信息</div><div class="line">      dbms_output.put_line('捕获的异常信息（SQLERRM） 为 ' ||SQLERRM);</div><div class="line">end;</div><div class="line"></div><div class="line">-------------------------test-------------------------------</div><div class="line">begin</div><div class="line"> proc_copy_demo('emp_copy');</div><div class="line">end;</div><div class="line">-------------------------test-------------------------------</div></pre></td></tr></table></figure></p>
<p>运行之后可能会出现下面的输出，PL/SQL抛出了一个异常，通过异常捕获机制，我们可以轻松的找到问题所在。<br><img src="http://upload-images.jianshu.io/upload_images/3993341-a72eab18212ffc10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="异常结果"><br>因为我们没有为scott用户赋予创建标的权限，具体代码如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">revoke</span> <span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">from</span> scott <span class="comment">-- 收回scott创建表的权限</span></div><div class="line"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">to</span> scott   <span class="comment">-- 赋予scott创建表的权限</span></div></pre></td></tr></table></figure></p>
<p>然后再执行上面的存储过程，我们会发现想要的数据已经被提取到emp_copy表中了。</p>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 存储过程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[存储过程初级篇]]></title>
      <url>/2016/12/24/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%88%9D%E7%BA%A7%E7%AF%87/</url>
      <content type="html"><![CDATA[<p>本文旨在把自己学到的有关存储过程的知识和大家分享，并希望能够帮助正在被存储过程折磨的同学。<br><a id="more"></a></p>
<h3 id="什么是存储过程"><a href="#什么是存储过程" class="headerlink" title="什么是存储过程"></a>什么是存储过程</h3><blockquote>
<p><a href="http://docs.oracle.com/cd/E11882_01/appdev.112/e25519/subprograms.htm#LNPLS99900" target="_blank" rel="noopener">官方定义：</a><br>A procedure is a subprogram that performs a specific action</p>
<p>A PL/SQL subprogram is a named PL/SQL block that can be invoked repeatedly. If the subprogram has parameters, their values can differ for each invocation.</p>
<p>A subprogram is either a procedure or a function. Typically, you use a procedure to perform an action and a function to compute and return a value.</p>
</blockquote>
<p><strong>翻译：</strong><br>存储过程是一个可以执行特定行为的子程序</p>
<p>PL/SQL子程序是一个可以被重复调用的拥有名称的PL/SQL块（PL/SQL程序都是以块为基本单位的）。如果这个子程序有参数，我们则可以在调用的时候赋予不同的参数</p>
<p>子程序可以是存储过程或函数。通常情况下，你可以使用存储过程来执行一个动作，使用函数来计算并返回一个值</p>
<p><strong>总结：</strong>存储过程对于不同的领域的人有不同的理解方式。可以把它理解为一个指令集，它可以帮助我们完成一系列复杂的数据操作，也可以把它看做一个专门处理SQL的批处理工具，在需要的时候执行一些增删改查的操作。</p>
<h3 id="为什么学习存储过程"><a href="#为什么学习存储过程" class="headerlink" title="为什么学习存储过程"></a>为什么学习存储过程</h3><p>相信在学习存储过程的你一定已经对普通SQL了如指掌了，简单了解了存储过程的概念之后，用普通的SQL与存储过程进行比较可以让我们在工作中做出正确的选择。两者区别很大，详细的对比可以问度娘，由于本文主讲存储过程，故罗列一些重要存储过程的优点如下：</p>
<ul>
<li>降低网络的通讯量。如果只是执行简单的SQL语句的话存储过程和普通SQL没有太大差别，但随着时间的推移SQL量越来越大甚至达到上百行时，其优越性明显体现</li>
<li>提高执行效率。我们都知道SQL是先编译再执行的，而存储过程是预编译在服务器中的，当执行的时候跳过编译的环节效率自然会提高</li>
<li>可维护性高。更新存储过程通常比更新，测试，重新部署需要较少的时间和精力</li>
</ul>
<p>总之存储过程是一个SQL提供的一个非常优秀的功能，在工作中我们或多或少都会用到，学会存储过程绝对会让你受益匪浅。</p>
<h3 id="PL-SQL存储过程"><a href="#PL-SQL存储过程" class="headerlink" title="PL/SQL存储过程"></a>PL/SQL存储过程</h3><hr>
<h5 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h5><p>存储过程在不同的数据库语言中语法略有不同，本文针对ORACLE的PL/SQL，但其他数据库语言也是大同小异<br><img src="http://upload-images.jianshu.io/upload_images/3993341-4182833472a4d9cf.gif?imageMogr2/auto-orient/strip" alt="create_procedure"></p>
<p>上图是一个存储过程的模型，由此可知一个最简单的存储过程必须包含以下关键字CREATE、PROCEDURE、存储过程名称、IS/AS、PL/SQLB标准执行语句（BEGIN … END;）。<br>通过不断的实践我们将会完全理解上图的含义。首先从简单的存储过程开始(其功能是向EMP表中添加一条数据)：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span>        <span class="comment">-- 存储过程头部区域开始</span></div><div class="line"><span class="keyword">or</span> <span class="keyword">replace</span>    <span class="comment">--可选表示如果数据库中已经存在一条相同名称的存储过程就把它替换掉</span></div><div class="line"><span class="keyword">procedure</span></div><div class="line">proc_emp_create <span class="comment">--存储过程名称 procedure_name</span></div><div class="line">(</div><div class="line">empno <span class="built_in">number</span>, ename varchar2, job varchar2, mgr <span class="built_in">number</span>, hiredate <span class="built_in">date</span>, sal <span class="built_in">number</span>, comm <span class="built_in">number</span>, deptno <span class="built_in">number</span></div><div class="line">) <span class="comment">-- parameter_declaration 声明参数（注意不需要写长度），存储过程头部区域结束</span></div><div class="line"><span class="keyword">as</span></div><div class="line"><span class="comment">--声明区域，不需要声明变量可以不写</span></div><div class="line"><span class="keyword">begin</span> <span class="comment">-- PL/SQL标准执行语句</span></div><div class="line"><span class="comment">--执行区域</span></div><div class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(empno, ename, job, mgr, hiredate, sal, comm, deptno);</div><div class="line"><span class="keyword">end</span>;</div></pre></td></tr></table></figure></p>
<p>当我们执行上面的存储过程之后这条存储过程就被编译到数据库中了，进入PLSQL Developer中的Procedures文件夹就可以看到我们刚才创建的存储过程了</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3993341-20071311d7544ea5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="已经编译好的存储过程"></p>
<p>既然存储过程已经写好并编译完成了，接下来就是使用我们创建的存储过程了。使用存储过程有两种方法：<br>第一种是直接在SQL窗口中，执行SQL语句。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">begin</span></div><div class="line">  proc_emp_create(<span class="number">7778</span>,<span class="string">'Alexander'</span>,<span class="string">'analyst'</span>,<span class="number">6789</span>,<span class="keyword">sysdate</span>,<span class="number">4321</span>,<span class="string">''</span>,<span class="number">20</span>);</div><div class="line"><span class="keyword">end</span>;</div></pre></td></tr></table></figure></p>
<p>第二种是在命令窗口中使用execute命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Connected to Oracle Database 11g Enterprise Edition Release 11.2.0.1.0</div><div class="line">Connected as scott</div><div class="line"></div><div class="line">SQL&gt; execute   proc_emp_create(7778,&apos;Alexander&apos;,&apos;analyst&apos;,6789,sysdate,4321,&apos;&apos;,20);</div><div class="line"></div><div class="line">PL/SQL procedure successfully completed</div><div class="line"></div><div class="line">SQL&gt;</div></pre></td></tr></table></figure></p>
<p>无论使用哪一种方法，我们都会发现在EMP表中已经多了一条刚才插入的数据。也就是说，我们以后想要向EMP表中插入数据的话，就可以直接调用这条存储过程来执行插入操作。</p>
<p>从上面的例子可以看出，一个存储过程可以分成三个区域</p>
<ol>
<li>头部区域<br>用于编写最基本的存储过程头部标记，定义是否要创建一个替代原有存储过程的存储过程；决定是否定义参数；定义参数的类型（in out inout）；定义执行权限（Schema）。</li>
<li>声明区域<br>用于声明变量（要定义长度）包括cursor；</li>
<li>执行区域<br>用于执行业务逻辑代码，可以使用条件语句（选择、判断、循环。。。）来进行一些业务逻辑CRUD的处理</li>
</ol>
<h5 id="继续实践"><a href="#继续实践" class="headerlink" title="继续实践"></a>继续实践</h5><p>了解了存储过程的基本语法和用途之后，再通过一些简单的实例可以帮助我们更好的理解存储过程的语法和其含义。上面的例子简单的完成了对EMP表的添加功能，接下来将会使用存储过程对EMP进行删除、修改和查询功能，实现完整的CRUD<br><strong>D</strong><br>创建用于根据EMPNO删除EMP中一条数据的存储过程<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">procedure</span> proc_emp_delete(deleteid <span class="built_in">number</span>) <span class="keyword">as</span></div><div class="line"><span class="keyword">begin</span></div><div class="line">  <span class="keyword">delete</span> <span class="keyword">from</span> emp <span class="keyword">where</span> empno = deleteid;</div><div class="line"><span class="keyword">end</span>;</div></pre></td></tr></table></figure></p>
<p>执行（两种方法任选其一即可）<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">begin</span></div><div class="line">  proc_emp_delete(<span class="number">7778</span>);</div><div class="line"><span class="keyword">end</span>;</div></pre></td></tr></table></figure></p>
<p>执行完成之后，刚才我们在了解存储过程语法的那条数据就被删除了<br><strong>U</strong><br>接下来来写更新的存储过程，首先准备一条数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">begin</span></div><div class="line">proc_emp_create(<span class="number">7778</span>,<span class="string">'Alexander'</span>,<span class="string">'analyst'</span>,<span class="number">6789</span>,<span class="keyword">sysdate</span>,<span class="number">4321</span>,<span class="string">''</span>,<span class="number">20</span>);</div><div class="line"><span class="keyword">end</span>;</div></pre></td></tr></table></figure></p>
<p>执行之后刚才被我们删掉的数据就又重新插入到EMP表中，接下来写更新的存储过程<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">procedure</span></div><div class="line">proc_emp_update</div><div class="line">(</div><div class="line">p_empno <span class="built_in">number</span>, p_ename varchar2, p_job varchar2, p_mgr <span class="built_in">number</span>, p_hiredate <span class="built_in">date</span>, p_sal <span class="built_in">number</span>, p_comm <span class="built_in">number</span>, p_deptno <span class="built_in">number</span></div><div class="line">)</div><div class="line"><span class="keyword">as</span></div><div class="line"><span class="keyword">begin</span></div><div class="line">  <span class="keyword">update</span> emp <span class="keyword">set</span> ename = p_ename,job = p_job,mgr = p_mgr,hiredate=p_hiredate,sal = p_sal,comm=p_comm,deptno = p_deptno <span class="keyword">where</span> empno=p_empno;</div><div class="line"><span class="keyword">end</span>;</div></pre></td></tr></table></figure></p>
<p>需要注意的是参数不能和字段表的名称相同，接下来执行<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">begin</span></div><div class="line">  proc_emp_update(<span class="number">7778</span>,<span class="string">'Alexander'</span>,<span class="string">'analyst'</span>,<span class="string">'6789'</span>,<span class="keyword">sysdate</span>,<span class="number">4321</span>,<span class="number">3000</span>,<span class="number">10</span>);</div><div class="line"><span class="keyword">end</span>;</div></pre></td></tr></table></figure></p>
<p>再次查询会发现Alexander的奖金多了3000块。<br>R<br>最后要做的就是查询了，对于多条数据的查询输出要使用cursor，留在下篇文章中讨论，我们先做一个最简单的单条数据查询<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">procedure</span> proc_emp_read</div><div class="line"><span class="keyword">as</span></div><div class="line">v_no <span class="built_in">number</span>;<span class="comment">--声明变量</span></div><div class="line"><span class="keyword">begin</span></div><div class="line">  <span class="keyword">select</span> <span class="keyword">count</span>(empno) <span class="keyword">into</span> v_no <span class="keyword">from</span> emp;<span class="comment">--在执行代码块里面查询一定要使用into赋值</span></div><div class="line">  dbms_output.put_line(v_no);</div><div class="line"><span class="keyword">end</span>;</div></pre></td></tr></table></figure></p>
<p>接下来执行<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">begin</span></div><div class="line">  proc_emp_read;</div><div class="line"><span class="keyword">end</span>;</div></pre></td></tr></table></figure></p>
<p>我的结果如下图所示：<br><img src="http://upload-images.jianshu.io/upload_images/3993341-ebd43290102a5a9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查询EMP表总记录数结果"></p>
<p>至此，简单的CRUD实践就完成了，相信你已经对存储过程有了大概的理解并能写出简单存储过程了。当然这只是存储过程最基本的使用方法，其高级特性（cursor、schema、控制语句、事务等）将在下篇文章中讨论。</p>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 存储过程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTTP协议总结]]></title>
      <url>/2016/12/14/http/</url>
      <content type="html"><![CDATA[<p>HTTP无处不在，理解HTTP协议可以帮助我们更好的理解网络<br><a id="more"></a></p>
<h2 id="浏览器请求流程概要"><a href="#浏览器请求流程概要" class="headerlink" title="浏览器请求流程概要"></a>浏览器请求流程概要</h2><p>当用户输入一个链接或者按F5刷新的时候浏览器内部都做了什么</p>
<ol>
<li>Chrome搜索自身的DNS缓存（一般缓存的时间只有一分钟，可以通过<strong>chrome://net-internals/#dns</strong>查看Chrome浏览器缓存</li>
<li>搜索操作系统自身的DNS缓存（浏览器没有找到缓存或者缓存已经失效）</li>
<li>读取本地的HOST文件</li>
<li>浏览器发起一个DNS的系统调用(宽带运营商提供的)</li>
<li>浏览器获得域名对应的IP地址后，发起HTTP“三次握手”</li>
<li>TCP/IP连接建立起来之后，浏览器就可以向服务器发送HTTP请求了，使用了比如说GET方法请求一个根域的域名，协议可以采用HTTP1.0协议</li>
<li>服务器接受到了这个请求，根据路径参数，通过后端的一些处理之后，把处理后的一个结果数据返回给浏览器，如一个网站的代码</li>
<li>浏览器拿到完整的HTML代码，在解析和渲染这个页面的时候，里面的JS、CSS、图片静态资源，他们同样也是一个个HTTP请求都要经过上面主要七个步骤</li>
<li>浏览器根据拿到的资源对页面进行渲染，最终把一个完整的页面展现给用户</li>
</ol>
<h3 id="运营商的做法"><a href="#运营商的做法" class="headerlink" title="运营商的做法"></a>运营商的做法</h3><ul>
<li>宽带运营商服务器查看本身缓存</li>
<li>运营商服务器发起一个迭代的DNS解析请求<ul>
<li>询问根域（.com .cn eg.）</li>
<li>根据顶级域查找对应的IP（baidu.com nodejs.org eg.）</li>
<li>根据上级域找域名注册商可以获取IP</li>
</ul>
</li>
</ul>
<h3 id="运营商返回IP之后怎么做"><a href="#运营商返回IP之后怎么做" class="headerlink" title="运营商返回IP之后怎么做"></a>运营商返回IP之后怎么做</h3><ul>
<li>服务器运营商把结果返回操作系统内核同时缓存起来</li>
<li>操作系统内核把结果返回给浏览器</li>
<li>最终浏览器拿到了请求的IP</li>
</ul>
<h2 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h2><ul>
<li>HTTP头<br>发送的是一些附加信息：内容类型、服务器发送响应的日期、HTTP状态码</li>
<li>HTTP正文<br>用户提交的表单数据或者是返回的数据</li>
</ul>
<h2 id="HTTP请求分析"><a href="#HTTP请求分析" class="headerlink" title="HTTP请求分析"></a>HTTP请求分析</h2><h3 id="Timing"><a href="#Timing" class="headerlink" title="Timing"></a>Timing</h3><p>通过分析Timing找到页面加载瓶颈</p>
<ul>
<li>stalled 等待时间，浏览器要发出请求，到请求可以发出的等待时间（TCP连接释放的时间登），不包含DNS查询和建立TCP连接的时间</li>
<li>Proxy negotiation 代理协商的时间</li>
<li>Request send 请求的第一个字节发出之前到最后一个字节发出后的时间，请求时间</li>
<li>请求发出之后到收到响应的第一个字节锁花费的时间</li>
<li>Content download 收到响应的第一个字节开始到收到最后一个字节所话费的时间</li>
</ul>
<h3 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h3><ul>
<li>Remote Address 域名解析后的地址</li>
<li>Request URL 请求地址</li>
<li>Request method 请求方法</li>
<li>Status code 状态码</li>
</ul>
<h3 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h3><ol>
<li>GET 一般获取读取数据</li>
<li>POST 一般提交数据</li>
<li>PUT  更新数据</li>
<li>DELETE 删除</li>
<li>HEAD</li>
<li>TRAGCE</li>
<li>OPTIONS<br>。。。</li>
</ol>
<h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><ul>
<li>1XX 请求已经接受了，正在处理</li>
<li>2XX 请求已经接受并处理完成<ul>
<li>200 请求成功</li>
</ul>
</li>
<li>3XX 重定向</li>
<li>4XX 客户端请求错误<ul>
<li>400 客户端请求语法错误</li>
<li>401 请求没有经过授权</li>
<li>403 服务器收到请求但是拒绝提供</li>
<li>404 找不到资源</li>
</ul>
</li>
<li>5XX 服务器错误<ul>
<li>500 服务器端发生不可预期的错误</li>
<li>503 服务器端当前还不能处理请求，可能过一段时间会恢复正产</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AppCan总结--关闭页面和listview动态加载数据]]></title>
      <url>/2016/12/07/AppCan%E6%80%BB%E7%BB%93-%E5%85%B3%E9%97%AD%E9%A1%B5%E9%9D%A2listview%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<p>AppCan 的页面是由两个HTML组成，如果要完全关闭的话需要在主HTML eg.index.html中关闭,关闭方法：appcan.window.close(-1);<br><a id="more"></a></p>
<h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><ul>
<li>AppCan中两个页面通过管道连接，并传递数据</li>
<li>appcan.window.publish(channelId,msg)         向指定通道发送消息</li>
<li>appcan.window.subscribe(channelId,callback)  订阅一个频道，如果有消息发给该频道，则会执行响应的回调如果是用超链接打开的页面收不到消息</li>
</ul>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><ul>
<li>需要注意的是，要确保publish方法执行过即开通了一个管道才可以接收到信息<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在..._content页面发送消息</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="comment">//发送消息</span></div><div class="line">            appcan.window.publish(<span class="string">'test'</span>, <span class="string">'hello'</span>);</div><div class="line">            alert(<span class="string">"发送成功"</span>);</div><div class="line"></div><div class="line">        &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在.. .html文件ready方法中打开管道</span></div><div class="line"> appcan.ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">            appcan.window.subscribe(<span class="string">'test'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (msg == <span class="string">'hello'</span>) &#123;</div><div class="line">                    closeMyself();</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    alert(<span class="string">"test"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//执行获取正确信息后的方法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">closeMyself</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            alert(<span class="string">"closeMyself调用"</span>);</div><div class="line">            appcan.window.close(<span class="number">-1</span>);</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<h3 id="listview动态加载数据"><a href="#listview动态加载数据" class="headerlink" title="listview动态加载数据"></a>listview动态加载数据</h3><ul>
<li>appcan —&gt; 添加列表 —-&gt;带图片的列表<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//自动生成</span></div><div class="line">appcan.ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="keyword">var</span> lv = appcan.listview(&#123;</div><div class="line">            <span class="attr">selector</span> : <span class="string">"#listview"</span>,</div><div class="line">            <span class="attr">type</span> : <span class="string">"thinLine"</span>,</div><div class="line">            <span class="attr">hasIcon</span> : <span class="literal">false</span>,</div><div class="line">            <span class="attr">hasAngle</span> : <span class="literal">true</span>,</div><div class="line">            <span class="attr">hasSubTitle</span> : <span class="literal">true</span>,</div><div class="line">            <span class="attr">multiLine</span> : <span class="number">1</span>,</div><div class="line">        &#125;);</div><div class="line">        lv.set([&#123;</div><div class="line">            <span class="attr">title</span> : <span class="string">"临时数据"</span>,</div><div class="line">            <span class="attr">subTitle</span> : <span class="string">"12:05"</span>,</div><div class="line">            <span class="attr">id</span> : <span class="string">"1"</span></div><div class="line">        &#125;, &#123;</div><div class="line">            <span class="attr">title</span> : <span class="string">"临时数据"</span>,</div><div class="line">            <span class="attr">subTitle</span> : <span class="string">"12:05"</span>,</div><div class="line">            <span class="attr">id</span> : <span class="string">"2"</span></div><div class="line">        &#125;])</div><div class="line">        lv.on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ele, obj, curEle</span>) </span>&#123;</div><div class="line">        &#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//从服务器获取数据</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> url = <span class="string">"服务器地址"</span> + <span class="string">"用户登录id"</span>;</div><div class="line">            apcan.request.getJSON(url, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">                <span class="comment">//提前判断是否加载成功，现将data解析</span></div><div class="line">                showMenu(data) &#123;</div><div class="line"></div><div class="line">                &#125;</div><div class="line">            &#125;, <span class="string">'json'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">                alert(err);</div><div class="line">            &#125;, <span class="string">"get"</span>, <span class="string">""</span>, <span class="literal">false</span>);</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//将信息动态赋值给listview</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showMenu</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> lv = appcan.listview(&#123;</div><div class="line">                <span class="attr">selector</span> : <span class="string">"#listview"</span>,</div><div class="line">                <span class="attr">type</span> : <span class="string">"thinLine"</span>,</div><div class="line">                <span class="attr">hasIcon</span> : <span class="literal">false</span>,</div><div class="line">                <span class="attr">hasAngle</span> : <span class="literal">true</span>,</div><div class="line">                <span class="attr">hasSubTitle</span> : <span class="literal">true</span>,</div><div class="line">                <span class="attr">multiLine</span> : <span class="number">1</span>,</div><div class="line">            &#125;);</div><div class="line">            <span class="keyword">var</span> datalist = data.data;</div><div class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;data.datalist.length;i++)&#123;</div><div class="line">                datalist[i].title = data.data[i].title;</div><div class="line">                datalist[i].describ = data.data[i].content;</div><div class="line">                datalist[i].subtit = data.data[i].uid;</div><div class="line"></div><div class="line">                lv.set(datalist);</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AppCan </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AppCan总结--Request和登录功能简单实现]]></title>
      <url>/2016/11/30/AppCan%E6%80%BB%E7%BB%93-Request%E5%92%8C%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>记录在apcan中对数据的请求获取<br><a id="more"></a><br>实现appcan中网络数据的上传和获取</p>
<ul>
<li>发起一个ajax请求,并获取相应的内容</li>
<li><p>常用参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">options.type:        请求的类型，包括GET、POST等</div><div class="line">options.url:         要请求的地址 注：get方式请求中携带中文参数，需要对参数进行encode编码，具体函数：encodeURIComponent</div><div class="line">options.data:        要请求的URL的参数,如果要上传文件则data数据中必须传一个对象包含一个path的key 例如：data:&#123;file:&#123;path:&apos;a.jpeg&apos;&#125;,file2:&#123;path:&apos;b.jpeg&apos;&#125;&#125;上传                a.jpeg,b.jpeg图片</div><div class="line">options.dataType:    服务端的响应类型，包括json, jsonp, script, xml, html, text中的一种</div><div class="line">options.timeout:     请求的超时时间</div><div class="line">options.success(data, status,,requestCode,response, xhr):    请求发送成功后的回调</div><div class="line">options.error(xhr, errorType, error,msg):                    请求如果出现错误后的回调;msg: 错误详细信息，服务器返回的result信息</div></pre></td></tr></table></figure>
</li>
<li><p>script代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">appcan.button(<span class="string">"#submit"</span>, <span class="string">"ani-act"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">           login();</div><div class="line">       &#125;)</div><div class="line">       <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>) </span>&#123;</div><div class="line">           <span class="keyword">var</span> name = $(<span class="string">"#username"</span>).val();</div><div class="line">           <span class="keyword">var</span> pwd = $(<span class="string">"#password"</span>).val();</div><div class="line">           <span class="built_in">console</span>.log(name + <span class="string">":"</span> + pwd);</div><div class="line">           appcan.ajax(&#123;</div><div class="line">               <span class="attr">url</span> : <span class="string">"http://testmas.appcan.cn:9000/ODBC/login?uName="</span> + name + <span class="string">"&amp;pwd="</span> + pwd,</div><div class="line">               <span class="attr">type</span> : <span class="string">'get'</span>,</div><div class="line">               <span class="attr">dateType</span> : <span class="string">'json'</span>,</div><div class="line">               <span class="attr">success</span> : <span class="function"><span class="keyword">function</span>(<span class="params">data, status, xhr</span>) </span>&#123;</div><div class="line">                   <span class="keyword">var</span> obj = <span class="built_in">eval</span>(<span class="string">'('</span> + data + <span class="string">')'</span>);</div><div class="line">                   alert(obj.status);</div><div class="line">                   <span class="keyword">if</span>(obj.status == <span class="string">"0"</span>)&#123;</div><div class="line">                       alert(<span class="string">"登录成功"</span>);</div><div class="line">                   &#125;<span class="keyword">else</span>&#123;</div><div class="line">                       alert(<span class="string">"用户名或密码不正确"</span>);</div><div class="line">                   &#125;</div><div class="line"></div><div class="line">               &#125;,</div><div class="line">               <span class="attr">error</span> : <span class="function"><span class="keyword">function</span>(<span class="params">xhr, status, errMessage</span>) </span>&#123;</div><div class="line">                   alert(<span class="string">"errMessage"</span>);</div><div class="line">               &#125;</div><div class="line">           &#125;);</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>html代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&lt;body <span class="class"><span class="keyword">class</span></span>=<span class="string">"um-vp bc-bg"</span> ontouchstart&gt;</div><div class="line">        &lt;div class="ub ub-ver uinn-a3 ub-fv"&gt;</div><div class="line">            &lt;div class="ub ub-ver uinn uinn-at1"&gt;</div><div class="line">                &lt;div class="umar-a uba bc-border c-wh"&gt;</div><div class="line">                    &lt;div class="ub ub-ac ubb umh5 bc-border "&gt;</div><div class="line">                        &lt;div class=" uinput ub ub-f1"&gt;</div><div class="line">                            &lt;div class="uinn fa fa-user sc-text"&gt;&lt;/div&gt;</div><div class="line">                            &lt;input id="username" placeholder="手机/邮箱/用户名" type="text" class="ub-f1"&gt;</div><div class="line">                        &lt;/div&gt;</div><div class="line">                    &lt;/div&gt;</div><div class="line">                    &lt;div class="ub ub-ac umh5 bc-border "&gt;</div><div class="line">                        &lt;div class=" uinput ub ub-f1"&gt;</div><div class="line">                            &lt;div class="uinn fa fa-lock sc-text"&gt;&lt;/div&gt;</div><div class="line">                            &lt;input id="password" placeholder="密码" type="password" class="umw4 ub-f1"&gt;</div><div class="line"></div><div class="line">                        &lt;/div&gt;</div><div class="line">                    &lt;/div&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">                &lt;div class="ub ub-ver"&gt;</div><div class="line">                    &lt;div class="ub ub-pe uinn-a6 sc-text-active ulev-4"&gt;</div><div class="line">                        忘记密码</div><div class="line">                    &lt;/div&gt;</div><div class="line">                    &lt;div class="uinn-at1"&gt;</div><div class="line">                        &lt;div class="btn ub ub-ac bc-text-head ub-pc bc-btn uc-a1" id="submit"&gt;</div><div class="line">                            登录</div><div class="line">                        &lt;/div&gt;</div><div class="line">                    &lt;/div&gt;</div><div class="line">                    &lt;div class="uinn-at2 ub sc-text-active ulev-4"&gt;</div><div class="line">                    &lt;/div&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">                &lt;button type="submit"class="uinvisible"&gt;&lt;/button&gt;</div><div class="line"></div><div class="line">            &lt;/div&gt;</div><div class="line"></div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script src="js/appcan.js"&gt;&lt;/script&gt;</div><div class="line">        &lt;script src="js/appcan.control.js"&gt;&lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AppCan </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AppCan总结--数据存储及ListView的应用]]></title>
      <url>/2016/11/24/AppCan%E6%80%BB%E7%BB%93-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E5%8F%8AListView%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>AppCan是Hybrid App开发框架即混合开发框架,由官方提供底层功能使用API<br><a id="more"></a><br>HTML5和JavaScript只是作为一种解析语言，真正调用的都是Native App一样封装的底层功能</p>
<h3 id="AppCan打包"><a href="#AppCan打包" class="headerlink" title="AppCan打包"></a>AppCan打包</h3><ul>
<li>本地打包<blockquote>
<p>IDE生成的ipa包是越狱包，只能在越狱机安装，并且不支持app上传到应用市场</p>
</blockquote>
</li>
<li>云端打包<blockquote>
<p>只需要按照AppCan的开发流程和规范开发，应用开发完后可直接将其上传到AppCan打包服务器，进行打包，平台会自动生成iOS/Android平台安装包，同事支持上传AppStore</p>
</blockquote>
</li>
</ul>
<h3 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h3><ul>
<li>LocalStorage<blockquote>
<p>LocalStorage 是window的全局属性，包括localStorage和sessionStorage,二者用法基本相同，但sessionStorage是会话级别的，窗口一旦被关闭就没了，而localStorage则一直存储在本地</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">在AppCan中的使用</div><div class="line">appcan.locStorage.getVal(key)               获取key保存在localStorage中对应的值</div><div class="line">appcan.locStorage.setVal(key，Val)          要设置的键值对</div><div class="line">appcan.locStorage.remove(key)               清除localStorage中对应的值</div><div class="line">appcan.locStorage.keys()                    获取localStorage中，保存的所有键值</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<h3 id="AppCan中ListView的使用"><a href="#AppCan中ListView的使用" class="headerlink" title="AppCan中ListView的使用"></a>AppCan中ListView的使用</h3><blockquote>
<p>列表组件是根据AppCan 布局框架对数据列表进行封装的JS对象，通过配合的样式，使开发者在界面中可以快速完成列表控件的开发。</p>
<p>###使用之前要添加依赖</p>
<ul>
<li>appcan.js</li>
<li>appcan.control.js</li>
<li>appcan.listview.js</li>
<li>appcan.control.css</li>
</ul>
</blockquote>
<h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><ul>
<li>常用参数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">selector:                                        <span class="comment">/*选择器*/</span></div><div class="line">type:   thinLine or thickLine                    <span class="comment">/*窄行和宽行设定*/</span></div><div class="line">hasIcon:   <span class="literal">true</span> or <span class="literal">false</span>                         <span class="comment">/*是否有图片*/</span></div><div class="line">hasAngle:   <span class="literal">true</span> or <span class="literal">false</span>                        <span class="comment">/*是否有右侧箭头*/</span></div><div class="line">hasSubTitle:   <span class="literal">true</span> or <span class="literal">false</span>                     <span class="comment">/*是否有子标题*/</span></div><div class="line">hasTouchEffect:   <span class="literal">true</span> or <span class="literal">false</span>                  <span class="comment">/*是否有点击效果*/</span></div><div class="line">hasCheckbox:   <span class="literal">true</span> or <span class="literal">false</span>                     <span class="comment">/*是否有复选按钮*/</span></div><div class="line">hasRadiobox:   <span class="literal">true</span> or <span class="literal">false</span>                     <span class="comment">/*是否有单选按钮*/</span></div><div class="line">align:   <span class="string">"left"</span> or <span class="string">"right"</span>                       <span class="comment">/*checkbox和radiobox居左还是居右*/</span></div><div class="line">multiLine:  <span class="number">1</span> <span class="number">2</span> or <span class="number">3</span>                             <span class="comment">/*主标题文字占用最大行数。到达行数显示不全使用…替换*/</span></div><div class="line">touchClass: <span class="string">'sc-bg-active'</span> or 用户自定义         <span class="comment">/*列表条目点击效果CSS类*/</span></div><div class="line">hasControl:   <span class="literal">true</span> or <span class="literal">false</span>                      <span class="comment">/*列表条目中是否包含switch组件。*/</span></div><div class="line">hasGroup:   <span class="literal">true</span> or <span class="literal">false</span>                        <span class="comment">/*列表条目是否以分组的形式展示。*/</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><img src="http://images2015.cnblogs.com/blog/883029/201603/883029-20160322125615854-63030869.png" alt=""></p>
<ul>
<li><p>定义HTML</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--定义一个listview的容器--&gt;</span></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">引用系统CSS样式</div><div class="line">.ubt &#123;</div><div class="line">    border-top: 1px solid;</div><div class="line">&#125;</div><div class="line">.ubb &#123;</div><div class="line">    border-bottom: 1px solid;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.bc-border &#123;</div><div class="line">    border-color: #BABABA;</div><div class="line">&#125;</div><div class="line">自己制作的CSS样式</div><div class="line">.c-wh&#123;</div><div class="line">    background-color: white;</div><div class="line">&#125;</div><div class="line">.umar-at1&#123;</div><div class="line">    margin-top:0.625em;</div><div class="line">&#125;</div><div class="line">.uinn-a7&#123;</div><div class="line">    padding:0 0.625em;</div><div class="line">&#125;</div><div class="line"> --&gt;</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"listview"</span>  <span class="attr">class</span>=<span class="string">"ubt bc-border ubb c-wh umar-at1 uinn-a7"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>第一种script写法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">var</span> lv = appcan.listview(&#123;</div><div class="line">            <span class="attr">selector</span> : <span class="string">"#listview"</span>, <span class="comment">//选择器，指定body标签中id为listview的容器</span></div><div class="line">            type : <span class="string">"thinLine"</span>,      <span class="comment">//窄行</span></div><div class="line">            hasIcon : <span class="literal">true</span>,         <span class="comment">//指定是否有图标</span></div><div class="line">            hasAngle : <span class="literal">true</span>,        <span class="comment">//指定是否有向右侧的箭头</span></div><div class="line">            hasSubTitle : <span class="literal">true</span>,     <span class="comment">//指定是否有子标题</span></div><div class="line">            multiLine : <span class="number">1</span>           <span class="comment">//指定主标题文字占的最大行数</span></div><div class="line">        &#125;);</div><div class="line">        lv.set([&#123;</div><div class="line">            <span class="attr">icon</span> : <span class="string">'personal_content/css/myImg/myImg1.png'</span>,         <span class="comment">//指定图标</span></div><div class="line">            title : <span class="string">'我的相册'</span>,                                     <span class="comment">//指定标题文字</span></div><div class="line">            subTitle : <span class="string">'备注文字'</span>                                   <span class="comment">//指定子标题文字</span></div><div class="line">        &#125;, &#123;</div><div class="line">            <span class="attr">icon</span> : <span class="string">'personal_content/css/myImg/myImg2.png'</span>,</div><div class="line">            <span class="attr">title</span> : <span class="string">'我的收藏'</span>,</div><div class="line">            <span class="attr">subTitle</span> : <span class="string">''</span></div><div class="line">        &#125;, &#123;</div><div class="line">            <span class="attr">icon</span> : <span class="string">'personal_content/css/myImg/myImg3.png'</span>,</div><div class="line">            <span class="attr">title</span> : <span class="string">'我的银行卡'</span>,</div><div class="line">            <span class="attr">subTitle</span> : <span class="string">''</span></div><div class="line">        &#125;]);</div><div class="line">lv.on(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">obj,data,subObj</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(obj);                                            <span class="comment">//列表条目DOM对象</span></div><div class="line">        <span class="built_in">console</span>.log(data);                                           <span class="comment">//列表条目对应数据源对象</span></div><div class="line">        <span class="built_in">console</span>.log(subObj);                                         <span class="comment">//列表条目点击时的子元素DOM对象例如图片</span></div><div class="line">        appcan.window.open(data.pagename,data.pageurl,<span class="number">10</span>);           <span class="comment">//通过此方法打开对应的界面</span></div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>第二种script写法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arrData = [&#123;</div><div class="line">            <span class="string">'tupian'</span> : <span class="string">'myWorkDOTO_content/css/myImg/myImg1.png'</span>,</div><div class="line">            <span class="string">'biaoti'</span> : <span class="string">'我的相册'</span>,</div><div class="line">            <span class="string">'zibiaoti'</span> : <span class="string">'备注文字'</span>,</div><div class="line">        &#125;, &#123;</div><div class="line">            <span class="string">'tupian'</span> : <span class="string">'myWorkDOTO_content/css/myImg/myImg2.png'</span>,</div><div class="line">            <span class="string">'biaoti'</span> : <span class="string">'我的收藏'</span>,</div><div class="line">            <span class="string">'zibiaoti'</span> : <span class="string">''</span>,</div><div class="line">        &#125;, &#123;</div><div class="line">            <span class="string">'tupian'</span> : <span class="string">'myWorkDOTO_content/css/myImg/myImg3.png'</span>,</div><div class="line">            <span class="string">'biaoti'</span> : <span class="string">'我的银行卡'</span>,</div><div class="line">            <span class="string">'zibiaoti'</span> : <span class="string">''</span>,</div><div class="line">        &#125;];</div><div class="line">        <span class="keyword">var</span> listData = [];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>,</div><div class="line">            len = arrData.length; i &lt; len; i++) &#123;</div><div class="line">            <span class="keyword">var</span> list = &#123;</div><div class="line">                <span class="attr">title</span> : arrData[i].biaoti,</div><div class="line">                <span class="attr">icon</span> : arrData[i].tupian,</div><div class="line">                <span class="attr">subTitle</span> : arrData[i].zibiaoti</div><div class="line">            &#125;</div><div class="line">            listData.push(list);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> lv = appcan.listview(&#123;</div><div class="line">            <span class="attr">selector</span> : <span class="string">"#listview"</span>,</div><div class="line">            <span class="attr">type</span> : <span class="string">"thinLine"</span>,</div><div class="line">            <span class="attr">hasIcon</span> : <span class="literal">true</span>,</div><div class="line">            <span class="attr">hasAngle</span> : <span class="literal">true</span>,</div><div class="line">            <span class="attr">hasSubTitle</span> : <span class="literal">true</span>,</div><div class="line">            <span class="attr">multiLine</span> : <span class="number">1</span></div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        lv.set(listData);</div><div class="line">        lv.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ele, context, obj, subobj</span>) </span>&#123;</div><div class="line">        &#125;)</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AppCan </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git总结]]></title>
      <url>/2016/11/16/Git%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>根据廖雪峰老师的《史上最浅显易懂的Git教程！》总结<br><a id="more"></a></p>
<h2 id="命令整理"><a href="#命令整理" class="headerlink" title="命令整理"></a>命令整理</h2><p>先贴出常用命令，方便以后复习</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">$ git config <span class="comment">--global user.name "Your Name"</span></div><div class="line">$ git config <span class="comment">--global user.email "email@example.com"</span></div><div class="line"></div><div class="line">$ git add readme.md</div><div class="line">$ git diff readme.md</div><div class="line">$ git <span class="keyword">commit</span> -m <span class="string">"add distribute"</span></div><div class="line">$ git <span class="keyword">log</span></div><div class="line">$ git <span class="keyword">reset</span> <span class="comment">--hard HEAD^</span></div><div class="line">$ git <span class="keyword">reset</span> <span class="keyword">HEAD</span> readme.md</div><div class="line">$ git <span class="keyword">status</span></div><div class="line">$ git rm test.txt</div><div class="line"></div><div class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span></div><div class="line">$ git remote <span class="keyword">add</span> origin git@github.com:ZahiZhou/GitTest.git</div><div class="line">$ git push -u origin <span class="keyword">master</span></div><div class="line">$ git <span class="keyword">clone</span> git@github.com:ZahiZhou/GitTest.git</div><div class="line">$ git branch</div><div class="line">$ git checkout -b dev</div><div class="line">$ git branch dev</div><div class="line">$ git checkout <span class="keyword">master</span></div><div class="line"></div><div class="line">$ git <span class="keyword">merge</span> feature1</div><div class="line">$ git <span class="keyword">log</span> -graph</div><div class="line">$ git checkout -b issue<span class="number">-101</span></div><div class="line">$ git stash pop</div></pre></td></tr></table></figure>
<h2 id="在实战中学习Git"><a href="#在实战中学习Git" class="headerlink" title="在实战中学习Git"></a>在实战中学习Git</h2><h4 id="自报家门"><a href="#自报家门" class="headerlink" title="自报家门"></a>自报家门</h4><p>Git是版本控制系统，所以，每个机器都必须自报家门，在提交数据的时候回记录下来您的信息</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config <span class="comment">--global user.name "Your Name"</span></div><div class="line">$ git config <span class="comment">--global user.email "email@example.com"</span></div></pre></td></tr></table></figure>
<h4 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 创建名为Github的文件夹</span></div><div class="line">$ mkdir Github</div><div class="line"><span class="comment">-- 进入此文件夹</span></div><div class="line">$ cd Github</div><div class="line"><span class="comment">-- 显示此文件夹的名称</span></div><div class="line">$ pwd</div><div class="line">/e/Github</div><div class="line"><span class="comment">-- 初始化此文件夹为git仓库</span></div><div class="line">$ git init</div><div class="line">Initialized empty Git repository in E:/Github/.git/</div></pre></td></tr></table></figure>
<h4 id="把文件添加到仓库"><a href="#把文件添加到仓库" class="headerlink" title="把文件添加到仓库"></a>把文件添加到仓库</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git add readme.md</div></pre></td></tr></table></figure>
<h3 id="提交文件到版本控制仓库"><a href="#提交文件到版本控制仓库" class="headerlink" title="提交文件到版本控制仓库"></a>提交文件到版本控制仓库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git <span class="keyword">commit</span> -m <span class="string">"your message"</span></div><div class="line">[<span class="keyword">master</span> (root-<span class="keyword">commit</span>) <span class="number">3</span>a3f1de] wrote a readme.md <span class="keyword">file</span></div><div class="line"> <span class="number">1</span> <span class="keyword">file</span> <span class="keyword">changed</span>, <span class="number">2</span> insertions(+)</div><div class="line"> <span class="keyword">create</span> <span class="keyword">mode</span> <span class="number">100644</span> readme.md</div></pre></td></tr></table></figure>
<h4 id="掌握仓库当前的状态"><a href="#掌握仓库当前的状态" class="headerlink" title="掌握仓库当前的状态"></a>掌握仓库当前的状态</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">Changes not staged for <span class="keyword">commit</span>:</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)</div><div class="line"></div><div class="line">        modified:   readme.md</div><div class="line"></div><div class="line"><span class="keyword">no</span> changes added <span class="keyword">to</span> <span class="keyword">commit</span> (<span class="keyword">use</span> <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)</div></pre></td></tr></table></figure>
<h4 id="查看修改的内容"><a href="#查看修改的内容" class="headerlink" title="查看修改的内容"></a>查看修改的内容</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ git diff readme.md</div><div class="line">diff <span class="comment">--git a/readme.md b/readme.md</span></div><div class="line">index 629f6b7..be836b4 100644</div><div class="line"><span class="comment">--- a/readme.md</span></div><div class="line">+++ b/readme.md</div><div class="line">@@ -1,2 +1,2 @@</div><div class="line">-Git is a version control system</div><div class="line">+Git is a distributed version control system</div><div class="line"> Git is free software</div><div class="line">\ No newline at <span class="keyword">end</span> <span class="keyword">of</span> <span class="keyword">file</span></div></pre></td></tr></table></figure>
<h4 id="确认修改-重复上文内容"><a href="#确认修改-重复上文内容" class="headerlink" title="确认修改(重复上文内容)"></a>确认修改(重复上文内容)</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git add readme.md</div><div class="line">$ git <span class="keyword">commit</span> -m <span class="string">"add distribute"</span></div><div class="line">[<span class="keyword">master</span> f74f576] <span class="keyword">add</span> <span class="keyword">distribute</span></div><div class="line"><span class="number">1</span> <span class="keyword">file</span> <span class="keyword">changed</span>, <span class="number">1</span> insertion(+), <span class="number">1</span> deletion(-)</div><div class="line">$ git <span class="keyword">status</span></div><div class="line"><span class="keyword">On</span> branch <span class="keyword">master</span></div><div class="line"><span class="keyword">nothing</span> <span class="keyword">to</span> <span class="keyword">commit</span>, working tree clean</div></pre></td></tr></table></figure>
<h4 id="观看版本历史记录"><a href="#观看版本历史记录" class="headerlink" title="观看版本历史记录"></a>观看版本历史记录</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ git log</div><div class="line"><span class="keyword">commit</span> <span class="number">1</span>d6bdb3287f465652c1ac836a6dce6e9bc4157c5</div><div class="line">Author: Andy &lt;singleorb@outlook.com&gt;</div><div class="line"><span class="built_in">Date</span>:   Thu Nov <span class="number">24</span> <span class="number">14</span>:<span class="number">55</span>:<span class="number">31</span> <span class="number">2016</span> +<span class="number">0800</span></div><div class="line"></div><div class="line">    <span class="keyword">add</span> distributes <span class="keyword">under</span> the GPL</div><div class="line"></div><div class="line"><span class="keyword">commit</span> f74f576308a46e9dec6a7764605c2ebc80359246</div><div class="line">Author: Andy &lt;singleorb@outlook.com&gt;</div><div class="line"><span class="built_in">Date</span>:   Thu Nov <span class="number">24</span> <span class="number">14</span>:<span class="number">52</span>:<span class="number">10</span> <span class="number">2016</span> +<span class="number">0800</span></div><div class="line"></div><div class="line">    <span class="keyword">add</span> <span class="keyword">distribute</span></div><div class="line"></div><div class="line"><span class="keyword">commit</span> <span class="number">3</span>a3f1deabccbce3aa8afba6d392bad24fba84cff</div><div class="line">Author: Andy &lt;singleorb@outlook.com&gt;</div><div class="line"><span class="built_in">Date</span>:   Thu Nov <span class="number">24</span> <span class="number">14</span>:<span class="number">45</span>:<span class="number">15</span> <span class="number">2016</span> +<span class="number">0800</span></div><div class="line"></div><div class="line">    wrote a readme.md <span class="keyword">file</span></div></pre></td></tr></table></figure>
<h4 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h4><p>回到以前的版本<br>首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交3628164…882e1e0（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git <span class="keyword">reset</span> <span class="comment">--hard HEAD^</span></div><div class="line"><span class="keyword">HEAD</span> <span class="keyword">is</span> <span class="keyword">now</span> <span class="keyword">at</span> f74f576 <span class="keyword">add</span> <span class="keyword">distribute</span></div></pre></td></tr></table></figure>
<p>再回到回到过去之前的版本(解决第二天。。找不到head id)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ git reflog</div><div class="line">f74f576 HEAD@&#123;0&#125;: reset: moving to HEAD^</div><div class="line">1d6bdb3 HEAD@&#123;1&#125;: reset: moving to 1d6bdb3287f465652c1ac836a6dce6e9bc4157c5</div><div class="line">f74f576 HEAD@&#123;2&#125;: reset: moving to HEAD^</div><div class="line">1d6bdb3 HEAD@&#123;3&#125;: commit: add distributes under the GPL</div><div class="line">f74f576 HEAD@&#123;4&#125;: commit: add distribute</div><div class="line">3a3f1de HEAD@&#123;5&#125;: commit (initial): wrote a readme.md file</div><div class="line">$ git reset --hard 1d6bdb3</div></pre></td></tr></table></figure>
<p>回到git commit 或 git add之前的状态</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">Changes not staged for <span class="keyword">commit</span>:</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)</div><div class="line"></div><div class="line">        modified:   readme.md</div><div class="line"></div><div class="line"><span class="keyword">no</span> changes added <span class="keyword">to</span> <span class="keyword">commit</span> (<span class="keyword">use</span> <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)</div><div class="line">$ git checkout <span class="comment">-- readme.md</span></div><div class="line"></div><div class="line">$ git <span class="keyword">status</span></div><div class="line"><span class="keyword">On</span> branch <span class="keyword">master</span></div><div class="line">Changes <span class="keyword">not</span> staged <span class="keyword">for</span> <span class="keyword">commit</span>:</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)</div><div class="line"></div><div class="line">        modified:   readme.md</div><div class="line"></div><div class="line"><span class="keyword">no</span> changes added <span class="keyword">to</span> <span class="keyword">commit</span> (<span class="keyword">use</span> <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)</div><div class="line">$ git <span class="keyword">add</span> readme.md</div><div class="line">$ git <span class="keyword">status</span></div><div class="line"><span class="keyword">On</span> branch <span class="keyword">master</span></div><div class="line">Changes <span class="keyword">to</span> be committed:</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git reset HEAD &lt;file&gt;..."</span> <span class="keyword">to</span> unstage)</div><div class="line"></div><div class="line">        modified:   readme.md</div><div class="line"></div><div class="line">$ git <span class="keyword">reset</span> <span class="keyword">HEAD</span> readme.md</div><div class="line"><span class="keyword">On</span> branch <span class="keyword">master</span></div><div class="line">Changes <span class="keyword">not</span> staged <span class="keyword">for</span> <span class="keyword">commit</span>:</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)</div><div class="line"></div><div class="line">        modified:   readme.md</div><div class="line"></div><div class="line"><span class="keyword">no</span> changes added <span class="keyword">to</span> <span class="keyword">commit</span> (<span class="keyword">use</span> <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)</div><div class="line">$ git checkout <span class="comment">-- readme.md</span></div></pre></td></tr></table></figure>
<h4 id="文件删除和恢复"><a href="#文件删除和恢复" class="headerlink" title="文件删除和恢复"></a>文件删除和恢复</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ git stauts</div><div class="line">On branch master</div><div class="line">Changes not staged for <span class="keyword">commit</span>:</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git add/rm &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)</div><div class="line"></div><div class="line">        deleted:    test.txt</div><div class="line"></div><div class="line"><span class="keyword">no</span> changes added <span class="keyword">to</span> <span class="keyword">commit</span> (<span class="keyword">use</span> <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)</div><div class="line">$ git rm test.txt</div><div class="line">rm <span class="string">'test.txt'</span></div><div class="line">$ git <span class="keyword">commit</span> -m <span class="string">"remove test.txt"</span></div><div class="line">[<span class="keyword">master</span> <span class="number">1</span>af3dd5] remove test.txt</div><div class="line"> <span class="number">1</span> <span class="keyword">file</span> <span class="keyword">changed</span>, <span class="number">0</span> insertions(+), <span class="number">0</span> deletions(-)</div><div class="line"> <span class="keyword">delete</span> <span class="keyword">mode</span> <span class="number">100644</span> test.txt</div><div class="line">$ git checkout <span class="comment">-- test.txt     --如果是空文件</span></div><div class="line"><span class="keyword">error</span>: pathspec <span class="string">'test.txt'</span> did <span class="keyword">not</span> <span class="keyword">match</span> <span class="keyword">any</span> <span class="keyword">file</span>(s) known <span class="keyword">to</span> git.</div><div class="line">$ git checkout <span class="comment">-- test2.txt     --不是空文件文件成功恢复</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 项目管理 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git总结二]]></title>
      <url>/2016/11/10/Git%E6%80%BB%E7%BB%93%E4%BA%8C/</url>
      <content type="html"><![CDATA[<p>承接上文，继续我们的的Git之旅<br><a id="more"></a></p>
<h2 id="远程仓库和分支"><a href="#远程仓库和分支" class="headerlink" title="远程仓库和分支"></a>远程仓库和分支</h2><h4 id="创建SSH-KEY"><a href="#创建SSH-KEY" class="headerlink" title="创建SSH KEY"></a>创建SSH KEY</h4><p>创建SSH KEY  (创建完成会在用户主目录的生成.ssh目录其中包含两个文件 id_rsa(私钥–&gt;保密)和id_rsa.pub(公钥 –&gt;可放心公开))</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C "youremail@example.com"</div><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter file in which to save the key (/c/Users/Administrator/.ssh/id_rsa):</div><div class="line">Created directory '/c/Users/Administrator/.ssh'.</div><div class="line">Enter passphrase (empty for no passphrase):</div><div class="line">Enter same passphrase again:</div><div class="line">Your identification has been saved in /c/Users/Administrator/.ssh/id_rsa.</div><div class="line">Your public key has been saved in /c/Users/Administrator/.ssh/id_rsa.pub.</div><div class="line">The key fingerprint is:</div><div class="line">SHA256:lloIlf4HBys6LZotg/uThRpos/PvHoT8LcTAt03T2IU singleorb@outlook.com</div><div class="line">The key's randomart image is:</div><div class="line">+---[RSA 2048]----+</div><div class="line">|      ..  ..     |</div><div class="line">|  .  .. =E.      |</div><div class="line">|   o.o + =       |</div><div class="line">|  . =.*.+..      |</div><div class="line">|.  + B.+So       |</div><div class="line">|oo. O o+. .      |</div><div class="line">|.+o* *.. .       |</div><div class="line">|ooB . o          |</div><div class="line">|.o+=++           |</div><div class="line">+----[SHA256]-----+</div></pre></td></tr></table></figure>
<h4 id="配置到Github中，关联到自己的本地仓库"><a href="#配置到Github中，关联到自己的本地仓库" class="headerlink" title="配置到Github中，关联到自己的本地仓库"></a>配置到Github中，关联到自己的本地仓库</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote add origin git@github.com:ZahiZhou/GitTest.git</div></pre></td></tr></table></figure>
<h4 id="推送本地文件"><a href="#推送本地文件" class="headerlink" title="推送本地文件"></a>推送本地文件</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 把本地内容推送到远程库上(添加-u参数可以让github master和本地master关联起来，方便以后提交git push</span></div><div class="line"><span class="comment">-- origin master)</span></div><div class="line"></div><div class="line">$ git push -u origin master</div></pre></td></tr></table></figure>
<h4 id="克隆本地库"><a href="#克隆本地库" class="headerlink" title="克隆本地库"></a>克隆本地库</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone git@github.com:ZahiZhou/GitTest.git</div></pre></td></tr></table></figure>
<h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b dev     <span class="comment">-- -b表示创建并切换相当于$ git branch dev     $ git checkout dev</span></div><div class="line">Switched to a new branch 'dev'</div></pre></td></tr></table></figure>
<h4 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">$ git branch</div><div class="line">* dev</div><div class="line">  master</div><div class="line"></div><div class="line">-- 用自己的分支提交修改(此时master分支没有改变)</div><div class="line"></div><div class="line">$ git add readme.md</div><div class="line">$ git commit -m "branch test"</div><div class="line">[dev 6806e4e] branch test</div><div class="line"> 1 file changed, 1 insertion(+)</div><div class="line"></div><div class="line">-- 将分支合并</div><div class="line"></div><div class="line">$ git checkout master</div><div class="line">Switched to branch 'master'</div><div class="line">Your branch is up-to-date with 'origin/master'.</div><div class="line">$ git merge dev</div><div class="line">Updating 91dd242..6806e4e</div><div class="line">Fast-forward</div><div class="line"> readme.md | 1 +</div><div class="line"> 1 file changed, 1 insertion(+)</div><div class="line"></div><div class="line">-- 合并完成之后放心删除分支</div><div class="line"></div><div class="line">$ git branch -d dev</div><div class="line">Deleted branch dev (was 6806e4e).</div><div class="line">$ git branch</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 项目管理 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git总结三]]></title>
      <url>/2016/11/03/Git%E6%80%BB%E7%BB%93%E4%B8%89/</url>
      <content type="html"><![CDATA[<p>承接上文,解决冲突和Bug分支的处理<br><a id="more"></a></p>
<h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">$ git <span class="keyword">merge</span> feature1</div><div class="line"><span class="keyword">Auto</span>-merging readme.md</div><div class="line">CONFLICT (<span class="keyword">content</span>): <span class="keyword">Merge</span> conflict <span class="keyword">in</span> readme.md</div><div class="line"><span class="keyword">Automatic</span> <span class="keyword">merge</span> <span class="keyword">failed</span>; fix conflicts and then <span class="keyword">commit</span> the result.</div><div class="line">$ git <span class="keyword">status</span></div><div class="line"><span class="keyword">On</span> branch <span class="keyword">master</span></div><div class="line">Your branch <span class="keyword">is</span> ahead <span class="keyword">of</span> <span class="string">'origin/master'</span> <span class="keyword">by</span> <span class="number">2</span> commits.</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git push"</span> <span class="keyword">to</span> publish your <span class="keyword">local</span> commits)</div><div class="line">You have unmerged paths.</div><div class="line">  (fix conflicts <span class="keyword">and</span> run <span class="string">"git commit"</span>)</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git merge --abort"</span> <span class="keyword">to</span> <span class="keyword">abort</span> the <span class="keyword">merge</span>)</div><div class="line"></div><div class="line">Unmerged paths:</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> mark resolution)</div><div class="line"></div><div class="line">        <span class="keyword">both</span> modified:   readme.md</div><div class="line"></div><div class="line"><span class="keyword">no</span> changes added <span class="keyword">to</span> <span class="keyword">commit</span> (<span class="keyword">use</span> <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)</div><div class="line">=======================================================================================readme.md</div><div class="line">Git <span class="keyword">is</span> a <span class="keyword">distributed</span> <span class="keyword">version</span> control <span class="keyword">system</span></div><div class="line">Git <span class="keyword">is</span> free software distributes <span class="keyword">under</span> the GPL</div><div class="line"><span class="keyword">Create</span> a <span class="keyword">new</span> branch <span class="keyword">is</span> <span class="keyword">quick</span></div><div class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; <span class="keyword">HEAD</span></div><div class="line">Creating a <span class="keyword">new</span> branch <span class="keyword">is</span> <span class="keyword">new</span> &amp; simple</div><div class="line">=======</div><div class="line">Creating a <span class="keyword">new</span> branch <span class="keyword">is</span> <span class="keyword">new</span> <span class="keyword">and</span> simple</div><div class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1</div><div class="line">=======================================================================================readme.md</div><div class="line">$ git <span class="keyword">add</span> readme.md</div><div class="line">$ git <span class="keyword">commit</span> -m <span class="string">"conflict fixed"</span></div><div class="line">[<span class="keyword">master</span> ede2552] conflict <span class="keyword">fixed</span></div><div class="line">$ git <span class="keyword">log</span></div><div class="line"><span class="keyword">commit</span> ede25527dd72c6c876f6ef6b79dd00921e6a16cd</div><div class="line"><span class="keyword">Merge</span>: a142647 <span class="number">59</span>f1f6b</div><div class="line">Author: Andy &lt;singleorb@outlook.com&gt;</div><div class="line"><span class="built_in">Date</span>:   Fri Nov <span class="number">25</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">22</span> <span class="number">2016</span> +<span class="number">0800</span></div><div class="line"></div><div class="line">    conflict <span class="keyword">fixed</span></div><div class="line"></div><div class="line"><span class="keyword">commit</span> a142647b09b5109ef18703c5dfd1f71c696c74b4</div><div class="line">Author: Andy &lt;singleorb@outlook.com&gt;</div><div class="line"><span class="built_in">Date</span>:   Fri Nov <span class="number">25</span> <span class="number">10</span>:<span class="number">05</span>:<span class="number">55</span> <span class="number">2016</span> +<span class="number">0800</span></div><div class="line"></div><div class="line">    &amp; simple</div><div class="line"></div><div class="line"><span class="keyword">commit</span> <span class="number">59</span>f1f6bf234fd893fb231af36098c8b1530f6953</div><div class="line">Author: Andy &lt;singleorb@outlook.com&gt;</div><div class="line"><span class="built_in">Date</span>:   Fri Nov <span class="number">25</span> <span class="number">10</span>:<span class="number">04</span>:<span class="number">18</span> <span class="number">2016</span> +<span class="number">0800</span></div><div class="line"></div><div class="line">    <span class="keyword">AND</span> simple</div><div class="line"></div><div class="line"><span class="keyword">commit</span> <span class="number">6806e4</span>eca90d891a29858dc37c5a3cd1919ac8fc</div><div class="line">Author: Andy &lt;singleorb@outlook.com&gt;</div><div class="line"><span class="built_in">Date</span>:   Fri Nov <span class="number">25</span> <span class="number">09</span>:<span class="number">54</span>:<span class="number">18</span> <span class="number">2016</span> +<span class="number">0800</span></div><div class="line"></div><div class="line">:</div><div class="line"></div><div class="line">$ git <span class="keyword">log</span> -graph</div><div class="line">*   <span class="keyword">commit</span> ede25527dd72c6c876f6ef6b79dd00921e6a16cd</div><div class="line">|\  <span class="keyword">Merge</span>: a142647 <span class="number">59</span>f1f6b</div><div class="line">| | Author: Andy &lt;singleorb@outlook.com&gt;</div><div class="line">| | <span class="built_in">Date</span>:   Fri Nov <span class="number">25</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">22</span> <span class="number">2016</span> +<span class="number">0800</span></div><div class="line">| |</div><div class="line">| |     conflict <span class="keyword">fixed</span></div><div class="line">| |</div><div class="line">| * <span class="keyword">commit</span> <span class="number">59</span>f1f6bf234fd893fb231af36098c8b1530f6953</div><div class="line">| | Author: Andy &lt;singleorb@outlook.com&gt;</div><div class="line">| | <span class="built_in">Date</span>:   Fri Nov <span class="number">25</span> <span class="number">10</span>:<span class="number">04</span>:<span class="number">18</span> <span class="number">2016</span> +<span class="number">0800</span></div><div class="line">| |</div><div class="line">| |     <span class="keyword">AND</span> simple</div><div class="line">| |</div><div class="line">* | <span class="keyword">commit</span> a142647b09b5109ef18703c5dfd1f71c696c74b4</div><div class="line">|/  Author: Andy &lt;singleorb@outlook.com&gt;</div><div class="line">|   <span class="built_in">Date</span>:   Fri Nov <span class="number">25</span> <span class="number">10</span>:<span class="number">05</span>:<span class="number">55</span> <span class="number">2016</span> +<span class="number">0800</span></div><div class="line">|</div><div class="line">|       &amp; simple</div><div class="line">|</div><div class="line">* <span class="keyword">commit</span> <span class="number">6806e4</span>eca90d891a29858dc37c5a3cd1919ac8fc</div><div class="line">| Author: Andy &lt;singleorb@outlook.com&gt;</div><div class="line">| <span class="built_in">Date</span>:   Fri Nov <span class="number">25</span> <span class="number">09</span>:<span class="number">54</span>:<span class="number">18</span> <span class="number">2016</span> +<span class="number">0800</span></div><div class="line">|</div><div class="line">:</div></pre></td></tr></table></figure>
<h2 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h2><h4 id="当你不想提交的时候快速修复bug"><a href="#当你不想提交的时候快速修复bug" class="headerlink" title="当你不想提交的时候快速修复bug"></a>当你不想提交的时候快速修复bug</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">Your branch is ahead of 'origin/master' by 3 commits.</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git push"</span> <span class="keyword">to</span> publish your <span class="keyword">local</span> commits)</div><div class="line">Changes <span class="keyword">not</span> staged <span class="keyword">for</span> <span class="keyword">commit</span>:</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)</div><div class="line"></div><div class="line">        modified:   readme.md</div><div class="line"></div><div class="line"><span class="keyword">no</span> changes added <span class="keyword">to</span> <span class="keyword">commit</span> (<span class="keyword">use</span> <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)</div><div class="line"></div><div class="line">$ git stash</div><div class="line">Saved working <span class="keyword">directory</span> <span class="keyword">and</span> <span class="keyword">index</span> state WIP <span class="keyword">on</span> <span class="keyword">master</span>: a3b3f7d <span class="keyword">delete</span> <span class="keyword">no</span>-<span class="keyword">off</span> <span class="built_in">text</span></div><div class="line"><span class="keyword">HEAD</span> <span class="keyword">is</span> <span class="keyword">now</span> <span class="keyword">at</span> a3b3f7d <span class="keyword">delete</span> <span class="keyword">no</span>-<span class="keyword">off</span> <span class="built_in">text</span></div><div class="line"></div><div class="line">得到</div><div class="line">$ git <span class="keyword">status</span></div><div class="line"><span class="keyword">On</span> branch <span class="keyword">master</span></div><div class="line">Your branch <span class="keyword">is</span> ahead <span class="keyword">of</span> <span class="string">'origin/master'</span> <span class="keyword">by</span> <span class="number">3</span> commits.</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git push"</span> <span class="keyword">to</span> publish your <span class="keyword">local</span> commits)</div><div class="line"><span class="keyword">nothing</span> <span class="keyword">to</span> <span class="keyword">commit</span>, working tree clean</div><div class="line"></div><div class="line">创建bug分支</div><div class="line">$ git checkout -b issue<span class="number">-101</span></div><div class="line">Switched <span class="keyword">to</span> a <span class="keyword">new</span> branch <span class="string">'issue-101'</span></div><div class="line"></div><div class="line">$ git stash pop</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 项目管理 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学会学习]]></title>
      <url>/2016/11/01/%E5%AD%A6%E4%BC%9A%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="大脑"><a href="#大脑" class="headerlink" title="大脑"></a>大脑</h2><p>我们的大脑神秘而又复杂，了解自己的大脑是如何运作的，哪怕只是了解很少的一部分，就会使我们的学习更轻松，对事物的理解更深入。</p>
<h3 id="大脑的思考模式"><a href="#大脑的思考模式" class="headerlink" title="大脑的思考模式"></a>大脑的思考模式</h3><ul>
<li>专注模式(Fucused)</li>
<li>发散模式(Diffuse)</li>
</ul>
<p>当我们学习新东西的时候比喻和类比是很有用的方法<br>专注模式和发散模式只能单独存在<br>学习困难的东西需要花很长的时间，我们的大脑要转变学习方式，以此努力来面对和消化新的事物</p>
<p>专注做一件事情25分钟，然后休息一下。Pomodoro<br>实践即永久</p>
<h2 id="记忆"><a href="#记忆" class="headerlink" title="记忆"></a>记忆</h2><h3 id="记忆的模式"><a href="#记忆的模式" class="headerlink" title="记忆的模式"></a>记忆的模式</h3><ul>
<li>长期记忆</li>
<li>工作记忆</li>
</ul>
<p>长期记忆极其重要，我们要把工作记忆转换成长期记忆，最好的方法是间隔记忆法。比如记忆一个单词，我们今天重复记忆二十次的效果比不上我们花几天时间，每天看一次效果好。</p>
<h2 id="睡眠"><a href="#睡眠" class="headerlink" title="睡眠"></a>睡眠</h2><p>绝对清醒会让我们的大脑产生有毒物质，我们的大脑细胞在睡觉的时候回收缩，这样细胞间的间隔就会变大，大脑内的流体就会把有毒物质冲走。所以睡觉有时候看起来是浪费时间，但却是大脑保持清洁和健康的一种方式</p>
<h2 id="特伦斯·谢诺沃斯基-Terrence-Sejnowski-的学习方法"><a href="#特伦斯·谢诺沃斯基-Terrence-Sejnowski-的学习方法" class="headerlink" title="特伦斯·谢诺沃斯基 (Terrence Sejnowski)的学习方法"></a>特伦斯·谢诺沃斯基 (Terrence Sejnowski)的学习方法</h2><ul>
<li>学习新事物的方法就是单刀直入，大量的阅读不会有太大的帮助</li>
<li>应对一场乏味的演讲，参与进去会让你收获良多</li>
<li>锻炼可以增加神经元的数量，在锻炼中可以获得很多的好点子</li>
<li>在一个具有创造力的环境中可以激发你的创造力</li>
<li>成功多半来自于激情和努力,坚持到底，永不放弃。</li>
</ul>
<hr>
<h2 id="组块-chunk"><a href="#组块-chunk" class="headerlink" title="组块(chunk)"></a>组块(chunk)</h2><p>通过使用或意义链接在一起的信息碎片</p>
<h3 id="如何建立组块"><a href="#如何建立组块" class="headerlink" title="如何建立组块"></a>如何建立组块</h3><ul>
<li>对你要组块化的信息全神贯注</li>
<li>对你的要建立的组块进行理解</li>
</ul>
<blockquote>
<p>自己实际操作和完全掌握的情况下才能建立起神经模型</p>
</blockquote>
<ul>
<li>获取背景知识</li>
</ul>
<blockquote>
<p>学会如何什么时候使用或不使用这个组块</p>
</blockquote>
<ul>
<li>练习能帮你扩宽组块连接的神经网络</li>
</ul>
<h2 id="学习能力方面的误解"><a href="#学习能力方面的误解" class="headerlink" title="学习能力方面的误解"></a>学习能力方面的误解</h2><p>当我们学习的时候多数会采用找一本学习资料反复阅读的方法，不过心里学家Jeffrey Karpicke证明，这种学习方法远不及另一种简单的技巧，回顾recall。阅读一个材料之后，移开视线，看你能回忆多少</p>
<h3 id="学习时对能力的错觉"><a href="#学习时对能力的错觉" class="headerlink" title="学习时对能力的错觉"></a>学习时对能力的错觉</h3><p>学生们喜欢重读笔记或课本的原因是：当他们面前打开着课本或谷歌时，当他们面前打开着课本或谷歌时 会误以为这些知识同样在他们的脑海里。然而事实却并非如此，因为看书比回顾做起来简单，但学生们会陷入 (一种自欺欺人的) 错觉 这种学习方式效率很低</p>
<h3 id="在学习场所外回顾会帮助你更好的理解和学习"><a href="#在学习场所外回顾会帮助你更好的理解和学习" class="headerlink" title="在学习场所外回顾会帮助你更好的理解和学习"></a>在学习场所外回顾会帮助你更好的理解和学习</h3><p>当你学习新事物的时候 你通常会把最开始接触材料的地方 当作潜意识中的提示，但一到考试就乱了阵脚， 因为考试与学习场所通常不同 通过在不同物理环境下回顾和思考学习资料，你会脱离对给定场所的依赖 这会帮助你避免由于考试与学习场所的不同而产生的问题。</p>
]]></content>
      
        <categories>
            
            <category> 备份 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 备份 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
